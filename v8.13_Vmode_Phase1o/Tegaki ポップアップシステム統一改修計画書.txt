===============================================
Tegaki ポップアップシステム統一改修計画書（改訂版）
v8.13_Vmode_Phase1
===============================================

【改修目標】
1. quick-access-popup.jsのスライダー●が動かない問題を根本解決
2. 左サイドバーアイコンから起動するポップアップの実装パターン統一
3. スライダーUIの色配置問題（青→茶系への統一）
4. ファイル命名規則の統一（*-slider.js → *-popup.js）

【対象外】
- GIFアニメタイムライン（timeline-ui.js）：特殊設計のため参考にしない


===============================================
【実装パターン比較・根本原因分析】
===============================================

【パターン対比表】

| 項目 | resize-slider.js | quick-access-popup.js | settings-popup.js |
|-----|-----------------|-------------------|-----------------|
| ファイル形式 | IIFE（関数型） | クラス型 | クラス型 |
| スライダー構造 | .resize-slider-container + track + handle | .resize-slider-container + track + handle | .slider + track + handle |
| ハンドル更新方法 | **クリック時のみ、addEventListenerでDOM操作** | HTML自体に直接設定（left値操作） | **eventListener内で直接操作** ✅ |
| CSS: position: relative | ✅ .resize-slider | ❌ **なし！** | ✅ .slider |
| CSS: handle position: absolute | ✅ .resize-slider-handle | ❌ **なし！** | ✅ .slider-handle |
| CSS: handle transform | ✅ translate(-50%, -50%) | ❌ **なし！** | ✅ translate(-50%, -50%) |
| ドラッグ時の動作 | handle.style.left = percent + '%' | ✅ style.left設定あり | ✅ style.left設定あり |
| イベントリスナー登録 | **グローバル（document.addEventListener）** | ✅ グローバル | ✅ グローバル |
| スライダーコンテナ指定 | `container.addEventListener('mousedown', ...)` | ✅ container.addEventListener | ✅ container.addEventListener |
| 動作確認 | ✅ 正常に動く | ❌ 動かない | ✅ 正常に動く |


【根本原因特定】

quick-access-popup.js が動かない理由：

1. **CSS問題**
   - `#pen-size-slider-container` に `position: relative` がない → 相対配置が機能しない
   - `#pen-size-handle` に `position: absolute` がない → left値が無視される
   - `transform: translate(-50%, -50%)` がないか不十分 → 中央合わせが失敗

2. **HTML構造の問題**
   - インラインスタイルで `style="..."`が多く、CSSルールが上書きされている可能性
   - main.cssで定義した`#pen-size-slider-container`等のCSS定義が機能していない

3. **JS側は正しい**
   - `this.sizeHandle.style.left = percent + '%'` は実装されている
   - ドラッグ時の更新ロジックも正しい

**結論：CSS定義の不完全さが原因**


===============================================
【改修戦略決定】
===============================================

**settings-popup.jsをベースに統一する**

理由：
- スライダー●が確実に動く実装になっている
- CSSも正しく定義されている（.slider, .slider-track, .slider-handle）
- クラス型で責務が明確
- EventBus統合済み

### 改修パターン：「settings-popup.js の実装に統一」

```
quick-access-popup.js の改修方針：
1. HTML内の.resize-slider系クラスを.slider系クラスに変更
2. main.css内の#pen-size-*系の定義を削除し、.slider*クラスの統一定義を使用
3. JS内のスライダー更新ロジックを settings-popup._createSlider() の実装に合わせる
4. 色配置の統一（青系→茶系futaba色へ）
```

### 改修パターン：「resize-slider.js との統一」

```
考慮点：
- resize-slider.js はクラス型でない（IIFE形式）
- グローバル変数を使用（isDraggingWidth等）
- PopupManager未統合
- すべてのポップアップをresize-slider.jsパターンに変更するのは逆行

結論：resize-slider.jsを改修する方が手間＞settings-popup.jsパターンに統一する方が効率的
```

**決定：settings-popup.jsをベースとする実装パターンに統一**


===============================================
【改修スケジュール（改訂版）】
===============================================

【フェーズA】CSS統一定義の修正（優先度：最高・今すぐ）
対象：styles/main.css
内容：
- `.slider`, `.slider-track`, `.slider-handle` の定義を明確化
- `#pen-size-*`, `#pen-opacity-*` の個別ID定義を削除
- 色配置を futaba-maroon 系に統一

【フェーズB】quick-access-popup.js の HTML構造修正（優先度：最高）
対象：ui/quick-access-popup.js
内容：
- HTML内の class を `.resize-slider*` → `.slider*` に変更
- インラインスタイルを削除、CSSクラスに統一

【フェーズC】quick-access-popup.js の JS実装修正（優先度：最高）
対象：ui/quick-access-popup.js
内容：
- _createSlider() メソッドを settings-popup._createSlider() と同じ実装に
- または slider-utils.js の SliderUtils.createSlider() を導入
- スライダー更新ロジックを統一

【フェーズD】resize-slider.js → resize-popup.js へのリファクタリング（優先度：中）
対象：ui/resize-slider.js
内容：
- IIFE → クラス型への変換
- グローバル変数をインスタンス変数化
- PopupManager統合
- イベントBus統合

【フェーズE】全ポップアップの統一確認（優先度：低）
- すべてのポップアップが同じパターンで実装されているか検証


===============================================
【フェーズA】main.css スライダーセクション定義（修正案）
===============================================

現在の問題のあるCSS：
```css
/* ペン設定ポップアップ専用の個別ID定義 */
#pen-size-slider-container,
#pen-opacity-slider-container {
    position: relative;      /* ← これがあるはずなのに機能していない */
    height: 5px;
}

#pen-size-track,
#pen-opacity-track {
    position: absolute;      /* ← これも定義されているのに機能していない */
    left: 0;
    top: 50%;
    width: 0%;
    ...
}

#pen-size-handle,
#pen-opacity-handle {
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(-50%, -50%);
    ...
}
```

修正後のCSS：
```css
/* ===== 統一スライダーUI ===== */

.slider {
    flex: 1;
    height: 6px;
    background: var(--futaba-light-medium);
    border-radius: 3px;
    position: relative;       /* ← 必須 */
    cursor: pointer;
}

.slider-track {
    height: 100%;
    background: var(--futaba-maroon);
    border-radius: 3px;
    transition: width 0.1s;
}

.slider-handle {
    width: 16px;
    height: 16px;
    background: var(--futaba-maroon);
    border: 2px solid var(--futaba-background);
    border-radius: 50%;
    position: absolute;       /* ← 必須 */
    top: 50%;
    left: 0%;                 /* ← JSで更新 */
    transform: translate(-50%, -50%);  /* ← 中央合わせ必須 */
    cursor: grab;
    transition: left 0.1s;    /* ← スムーズなアニメーション */
}

/* 小型スライダー（リサイズポップアップ用） */
.resize-slider {
    flex: 1;
    height: 5px;
    background: var(--futaba-light-medium);
    border-radius: 3px;
    position: relative;
    cursor: pointer;
}

.resize-slider-track {
    height: 100%;
    background: var(--futaba-maroon);
    border-radius: 3px;
    transition: width 0.1s;
}

.resize-slider-handle {
    width: 14px;
    height: 14px;
    background: var(--futaba-maroon);
    border: 2px solid var(--futaba-background);
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(-50%, -50%);
    cursor: grab;
    transition: left 0.1s;
}

/* IDベースの個別定義は削除する */
#pen-size-slider-container,
#pen-opacity-slider-container {
    /* .slider クラスで対応 */
}
```


===============================================
【実装優先順位（改訂版）】
===============================================

**PHASE 1: CSS修正（最優先・30分以内）**
1. main.css の `.slider*` 定義を明確化
2. `.resize-slider*` との区別を明確化
3. 色をfutaba系に統一

**PHASE 2: quick-access-popup.js 修正（最優先・1時間以内）**
1. HTML: `.resize-slider*` → `.slider*` クラスに変更
2. JS: settings-popup.js と同じ _createSlider() パターンに統一
3. テスト：ハンドル●が滑らかに動くか確認

**PHASE 3: settings-popup.js 確認**
- 既に正しく実装されているため変更不要
- 他のポップアップの参考実装として保持

**PHASE 4: resize-popup.js への統一（後日）**
- resize-slider.js をクラス型に変換
- settings-popup.js と同じパターンで実装

**PHASE 5: 全体検証**
- すべてのスライダーが同じ実装になっているか確認
- ColorWash ⊕ 同じCSS + 同じJSパターン


===============================================
【最終目標状態】
===============================================

### すべてのスライダー が同じ動作をする

```
settings-popup.js (現在動作中) ← このパターンに統一
├─ CSSクラス: .slider / .slider-track / .slider-handle
├─ JS: _createSlider() メソッドで統一
└─ 色: futaba-maroon系

quick-access-popup.js (修正後)
├─ CSSクラス: .slider → 統一（大きさは調整可）
├─ JS: settings-popup.js と同じロジック
└─ 色: futaba-maroon系 ✅

resize-popup.js (将来)
├─ CSSクラス: .resize-slider* で小型統一
├─ JS: クラス型 + _createSlider()
└─ 色: futaba-maroon系 ✅
```

### ドキュメント

すべてのポップアップ：
- 必須メソッド：show() / hide() / toggle() / isReady() / destroy()
- スライダーロジック：統一パターン（settings-popup.js準拠）
- イベント駆動：EventBus通知
- 管理：PopupManager一元化

===============================================