================================================================================
Tegaki Anime - 新機能実装ガイドライン
================================================================================

プロジェクト概要
----------------
画像掲示板（あぶくちゃんねる）用のアニメーション描画ツール。
CSP制約を回避するため、全ライブラリを1ファイルに統合している。

重要な制約
----------
❌ CDN使用禁止（CSP制約のため）
❌ bundler (webpack/rollup) 使用禁止
❌ ESM 使用禁止
❌ TypeScript 使用禁止
✅ npm（ライブラリダウンロードのみ）
✅ IIFE + window公開パターン

ファイル構成
------------
tegaki_anime_test/
├── src/
│   └── tegaki_anime_core.js    # ★ 新機能はここに実装
├── libs/                        # npmからコピーしたライブラリ
│   ├── upng.js
│   ├── pako.js
│   ├── gif.js
│   └── gif.worker.js
├── dist/
│   └── tegaki_anime.js          # ビルド生成物（編集禁止）
├── build.js                     # ビルドスクリプト（通常編集不要）
├── tegaki-loader_anime.js       # ローダー（UI調整時のみ編集）
└── TegakiAniTest.html           # テスト用

基本的な開発フロー
------------------
1. src/tegaki_anime_core.js を編集
2. npm run build を実行
3. TegakiAniTest.html で動作確認
4. git commit & push（GitHub Pagesが自動更新）

新機能実装パターン
------------------

【パターン1: UIボタンの追加】
場所: createUI() または createControlPanel() メソッド内

const newBtn = document.createElement('button');
newBtn.textContent = '新機能';
newBtn.style.cssText = `padding: 8px; background: #4ade80; color: white; border: none; cursor: pointer;`;
newBtn.onclick = () => this.executeNewFeature();
this.controlPanel.appendChild(newBtn);

【パターン2: 描画機能の追加】
場所: draw() メソッド内

draw(e) {
    if (!this.isDrawing) return;
    const rect = this.canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // ★ 新機能の処理を追加
    if (this.newFeatureEnabled) {
        this.ctx.globalCompositeOperation = 'destination-out'; // 消しゴム等
    }
    
    this.ctx.beginPath();
    this.ctx.moveTo(this.lastX, this.lastY);
    this.ctx.lineTo(x, y);
    this.ctx.stroke();
    this.lastX = x;
    this.lastY = y;
}

【パターン3: ショートカットキー追加】
場所: registerDefaultKeys() メソッド内

registerDefaultKeys() {
    const km = this.keyManager;
    km.register('z', { ctrl: true }, () => this.undo(), 'Undo');
    km.register('y', { ctrl: true }, () => this.redo(), 'Redo');
    km.register('e', {}, () => this.switchTool('eraser'), 'Eraser'); // ★ 追加例
}

【パターン4: 新しいプロパティの追加】
場所: constructor() メソッド内

constructor(container) {
    this.container = container;
    this.canvas = null;
    this.color = '#800000';
    this.size = 2;
    
    // ★ 新機能用のプロパティを追加
    this.newFeatureEnabled = false;
    this.newFeatureValue = 0;
    
    this.init();
}

新しいnpmライブラリを追加する手順
----------------------------------
例: Chart.js を追加したい場合

1. package.json の dependencies に追加:
{
  "dependencies": {
    "upng-js": "^2.1.0",
    "pako": "^2.1.0",
    "gif.js": "^0.2.0",
    "chart.js": "^4.0.0"  // ★ 追加
  }
}

2. ライブラリをインストール:
npm install

3. 必要なファイルをlibs/にコピー:
cp node_modules/chart.js/dist/chart.umd.js libs/chart.js

4. build.js の libraryFiles に追加:
const libraryFiles = [
    'libs/upng.js',
    'libs/pako.js',
    'libs/gif.js',
    'libs/chart.js'  // ★ 追加
];

5. ビルド:
npm run build

6. グローバル公開が必要な場合は build.js の Global Exports に追加:
if (typeof Chart !== 'undefined') {
    window.Chart = Chart;
}

Workerを含むライブラリの追加方法
--------------------------------
例: GIF.js（既に実装済み）を参考に

1. Worker用のJSファイルも libs/ にコピー
2. build.js でWorkerをBase64エンコード:

const workerCode = fs.readFileSync('libs/your.worker.js', 'utf8');
const workerBase64 = Buffer.from(workerCode).toString('base64');

3. Blob URLとして公開するコードを追加:

output += `
(function() {
    const workerCode = atob('${workerBase64}');
    const blob = new Blob([workerCode], { type: 'application/javascript' });
    const workerUrl = URL.createObjectURL(blob);
    window.__yourWorkerUrl = workerUrl;
})();
`;

4. コア側でBlob URLを使用:
const worker = new Worker(window.__yourWorkerUrl);

注意事項
--------
❌ やってはいけないこと
- dist/tegaki_anime.js を直接編集（ビルドで上書きされる）
- CDNから直接読み込み（CSP制約で動かない）
- グローバル変数を乱用（必ず window.* または this.* 経由）

✅ 推奨事項
- 小さく始める: 1機能ずつ実装・テスト
- console.log を活用: 動作確認を逐一行う
- 既存コードを参考: 似た機能の実装パターンを真似る
- ビルドを忘れない: src/ 編集後は必ず npm run build

テスト方法
----------
【ローカルテスト】
npm run build
python -m http.server 8000
# http://localhost:8000/TegakiAniTest.html で確認

【本番テスト（あぶくちゃんねる）】
1. git push でGitHub Pagesにデプロイ
2. ブックマークレット実行
3. 実際に描画→投稿して確認

トラブルシューティング
----------------------
Q: ビルド後も変更が反映されない
A: ブラウザキャッシュをクリア（Ctrl+Shift+R）

Q: 新しいライブラリが undefined
A: build.js の Global Exports でwindowに公開されているか確認

Q: Worker が動かない
A: build.js で Base64 化されているか、Blob URL が正しく生成されているか確認

Q: CSPエラーが出る
A: 外部URLを参照していないか確認。全てlibs/から読み込む必要がある

実装例: 消しゴムツール（既存コードより）
----------------------------------------
// constructor に追加
this.tool = 'pen'; // 'pen' or 'eraser'
this.eraserSize = 10;

// ツール切り替えメソッド
switchTool(tool) {
    this.tool = tool;
    if (tool === 'eraser') {
        this.ctx.globalCompositeOperation = 'destination-out';
        this.ctx.lineWidth = this.eraserSize;
    } else {
        this.ctx.globalCompositeOperation = 'source-over';
        this.ctx.lineWidth = this.size;
    }
}

// UIボタン追加（createControlPanel内）
const eraserBtn = document.createElement('button');
eraserBtn.innerHTML = '🧹 消しゴム';
eraserBtn.onclick = () => this.switchTool('eraser');

// ショートカット追加（registerDefaultKeys内）
km.register('e', {}, () => this.switchTool('eraser'), 'Eraser');

コーディング規約
----------------
- IIFEで必ずラップ: (function() { 'use strict'; ... })();
- window経由で公開: window.TegakiAnimeCore = class { ... };
- イベントリスナーは必ず解除: destroy() でremoveEventListener
- 変数はキャメルケース: activeLayerIndex, frameCount
- async/await を使用: Promise.then より可読性が高い

メンテナンス時の確認ポイント
----------------------------
✓ src/tegaki_anime_core.js のみ編集しているか
✓ npm run build を実行したか
✓ dist/tegaki_anime.js が更新されているか（タイムスタンプ確認）
✓ ブラウザコンソールにエラーが出ていないか
✓ GitHub Pages にプッシュしたか（本番反映）

デプロイ
--------
git add src/tegaki_anime_core.js dist/tegaki_anime.js
git commit -m "feat: Add new feature"
git push origin main
# GitHub Pages が自動更新（数分かかる）

本番URL
-------
https://toshinka.github.io/tegaki/tegaki_anime_test/dist/tegaki_anime.js
https://toshinka.github.io/tegaki/tegaki_anime_test/tegaki-loader_anime.js

================================================================================
END OF DOCUMENT
================================================================================