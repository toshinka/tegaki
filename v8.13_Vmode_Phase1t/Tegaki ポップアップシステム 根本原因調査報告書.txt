# Tegaki ポップアップシステム 根本原因調査報告書

## 調査日時: 2025-10-23

---

## 【結論】根本原因

### 1. イベントリスナースコープの根本的相違

**resize-slider.js（動作する）**
```javascript
// IIFE内グローバル変数で状態管理
let isDraggingWidth = false;
let isDraggingHeight = false;

function setupDragHandlers(elements) {
    const handleMouseMove = (e) => {
        if (isDraggingWidth) { ... }  // ✅ IIFE内グローバル変数を参照
    };
    
    document.addEventListener('mousemove', handleMouseMove);
}
```

**resize-popup.js / quick-access-popup.js（動作しない）**
```javascript
class Popup {
    _setupSliders() {
        const handleMouseMove = (e) => {
            if (this.isDraggingWidth) { ... }  // ❌ thisのスコープ問題
        };
        
        // ❌ handleMouseMoveはローカル変数
        // removeEventListenerで削除不可能
        document.addEventListener('mousemove', handleMouseMove);
    }
}
```

### 2. BrushSettings API不整合

**quick-access-popup.jsでの呼び出し**
```javascript
this.brushSettings.getOpacity();  // ❌ メソッド未定義
```

**brush-settings.jsの実装状況**
```javascript
getAlpha() { return this.alpha; }  // ✅ 実装済み（0.0-1.0）
getOpacity() { return this.alpha * 100; }  // ✅ 実装済み（0-100%）
```
→ **ファイルは正しいが、quick-access-popup.jsが古いAPIを呼び出している可能性**

### 3. DOM親要素のwidth=0問題

```
Console出力:
Slider rect: {width: 0, height: 0}  ❌ 親要素サイズなし
Track width: 49.1525%               ✅ パーセンテージ計算は正しい

問題: 0の49% = 0 → 視覚的に動かない
```

---

## 【Phase別改修計画】

### Phase 1: イベントリスナー管理の統一（最優先）

#### 対象ファイル
- `ui/resize-popup.js`
- `ui/quick-access-popup.js`

#### 参考パターン
- `ui/resize-slider.js` (動作確認済み)

#### 改修内容

**現在の問題パターン（quick-access-popup.js）**
```javascript
_setupSizeSlider() {
    const handleMouseMove = (e) => { ... };  // ローカル変数
    const handleMouseUp = () => { ... };
    
    // ❌ 参照を保持していない
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
}

destroy() {
    // ❌ 削除できない（参照がない）
}
```

**修正パターン（resize-slider.jsベース）**
```javascript
constructor() {
    this.isDraggingSize = false;
    this.isDraggingOpacity = false;
    this.mouseMoveHandler = null;  // ✅ 参照を保持
    this.mouseUpHandler = null;
}

_setupSliders() {
    // ✅ クラスプロパティとして保存
    this.mouseMoveHandler = (e) => {
        if (this.isDraggingSize) { ... }
        if (this.isDraggingOpacity) { ... }
    };
    
    this.mouseUpHandler = () => {
        this.isDraggingSize = false;
        this.isDraggingOpacity = false;
    };
    
    document.addEventListener('mousemove', this.mouseMoveHandler);
    document.addEventListener('mouseup', this.mouseUpHandler);
}

destroy() {
    // ✅ 正しく削除可能
    if (this.mouseMoveHandler) {
        document.removeEventListener('mousemove', this.mouseMoveHandler);
    }
    if (this.mouseUpHandler) {
        document.removeEventListener('mouseup', this.mouseUpHandler);
    }
}
```

---

### Phase 2: DOM構造とCSS整合性の確保

#### 対象ファイル
- `styles/main.css`
- `ui/quick-access-popup.js`

#### 問題点
```css
/* 親要素が display:none または width:0 になっている可能性 */
#quick-access-popup { ... }
```

#### 検証手順
1. Consoleで実行:
```javascript
const slider = document.getElementById('pen-size-slider');
const rect = slider.getBoundingClientRect();
console.log('Width:', rect.width, 'Height:', rect.height);
```

2. 親要素のCSS確認:
```javascript
const popup = document.getElementById('quick-access-popup');
console.log('Display:', window.getComputedStyle(popup).display);
console.log('Width:', window.getComputedStyle(popup).width);
```

#### 修正方針
- `.resize-slider-row` に `min-width: 200px` を保証
- `#quick-access-popup` に `display: block` を明示
- `pointer-events: none` の除去確認

---

### Phase 3: BrushSettings API呼び出しの修正

#### 対象ファイル
- `ui/quick-access-popup.js`

#### 現在の実装状況
```javascript
// brush-settings.js
getAlpha() { return this.alpha; }     // 0.0-1.0
getOpacity() { return this.alpha * 100; }  // 0-100%
setOpacity(opacity) { this.setAlpha(opacity / 100); }
```

#### quick-access-popup.jsの修正箇所
```javascript
// ❌ 修正前
const current = (window.BrushSettings?.getOpacity() || 1) * 100;

// ✅ 修正後
const current = window.BrushSettings?.getOpacity() || 100;
```

**全置換箇所**
- `_setupStepButtons()` の4箇所
- `_updateUI()` の1箇所

---

### Phase 4: 初期化フローの統一

#### 参考: resize-slider.js（成功パターン）
```javascript
function init() {
    const elements = getElements();  // ✅ 要素取得
    
    currentWidth = window.TEGAKI_CONFIG?.canvas?.width || 344;
    
    updateWidthSlider(currentWidth, elements);  // ✅ UI更新
    
    setupDragHandlers(elements);  // ✅ イベント設定
}
```

#### resize-popup.js / quick-access-popup.jsの統一パターン
```javascript
show() {
    if (!this.initialized) {
        this._cacheElements();      // 要素取得
        this._loadCurrentSettings(); // 設定読込
        this._setupAllHandlers();    // イベント設定
        this._updateUI();            // UI更新
        this.initialized = true;
    } else {
        this._updateUI();  // 再表示時は更新のみ
    }
    
    this.panel.classList.add('show');
}
```

---

## 【実装チェックリスト】

### Phase 1: イベントリスナー管理
- [ ] resize-popup.js: `mouseMoveHandler/mouseUpHandler`をクラスプロパティ化
- [ ] quick-access-popup.js: 同上
- [ ] 両ファイル: `destroy()`でremoveEventListener実装
- [ ] メモリリークテスト（10回開閉してlistener数確認）

### Phase 2: DOM/CSS
- [ ] `main.css`: `.resize-slider-row` の最小幅設定
- [ ] `main.css`: `#quick-access-popup` の表示保証
- [ ] Console検証: `getBoundingClientRect().width > 0` 確認
- [ ] `pointer-events: none` の除去確認

### Phase 3: BrushSettings API
- [ ] quick-access-popup.js: `getOpacity()` 呼び出しの `* 100` 削除
- [ ] quick-access-popup.js: `_setupStepButtons()` 修正
- [ ] quick-access-popup.js: `_updateUI()` 修正
- [ ] 動作確認: ステップボタンで±5%変化

### Phase 4: 初期化フロー
- [ ] resize-popup.js: `show()` フロー統一
- [ ] quick-access-popup.js: `show()` フロー統一
- [ ] 初回表示確認
- [ ] 再表示確認

---

## 【検証コマンド集】

### DOM要素確認
```javascript
// 1. スライダー要素存在確認
const slider = document.getElementById('pen-size-slider');
console.log('Slider:', slider);

// 2. サイズ確認
const rect = slider?.getBoundingClientRect();
console.log('Width:', rect?.width, 'Height:', rect?.height);

// 3. 親要素確認
const popup = document.getElementById('quick-access-popup');
const style = window.getComputedStyle(popup);
console.log('Display:', style.display, 'Width:', style.width);
```

### イベントリスナー確認
```javascript
// Chrome DevTools専用
const handle = document.getElementById('pen-size-handle');
console.log('Handle listeners:', getEventListeners(handle));

const docListeners = getEventListeners(document);
console.log('Document mousemove:', docListeners.mousemove?.length);
console.log('Document mouseup:', docListeners.mouseup?.length);
```

### メモリリークテスト
```javascript
const initialCount = getEventListeners(document).mousemove?.length || 0;
console.log('Initial:', initialCount);

for (let i = 0; i < 10; i++) {
    window.PopupManager.toggle('quickAccess');
}

setTimeout(() => {
    const finalCount = getEventListeners(document).mousemove?.length || 0;
    console.log('Final:', finalCount);
    if (finalCount > initialCount) {
        console.error('❌ Memory leak:', finalCount - initialCount, 'listeners');
    } else {
        console.log('✅ No leak');
    }
}, 1000);
```

### スライダー動作テスト
```javascript
// 値を手動設定
const popup = window.PopupManager.get('quickAccess');
if (popup._updateSizeSlider) {
    popup._updateSizeSlider(15);
    console.log('Size set to 15');
}

// 表示確認
const display = document.getElementById('pen-size-display');
console.log('Display:', display?.textContent);

// ハンドル位置確認
const handle = document.getElementById('pen-size-handle');
console.log('Handle left:', handle?.style.left);
```

---

## 【命名・構造統一ルール】

### DOM ID命名規則
```
canvas-{function}-{element}    リサイズ系
pen-{function}-{element}       ペン設定系

例:
canvas-width-slider
canvas-width-handle
pen-size-slider
pen-opacity-track
```

### HTML構造
```html
<div class="resize-compact-group">
    <div class="resize-compact-label">ラベル</div>
    <div class="resize-slider-row">
        <button class="resize-arrow-btn">◀</button>
        <div class="resize-slider" id="xxx-slider">
            <div class="resize-slider-track" id="xxx-track"></div>
            <div class="resize-slider-handle" id="xxx-handle"></div>
        </div>
        <button class="resize-arrow-btn">▶</button>
    </div>
    <div class="resize-value-row">
        <div class="resize-value-display" id="xxx-display">値</div>
    </div>
</div>
```

### イベントフロー
```
1. handle mousedown → isDragging = true
2. document mousemove → isDragging確認 → 値更新
3. document mouseup → isDragging = false
4. slider click (handle以外) → 即座に値更新
```

### メソッド命名
```javascript
_cacheElements()        // DOM要素取得・キャッシュ
_setupXxxSlider()       // スライダーイベント設定
_updateXxxSlider(val)   // スライダー値・表示更新
_loadCurrentSettings()  // 現在設定の読込
_updateUI()             // UI全体更新
```

---

## 【実装優先順位】

### 🔴 緊急（即日対応）
1. Phase 1: イベントリスナー管理
2. Phase 3: BrushSettings API修正

### 🟡 重要（1-2日以内）
3. Phase 2: DOM/CSS整合性
4. Phase 4: 初期化フロー統一

### 🟢 推奨（時間あれば）
5. 命名規則の完全統一
6. コメント・ドキュメント整備

---

## 【後続Claude向け注意事項】

### このファイルを参照する際の前提
- resize-slider.jsのパターンが**唯一の動作保証実装**
- クラス化する際はスコープ管理に最大限注意
- `const handleXxx = () => {}` パターンは参照保持必須
- BrushSettingsは既に正しく実装済み（APIミスマッチのみ）

### 改修時の禁止事項
- ❌ inline styleでの強制上書き
- ❌ pointerEvents操作
- ❌ setTimeout依存の初期化
- ❌ グローバル変数の新規追加

### 推奨パターン
- ✅ resize-slider.jsのコピー&クラス化
- ✅ アロー関数でthis維持
- ✅ クラスプロパティで参照保持
- ✅ requestAnimationFrameは最小限