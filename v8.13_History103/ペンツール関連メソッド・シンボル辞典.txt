# ペンツール関連メソッド・シンボル辞典

## 📋 概要
現在のツールサイズ管理とペン/消しゴム切り替えフローを俯瞰的に確認するための辞典

---

## 🎯 現在の問題点

### 1. **ToolSizeManager が存在しない**
- `system/tool-size-manager.js` のURLは実際には `system/drawing/drawing-engine.js` を指している
- 真の ToolSizeManager クラスが実装されていない
- config.js には `tools`、`sizeSlots`、`dragAdjustment` の設定はあるが、それを管理するマネージャーが不在

### 2. **EventBus イベント定義が不完全**
- `tool:size-opacity-changed` イベントは DrawingEngine で購読されている
- `tool:size:changed` イベントも購読されている
- しかし、これらを **発火する側** (ToolSizePopup) が未実装

### 3. **UIController のフロー**
- `handleToolClick()` で `toolbarIconClickMode` を使った判定は実装済み
- `showToolSizePopup(tool)` メソッドは実装済みだが、`window.ToolSizePopup` が未定義

---

## 🔍 既存の関連シンボル一覧

### Config (config.js)
```javascript
// ツール設定
window.TEGAKI_CONFIG.tools = {
  pen: { defaultSize: 10, defaultOpacity: 0.85 },
  eraser: { defaultSize: 20, defaultOpacity: 1.0 }
}

// サイズスロット (1-9キー用)
window.TEGAKI_CONFIG.sizeSlots = {
  pen: [2, 4, 6, 8, 12, 16, 24, 36, 50],
  eraser: [10, 15, 20, 30, 40, 50, 60, 80, 100]
}

// ドラッグ調整設定
window.TEGAKI_CONFIG.dragAdjustment = {
  size: { sensitivity: 0.1, min: 0.1, max: 100 },
  opacity: { sensitivity: 0.005, min: 0.0, max: 1.0 },
  visual: { textColor: '#ffffff', fontSize: 12, showValues: true, animationDuration: 150 }
}
```

### EventBus (system/event-bus.js)
```javascript
class EventBus {
  on(eventName, callback)      // イベント購読
  emit(eventName, data)         // イベント発火
  off(eventName, callback)      // イベント購読解除
}

// グローバルインスタンス
window.TegakiEventBus
window.EventBus (未確認、要チェック)
```

### BrushSettings (system/drawing/brush-settings.js)
```javascript
class BrushSettings {
  // プロパティ
  size: number
  color: number
  opacity: number
  
  // メソッド
  setBrushSize(size)
  setBrushColor(color)
  setBrushOpacity(opacity)
  getBrushSize()
  getBrushColor()
  getBrushOpacity()
  getCurrentSettings()
}

// グローバル登録
window.TegakiDrawing.BrushSettings
window.BrushSettings
globalThis.BrushSettings
```

### DrawingEngine (system/tool-size-manager.js の実体)
```javascript
class DrawingEngine {
  constructor(cameraSystem, layerManager, eventBus, config)
  
  // BrushSettings 統合
  settings: BrushSettings
  
  // イベント購読
  subscribeToSettings() {
    // 'tool:size:changed' 購読
    // 'tool:size-opacity-changed' 購読
  }
  
  // 描画制御
  setTool(tool)               // 'pen' | 'eraser'
  setBrushSize(size)          // settings.setBrushSize() を呼ぶ
  setBrushColor(color)
  setBrushOpacity(opacity)
  getCurrentTool()
  getIsDrawing()
}

// グローバル登録
window.TegakiDrawing.DrawingEngine
```

### UIController (ui/ui-panels.js)
```javascript
class UIController {
  constructor(drawingEngine, layerManager, app)
  
  // プロパティ
  toolbarIconClickMode: boolean  // アイコン直クリック判定用
  
  // ポップアップ制御
  showPopup(popup)
  closeAllPopups(exceptPopup)
  closeToolSizePopup()          // window.ToolSizePopup.hide() を呼ぶ
  showToolSizePopup(tool)       // window.ToolSizePopup.show(tool) を呼ぶ
  
  // ツール切り替え
  handleToolClick(button)
  updateToolUI(tool)
}

// グローバル登録
window.TegakiUI.UIController
window.TegakiUI.uiController  // シングルトンインスタンス
```

---

## 🔄 現在のフロー (ショートカット P/E)

```
1. KeyboardHandler が 'KeyP' を検出
2. EventBus.emit('ui:tool-changed', { tool: 'pen' })
3. CoreRuntime が受信、drawingEngine.setTool('pen')
4. DrawingEngine.setTool('pen')
   - this.currentTool = 'pen'
   - EventBus.emit('toolChanged', { tool: 'pen' })
5. UIController.updateToolUI('pen')
   - ボタンのアクティブ状態更新
```

**特徴:**
- ToolSizePopup は表示されない (toolbarIconClickMode = false)
- サイズ/不透明度の変更なし

---

## 🖱️ アイコンクリック時のフロー (実装計画)

```
1. ユーザーがペンアイコンをクリック
2. UIController.setupEventDelegation() が click イベントをキャッチ
3. toolbarIconClickMode = true に設定
4. UIController.handleToolClick(button)
   ├─ 'pen-tool' の場合
   │  ├─ CoreRuntime.api.setTool('pen')
   │  ├─ if (toolbarIconClickMode)
   │  │   └─ showToolSizePopup('pen')  // 🆕 ここでポップアップ表示
   │  └─ updateToolUI('pen')
   └─ toolbarIconClickMode = false にリセット
```

---

## 📦 実装すべきもの

### 1. **ToolSizeManager クラス**
**責務:** ツールごとのサイズ/不透明度状態管理、アクティブスロット管理

```javascript
class ToolSizeManager {
  constructor(eventBus, config)
  
  // 状態管理
  state = {
    pen: { size: 10, opacity: 0.85, activeSlot: 0 },
    eraser: { size: 20, opacity: 1.0, activeSlot: 0 }
  }
  
  // メソッド
  getSize(tool)
  getOpacity(tool)
  setSize(tool, size)
  setOpacity(tool, opacity)
  setSizeOpacity(tool, size, opacity)  // EventBus 発火含む
  
  getActiveSlot(tool)
  setActiveSlot(tool, slotIndex)
  applySizeFromSlot(tool, slotIndex)
  
  // スロット値取得
  getSlotValue(tool, slotIndex)  // config から取得
}

// グローバル登録
window.ToolSizeManager
```

**EventBus 発火:**
- `tool:size-opacity-changed` - { tool, size, opacity }

### 2. **ToolSizePopup クラス**
**責務:** ポップアップUI構築、スロット/スライダー操作、ToolSizeManager との連携

```javascript
class ToolSizePopup {
  constructor(config, toolSizeManager)
  
  // プロパティ
  element: HTMLElement       // ポップアップDOM
  currentTool: 'pen' | 'eraser'
  visible: boolean
  
  // ライフサイクル
  show(tool)
  hide()
  isVisible()
  
  // UI構築
  _createPopupElement()
  _createSlotsContainer()
  _createSlider()
  _updateSlotUI()
  
  // イベントハンドラ
  _onSlotClick(slotIndex)
  _onSliderChange(value)
  _onStepButtonClick(direction)  // ◀▶ボタン
}

// グローバル登録
window.ToolSizePopup
```

**DOM構造:**
```html
<div class="tool-size-popup-panel">
  <div class="slots-container">
    <div class="slot-item [active]">
      <div class="slot-dot"></div>
      <div class="slot-number">1</div>
    </div>
    <!-- x6 -->
  </div>
  <div class="size-slider-container">
    <button class="slider-step-btn">◀</button>
    <div class="slider-wrapper">
      <input type="range" class="size-slider" />
      <input type="number" class="size-value-input" />
    </div>
    <button class="slider-step-btn">▶</button>
  </div>
</div>
```

---

## 🎨 CSS (styles/main.css)

**既存:** `.tool-size-popup-panel`、`.slots-container`、`.slot-item` など基本スタイルは実装済み

**確認事項:**
- スロットの●サイズ計算式: `Math.min(dotMaxSize, Math.max(dotMinSize, (value / 500) * 20))`
- アクティブ状態のスタイル適用

---

## ⚠️ 改修時の注意点

### 1. **tool-size-manager.js は新規作成**
- 現在のファイルは drawing-engine.js なので、真の ToolSizeManager を新規作成

### 2. **EventBus 統合**
- `window.EventBus` と `window.TegakiEventBus` のどちらが使われているか確認
- 全体で統一された EventBus を使用

### 3. **config.js の拡張**
計画書にある `toolSizePopup` 設定を追加:
```javascript
toolSizePopup: {
  slots: [1, 3, 5, 10, 30, 100],
  sliderMin: 0.1,
  sliderMax: 500,
  dotMinSize: 4,
  dotMaxSize: 20
}
```

### 4. **スロット値の取得先**
- 計画書では `slots: [1, 3, 5, 10, 30, 100]` (6個固定)
- config.js の `sizeSlots` は `[2, 4, 6, 8, 12, 16, 24, 36, 50]` (9個、1-9キー用)
- **どちらを使うか明確化が必要**

### 5. **テーパリングスライダー**
計画書の刻み幅:
- 1～3: 0.1刻み
- 3～10: 0.5刻み
- 10～30: 1刻み
- 30～200: 10刻み
- 200～500: 50刻み

→ ◀▶ボタンで実装

---

## ✅ 改修チェックリスト

- [ ] **ToolSizeManager クラス新規作成** (system/tool-size-manager.js)
- [ ] **ToolSizePopup クラス新規作成** (ui/tool-size-popup.js)
- [ ] **config.js 拡張** (`toolSizePopup` 設定追加)
- [ ] **UIController.showToolSizePopup() の動作確認**
- [ ] **EventBus イベントフロー確認** (`tool:size-opacity-changed`)
- [ ] **CSS スタイル確認** (スロット●サイズ、アクティブ状態)
- [ ] **index.html スクリプト読み込み順序** (tool-size-manager.js → tool-size-popup.js)

---

## 🚀 実装優先順位

1. **Phase 1:** ToolSizeManager クラス実装
2. **Phase 2:** ToolSizePopup クラス実装 (基本UI)
3. **Phase 3:** スロット/スライダー機能実装
4. **Phase 4:** テーパリング刻み幅実装 (◀▶ボタン)
5. **Phase 5:** 統合テスト (ペン⇔消しゴム切り替え、アクティブスロット復帰)