

FIX or Rollback?

#debug

npm run dev


ブラウザお絵描きツールをコーディング初心者が無料AI達にコーディングを全委任して、どれだけ作れるかの実験プロジェクトです


Adobe FrescoのようなUI
色合いとしてはふたばちゃんねる文化の要素を使ったもの、これは別のお絵かきツールだが、参考にすべきものの画面
https://github.com/toshinka/tegaki/blob/main/Utility/%E3%81%AF%E3%81%A3%E3%81%A1%E3%82%83%E3%82%93%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%90%E3%82%B9.png
アニメモードの参考としてはstoryboarder
https://wonderunit.com/storyboarder/


#800000;"暗赤"(メインカラー）
#aa5a56;"赤茶"
#cf9c97;"中間色"
#e9c2ba;"薄茶"
#f0e0d6;" 薄ベージュ"（サブカラー）
#ffffee;background-color
最初のパレットは上5色で。background-colorは特に選べなくて良い。
キャンバスの背景は#f0e0d6で



「Adobe FrescoライクなUIのデザイン」

「アニメーションモードはStoryboarder的な構造を予定」
https://wonderunit.com/storyboarder/

「非React／非Vueベースで、自前でUIマネージャーを持つ」

「WebGL2優先だがWebGPU視野、将来的には切替可」

「ESM構成、Tree Shaking・Code Splitting想定」



初期キャンバスサイズは768ｘ768でHD画質に準じたスクエア。
Phase１的にはこのように実装して、Phase２でレイヤー実装。popoverを使い初期位置右端中央から数を増やすと上下に広がるタイプ。邪魔な時は消したり移動も可能。
取り敢えずこんな形で考えたがどうだろうか？


✅ Retina対応をあえて切る理由（Win＋Chrome編）
「Retina対応（高DPI対応）はモバイルやMacでは必須ですが、Windows + 最新Chrome環境では次の理由からあえて無効化（DPR=1固定）する方が合理的です：

🎯 Windowsは拡大率（スケーリング）とDPIが分離されており、DPRが安定しない
→ 液タブやマルチモニタでdevicePixelRatioが動的に変わり、描画ズレの原因に。

🧩 WebGL描画は物理ピクセル基準（1px=1dot）での精度と一致性が重要
→ DPR補正すると描画や座標処理が複雑化・破綻するリスクが高い。

⚙ UIと描画エリアの解像度を混同すると、表示はキレイでも操作が狂う
→ Retina対応は視覚品質より操作整合性のほうが重要な場面では逆効果。

したがって、高精細描画を求めるなら論理解像度を上げる設計にするべきで、Retina対応とは分けて考えるべきです。


憲章に沿ってPhase1を満たすhtmlファイルを作成してください
・デザインはイラスト.pngのようなサイドバーとPENとResizeアイコン、キャンバス、下段のモニターのシンプルなものとしてください。
・アイコンはphosphorからアイコン画像をpenとresizeから取得してください。無理なら代替のアイコンでも良いです。
・補正、傾き感度、FPSのリアルタイムモニター表示もさせてください。
・キャンバスは画面中心を基準としてください。また、スペース+ドラッグで移動を可能としてください。最初は344*135サイズです。
・ペンアイコンを押すと、ペンサイズや透明度等を変更できる、数字入力ボックスとスライダーが出てきます。
・リサイズアイコンを押すと、縦横の大きさ変更が可能な数値入力欄とスライダーが出現します。またアイコンを押した時は、キャンバスのドラッグでもサイズ変更が可能になります。
・キャンバスの外から線を引いてもリニアにキャンバスに描けるようにします。キャンバスの外から勢いを付けて描く人も多いので、それに対応させます。
・ちゃんとライブラリからや最新APIからシンプルに引用される作りとしてください。憲章の通りです。
・コードが冗長とならないように、ファイルがコンパクトになるよう心がけてください。





規約と憲章を破らぬように注意すること、冗長化しないように注意しスッキリ軽量で分かりやすいファイルづくりを心がけてください。












