===============================================
Tegaki ポップアップシステム統一改修計画書 v2.0
検証結果反映版
===============================================

【改修目標】
1. quick-access-popup.jsのスライダー動作不良を解決
2. 全ポップアップの実装パターン統一
3. スライダーUIの色配置統一（茶系futaba色）
4. PopupManager統合の完全化

【検証結果サマリ】
- resize-slider.jsの実装パターンが正しい ✅
- settings-popup.jsのパターンは参考にしない ❌
- resize-popup.js修正完了（動作確認済み）✅

【対象外】
- timeline-ui.js（特殊設計のため独立）


===============================================
【正しい実装パターン（resize-slider.js準拠）】
===============================================

## スライダー実装の必須要素

### 1. クラス変数
```javascript
this.isDraggingWidth = false;  // ドラッグ状態フラグ
this.isDraggingHeight = false;
this.currentWidth = 0;
this.currentHeight = 0;
this.elements = {};  // DOM要素キャッシュ
this.mouseMoveHandler = null;  // グローバルリスナー参照
this.mouseUpHandler = null;
```

### 2. イベントリスナー登録パターン
```javascript
// ハンドルにmousedown
this.elements.widthHandle.addEventListener('mousedown', (e) => {
    this.isDraggingWidth = true;
    e.preventDefault();
});

// グローバルにmousemove/mouseup
this.mouseMoveHandler = (e) => {
    if (this.isDraggingWidth) {
        // スライダー更新処理
    }
};
document.addEventListener('mousemove', this.mouseMoveHandler);
document.addEventListener('mouseup', this.mouseUpHandler);

// スライダー領域クリック
this.elements.widthSlider.addEventListener('click', (e) => {
    if (e.target === this.elements.widthHandle) return;
    // クリック位置からの値算出・更新
});
```

### 3. 更新メソッド
```javascript
_updateWidthSlider(value) {
    this.currentWidth = Math.max(MIN, Math.min(MAX, value));
    const percent = ((this.currentWidth - MIN) / (MAX - MIN)) * 100;
    this.elements.widthTrack.style.width = percent + '%';
    this.elements.widthHandle.style.left = percent + '%';
    this.elements.widthDisplay.textContent = this.currentWidth + 'px';
}
```

### 4. destroy()での後始末
```javascript
destroy() {
    if (this.mouseMoveHandler) {
        document.removeEventListener('mousemove', this.mouseMoveHandler);
    }
    if (this.mouseUpHandler) {
        document.removeEventListener('mouseup', this.mouseUpHandler);
    }
    this.mouseMoveHandler = null;
    this.mouseUpHandler = null;
}
```

### 5. 必須CSSクラス
```css
.resize-slider {
    position: relative;  /* 必須 */
    cursor: pointer;
}
.resize-slider-handle {
    position: absolute;  /* 必須 */
    top: 50%;
    left: 0%;
    transform: translate(-50%, -50%);  /* 必須 */
    cursor: grab;
}
```


===============================================
【Phase 1: quick-access-popup.js 修正】
===============================================

優先度: 最高
作業時間: 1時間

## 対象ファイル
- ui/quick-access-popup.js（修正対象）
- ui/resize-popup.js（参考実装）✅動作確認済み

## 処理フロー位置
左サイドバー「ペンアイコン」クリック → ポップアップ表示
- ペンサイズスライダー
- ペン透明度スライダー

## 改修内容

### 1-1. クラス変数追加
```javascript
constructor(dependencies) {
    // 既存変数
    this.isDraggingSize = false;      // 追加
    this.isDraggingOpacity = false;   // 追加
    this.elements = {};               // 追加
    this.mouseMoveHandler = null;     // 追加
    this.mouseUpHandler = null;       // 追加
}
```

### 1-2. _cacheElements()メソッド追加
```javascript
_cacheElements() {
    this.elements = {
        sizeSlider: document.getElementById('pen-size-slider-container'),
        sizeTrack: document.getElementById('pen-size-track'),
        sizeHandle: document.getElementById('pen-size-handle'),
        sizeDisplay: document.getElementById('pen-size-display'),
        
        opacitySlider: document.getElementById('pen-opacity-slider-container'),
        opacityTrack: document.getElementById('pen-opacity-track'),
        opacityHandle: document.getElementById('pen-opacity-handle'),
        opacityDisplay: document.getElementById('pen-opacity-display')
    };
}
```

### 1-3. _setupSliders()メソッド書き換え
resize-popup.js の _setupSliders() を参考に完全書き換え
- ハンドルmousedown
- グローバルmousemove/mouseup
- スライダークリック
を実装

### 1-4. _updateSizeSlider() / _updateOpacitySlider()メソッド追加
resize-popup.js の _updateWidthSlider() パターンを適用

### 1-5. destroy()メソッド修正
```javascript
destroy() {
    if (this.mouseMoveHandler) {
        document.removeEventListener('mousemove', this.mouseMoveHandler);
    }
    if (this.mouseUpHandler) {
        document.removeEventListener('mouseup', this.mouseUpHandler);
    }
    this.mouseMoveHandler = null;
    this.mouseUpHandler = null;
    this.elements = {};
    this.initialized = false;
}
```

## 検証ポイント
- ペンサイズスライダーの●が滑らかに動くか
- ペン透明度スライダーの●が滑らかに動くか
- ステップボタン（+/-）が機能するか
- 実際にペンサイズ・透明度が変更されるか


===============================================
【Phase 2: settings-popup.js 検証・修正】
===============================================

優先度: 中
作業時間: 30分

## 対象ファイル
- ui/settings-popup.js（検証・修正対象）
- ui/resize-popup.js（参考実装）

## 処理フロー位置
左サイドバー「⚙️アイコン」クリック → 設定ポップアップ表示
- ステータスパネル表示切替トグル

## 改修内容

### 2-1. スライダーの動作確認
現状でスライダーが存在しないため、動作確認のみ
- トグルボタンが正常に動作するか確認

### 2-2. 将来的にスライダー追加時の準備
もしスライダーを追加する場合は、resize-popup.jsパターンを使用すること

## 検証ポイント
- ステータスパネルトグルが機能するか
- PopupManager統合が正しく動作しているか


===============================================
【Phase 3: CSS統一】
===============================================

優先度: 中
作業時間: 30分

## 対象ファイル
- styles/main.css（修正対象）

## 改修内容

### 3-1. ペン設定用スライダーCSS修正
```css
/* ペン設定ポップアップ用スライダー */
#pen-size-slider-container,
#pen-opacity-slider-container {
    flex: 1;
    height: 6px;
    background: var(--futaba-light-medium);
    border-radius: 3px;
    position: relative;  /* 必須 */
    cursor: pointer;
}

#pen-size-track,
#pen-opacity-track {
    height: 100%;
    background: var(--futaba-maroon);
    border-radius: 3px;
    transition: width 0.1s;
}

#pen-size-handle,
#pen-opacity-handle {
    width: 16px;
    height: 16px;
    background: var(--futaba-maroon);
    border: 2px solid var(--futaba-background);
    border-radius: 50%;
    position: absolute;  /* 必須 */
    top: 50%;
    left: 0%;
    transform: translate(-50%, -50%);  /* 必須 */
    cursor: grab;
    transition: left 0.1s;
}

#pen-size-handle:active,
#pen-opacity-handle:active {
    cursor: grabbing;
}
```

### 3-2. 色配置確認
全スライダーが `var(--futaba-maroon)` で統一されているか確認

## 検証ポイント
- 全スライダーの色が茶系統一されているか
- position: relative/absolute が正しく設定されているか


===============================================
【Phase 4: 全体検証】
===============================================

優先度: 低
作業時間: 30分

## 検証項目

### 4-1. スライダー動作確認
- [ ] リサイズポップアップのスライダー動作
- [ ] ペン設定ポップアップのスライダー動作
- [ ] ステップボタンの動作
- [ ] プリセットボタンの動作

### 4-2. PopupManager統合確認
- [ ] resize-popup.js が PopupManager 経由で動作するか
- [ ] quick-access-popup.js が PopupManager 経由で動作するか
- [ ] settings-popup.js が PopupManager 経由で動作するか

### 4-3. EventBus統合確認
- [ ] ポップアップ開閉時にイベントが発火しているか
- [ ] スライダー変更時に適切なイベントが発火しているか

### 4-4. メモリリーク確認
- [ ] destroy() が正しく呼ばれているか
- [ ] イベントリスナーが適切に削除されているか


===============================================
【実装チェックリスト】
===============================================

## 必須メソッド（全ポップアップ共通）
- [ ] show()
- [ ] hide()
- [ ] toggle()
- [ ] isReady()
- [ ] destroy()

## スライダー実装チェック
- [ ] isDragging フラグ管理
- [ ] ハンドルに mousedown イベント
- [ ] グローバルに mousemove/mouseup イベント
- [ ] destroy() でイベントリスナー削除
- [ ] CSS: position: relative (コンテナ)
- [ ] CSS: position: absolute (ハンドル)
- [ ] CSS: transform: translate(-50%, -50%) (ハンドル)

## 色配置チェック
- [ ] スライダートラック: var(--futaba-maroon)
- [ ] スライダーハンドル: var(--futaba-maroon)
- [ ] 背景: var(--futaba-light-medium)


===============================================
【参考ファイル一覧】
===============================================

## 正常動作する実装（参考にする）
- ui/resize-popup.js ✅
- ui/resize-slider.js（IIFE版、動作確認済み）

## 修正対象
- ui/quick-access-popup.js（Phase 1）
- ui/settings-popup.js（Phase 2、検証のみ）
- styles/main.css（Phase 3）

## 関連システムファイル
- system/popup-manager.js（ポップアップ管理）
- system/event-bus.js（イベント通知）
- system/settings-manager.js（設定保存）


===============================================
【改修完了条件】
===============================================

1. quick-access-popup.jsのスライダーが滑らかに動く
2. ステップボタンで値が正しく変更される
3. 実際にペンサイズ・透明度が反映される
4. 全ポップアップが同じイベントハンドリングパターン
5. CSS色配置がfutaba系で統一
6. メモリリークが発生しない（destroy()完備）


===============================================
【今後の拡張方針】
===============================================

## slider-utils.jsの作成（将来）
スライダー実装を完全に共通化する場合：
```javascript
window.TegakiUI.SliderUtils = {
    createSlider(options) {
        // 共通スライダー生成ロジック
    }
};
```

現時点では各ポップアップ内に実装を保持し、
パターンが完全に安定してから共通化を検討


===============================================
END OF DOCUMENT
===============================================