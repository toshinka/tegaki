1. 改修概要
1.1 改修目的

車輪の再発明解消: 独自実装からPixiJSエコシステムライブラリへの移行
コード削減: 1000行以上のコード削減見込み
AI実装しやすさ向上: PixiJS標準APIによる予測しやすい実装
保守性向上: バグ修正・機能追加の効率化

1.2 対象機能

ポップアップ機能 - @pixi/ui導入
レイヤー機能 - @pixi/layers導入
非破壊的レイヤー移動/変形 - RenderTexture + @pixi/layers
GIFアニメ - @pixi/gif導入
スムーズ描画 - @pixi/graphics-smooth導入
追加形状描画 - @pixi/graphics-extras導入

2. 責任分界
2.1 Rulebook担当範囲（恒久的指針）

ライブラリ統合の運用方針 - 長期的な指針・規約
ファイル構造・依存関係 - システム全体の構造定義
コードスタイル・命名規則 - 開発標準の策定
品質保証・テスト方針 - 継続的品質管理基準

2.2 改修計画書担当範囲（実装ガイド）

具体的改修手順 - ステップバイステップの作業指示
ファイル別改修詳細 - 各ファイルの具体的変更内容
AIバイブコーディング支援 - 実装時の参考ファイル・パターン明記
実装テスト手順 - 各段階での検証・確認方法

3. ライブラリ導入計画
3.1 Phase1: 基盤ライブラリ導入
3.1.1 npmインストール
bash# PixiJS v7対応版
npm install @pixi/ui@^1.0.0 @pixi/layers@^2.0.0 @pixi/gif@^2.0.0
npm install @pixi/graphics-extras@^7.4.0 @pixi/graphics-smooth@^0.0.31
3.1.2 インポート設定
新規ファイル: libs/pixi-extensions.js
javascript// PixiJS拡張ライブラリ統合インポート
import { Button, FancyButton, Slider } from '@pixi/ui';
import { Layer } from '@pixi/layers';
import { AnimatedGIF } from '@pixi/gif';
import { SmoothGraphics } from '@pixi/graphics-smooth';
import '@pixi/graphics-extras';

// グローバル登録（fetch API分割対応）
window.PixiExtensions = {
    Button, FancyButton, Slider,
    Layer, AnimatedGIF, SmoothGraphics
};
3.2 Phase2: 段階的機能移行
3.2.1 優先度高: ポップアップ機能移行
対象ファイル:

drawing-tools/ui/components/popup-manager.js → 削除予定
drawing-tools/ui/pen-tool-ui.js → @pixi/ui使用に改修

改修内容:
javascript// 従来の独自実装
class PopupManager {
    createPopup() {
        const popup = new PIXI.Container();
        // 100行以上の独自実装...
    }
}

// @pixi/ui使用後
import { Button } from '@pixi/ui';
class PenToolUI {
    createPopup() {
        const popup = new Container();
        const button = new Button({ text: 'OK' });
        popup.addChild(button);
        return popup; // 5行で完成
    }
}
3.2.2 優先度中: スムーズ描画機能移行
対象ファイル:

drawing-tools/tools/pen-tool.js → @pixi/graphics-smooth使用に改修

改修内容:
javascript// 従来の独自実装 (applySmoothingFilter)
applySmoothingFilter(x, y) {
    // 50行以上の独自スムージング実装...
}

// @pixi/graphics-smooth使用後
import { SmoothGraphics } from '@pixi/graphics-smooth';
// スムージングは自動処理、実装不要
4. ファイル別改修詳細
4.1 新規作成: libs/pixi-extensions.js
目的: PixiJS拡張ライブラリ統合基盤
参考ファイル: なし（新規作成）
実装内容:
javascript/**
 * PixiJS拡張ライブラリ統合システム
 * 責務: ライブラリ読み込み・初期化・グローバル登録
 */

console.log('🔌 PixiJS拡張ライブラリ読み込み開始...');

// ライブラリ統合オブジェクト
window.PixiExtensions = {
    // @pixi/ui
    Button: null,
    FancyButton: null,
    Slider: null,
    
    // @pixi/layers
    Layer: null,
    
    // @pixi/gif
    AnimatedGIF: null,
    
    // @pixi/graphics-smooth
    SmoothGraphics: null,
    
    // 読み込み状況管理
    loaded: {
        ui: false,
        layers: false,
        gif: false,
        graphicsSmooth: false,
        graphicsExtras: false
    },
    
    // 初期化状況
    initialized: false
};

// 段階的ライブラリ読み込み関数
window.initializePixiExtensions = async function() {
    const config = window.CONFIG?.LIBRARY_FLAGS || {};
    
    try {
        // Phase1: @pixi/ui読み込み
        if (config.ENABLE_PIXI_UI) {
            // 実際の実装では動的import使用
            // const { Button, Slider } = await import('@pixi/ui');
            // window.PixiExtensions.Button = Button;
            // window.PixiExtensions.Slider = Slider;
            window.PixiExtensions.loaded.ui = true;
        }
        
        // Phase2: その他ライブラリ読み込み...
        
        window.PixiExtensions.initialized = true;
        console.log('✅ PixiJS拡張ライブラリ初期化完了');
        
    } catch (error) {
        console.error('❌ PixiJS拡張ライブラリ読み込みエラー:', error);
    }
};
4.2 config.js改修
目的: ライブラリ設定統合
参考ファイル: v1rev12_Phase2/config.js
追加内容:
javascript// 既存CONFIG オブジェクトに追加
LIBRARY_CONFIG: {
    // @pixi/ui設定
    UI_THEME: 'futaba',
    UI_BUTTON_STYLE: {
        backgroundColor: 0x800000,
        hoverColor: 0xaa5a56,
        textColor: 0xFFFFFF
    },
    
    // @pixi/layers設定
    LAYER_MAX_COUNT: 10,
    LAYER_BLEND_MODES: ['normal', 'multiply', 'screen'],
    
    // @pixi/gif設定
    GIF_MAX_FRAMES: 60,
    GIF_DEFAULT_DELAY: 100,
    GIF_MAX_SIZE: { width: 800, height: 600 },
    
    // graphics系設定
    SMOOTH_GRAPHICS_ENABLED: true,
    GRAPHICS_EXTRAS_ENABLED: true,
    ANTI_ALIAS_QUALITY: 'high'
},

// ライブラリ有効化フラグ
LIBRARY_FLAGS: {
    ENABLE_PIXI_UI: true,
    ENABLE_PIXI_LAYERS: true,
    ENABLE_PIXI_GIF: false,    // Phase5で有効化予定
    ENABLE_SMOOTH_GRAPHICS: true,
    ENABLE_GRAPHICS_EXTRAS: true
}
4.3 drawing-tools/ui/pen-tool-ui.js改修
目的: @pixi/ui統合によるポップアップ機能改善
参考ファイル: v1rev12_Phase2/drawing-tools/ui/pen-tool-ui.js
改修前（独自実装）:
javascript// popup-manager.js の独自実装を使用（200行相当）
createPopup() {
    const popup = new PIXI.Container();
    // 大量の独自ポップアップ実装...
}
改修後（@pixi/ui使用）:
javascript// @pixi/ui使用による簡素化
createPopup() {
    const popup = new PIXI.Container();
    
    if (window.PixiExtensions?.Button) {
        const okButton = new window.PixiExtensions.Button({
            text: 'OK',
            style: window.CONFIG.LIBRARY_CONFIG.UI_BUTTON_STYLE
        });
        popup.addChild(okButton);
    } else {
        // フォールバック: 基本実装
        const okButton = new PIXI.Graphics();
        // 最小限の実装...
    }
    
    return popup;
}
4.4 drawing-tools/tools/pen-tool.js改修
目的: @pixi/graphics-smooth統合
参考ファイル: v1rev12_Phase2/drawing-tools/tools/pen-tool.js
改修対象メソッド: applySmoothingFilter（50行削除予定）
改修前:
javascriptapplySmoothingFilter(x, y) {
    const smoothing = this.app.state.smoothing || 0;
    
    if (smoothing === 0 || this.smoothingBuffer.length === 0) {
        this.smoothingBuffer.push({ x, y });
        return { x, y };
    }
    
    this.smoothingBuffer.push({ x, y });
    if (this.smoothingBuffer.length > this.maxBufferSize) {
        this.smoothingBuffer.shift();
    }
    
    const bufferLength = this.smoothingBuffer.length;
    const avgX = this.smoothingBuffer.reduce((sum, p) => sum + p.x, 0) / bufferLength;
    const avgY = this.smoothingBuffer.reduce((sum, p) => sum + p.y, 0) / bufferLength;
    
    const smoothedX = x + (avgX - x) * smoothing;
    const smoothedY = y + (avgY - y) * smoothing;
    
    return { x: smoothedX, y: smoothedY };
}
改修後:
javascriptonPointerDown(x, y, event) {
    this.captureStartState();
    
    // @pixi/graphics-smooth使用
    if (window.PixiExtensions?.SmoothGraphics) {
        this.currentPath = new window.PixiExtensions.SmoothGraphics();
        this.currentPath.lineStyle({
            width: this.app.state.brushSize,
            color: this.app.state.brushColor,
            scaleMode: 'none' // 固定幅スムーズ線
        });
    } else {
        // フォールバック: 従来のGraphics
        this.currentPath = this.app.createPath(x, y, 'pen');
    }
    
    this.currentPath.moveTo(x, y);
    this.lastPoint = { x, y };
}

// applySmoothingFilterメソッド削除
// onPointerMoveでのスムージング処理も簡素化
4.5 新規作成: layer-manager.js
目的: @pixi/layers使用のレイヤー管理システム
参考ファイル: なし（新規作成）
実装場所: v1rev12_Phase2/layer-manager.js
実装内容:
javascript/**
 * レイヤー管理システム
 * @pixi/layers使用によるレイヤー機能実装
 */
class LayerManager {
    constructor(app) {
        this.app = app;
        this.layers = new Map();
        this.activeLayer = null;
        this.maxLayers = window.CONFIG?.LIBRARY_CONFIG?.LAYER_MAX_COUNT || 10;
        
        this.initializeLayerSystem();
    }
    
    initializeLayerSystem() {
        if (!window.PixiExtensions?.Layer) {
            console.warn('@pixi/layers not available, using fallback');
            return;
        }
        
        // デフォルトレイヤー作成
        this.addLayer('background', 0);
        this.addLayer('drawing', 1);
        this.setActiveLayer('drawing');
    }
    
    addLayer(name, zOrder = null) {
        if (this.layers.size >= this.maxLayers) {
            console.warn(`最大レイヤー数 ${this.maxLayers} に達しています`);
            return null;
        }
        
        let layer;
        if (window.PixiExtensions?.Layer) {
            layer = new window.PixiExtensions.Layer();
            layer.zOrder = zOrder ?? this.layers.size;
        } else {
            // フォールバック: 通常のContainer
            layer = new PIXI.Container();
        }
        
        this.layers.set(name, layer);
        this.app.stage.addChild(layer);
        
        console.log(`レイヤー追加: ${name} (zOrder: ${layer.zOrder || 'N/A'})`);
        return layer;
    }
    
    // 非破壊的レイヤー移動
    moveLayer(layerName, newZOrder) {
        const layer = this.layers.get(layerName);
        if (!layer) return false;
        
        if (window.PixiExtensions?.Layer) {
            layer.zOrder = newZOrder; // @pixi/layersの機能
        } else {
            // フォールバック: 手動zIndex管理
            this.app.stage.setChildIndex(layer, newZOrder);
        }
        
        return true;
    }
    
    setActiveLayer(layerName) {
        const layer = this.layers.get(layerName);
        if (layer) {
            this.activeLayer = layer;
            return true;
        }
        return false;
    }
    
    getActiveLayer() {
        return this.activeLayer;
    }
    
    // 履歴管理との連携
    captureLayerState() {
        if (window.InternalStateCapture) {
            return window.InternalStateCapture.captureLayerState(this);
        }
        return null;
    }
}

// グローバル登録
if (typeof window !== 'undefined') {
    window.LayerManager = LayerManager;
}
4.6 drawing-tools.js改修
目的: ライブラリ統合システム構築
参考ファイル: v1rev12_Phase2/drawing-tools.js
追加内容:
javascript// 既存DrawingToolsSystemEmergencyFixクラスに追加

// ライブラリ統合初期化
async initializeWithLibraries() {
    console.log('🔌 ライブラリ統合初期化開始...');
    
    // PixiJS拡張ライブラリ初期化待機
    if (window.initializePixiExtensions) {
        await window.initializePixiExtensions();
    }
    
    // レイヤーマネージャー初期化
    if (window.LayerManager) {
        this.layerManager = new window.LayerManager(this.app);
        console.log('✅ レイヤーマネージャー初期化完了');
    }
    
    // 既存初期化処理実行
    await this.init();
    
    console.log('✅ ライブラリ統合初期化完了');
}

// ライブラリ対応ブラシ設定更新
updateBrushSettingsWithLibraries(settings) {
    // 既存処理
    this.updateBrushSettings(settings);
    
    // ライブラリ連携更新
    if (window.PixiExtensions?.loaded.ui && this.penToolUI) {
        this.penToolUI.updateLibraryComponents(settings);
    }
}
5. 改修手順（段階的実装）
5.1 Step 1: 環境準備・基盤構築
所要時間: 1日
担当ファイル: 新規作成・設定
5.1.1 npmライブラリインストール
bashcd v1rev12_Phase2
npm init -y  # package.json作成（未作成の場合）
npm install @pixi/ui@^1.0.0 @pixi/layers@^2.0.0 @pixi/gif@^2.0.0
npm install @pixi/graphics-extras@^7.4.0 @pixi/graphics-smooth@^0.0.31
5.1.2 libs/pixi-extensions.js作成
作業内容:

上記4.1の実装内容に従って新規作成
ライブラリ統合オブジェクトの実装
段階的読み込み関数の実装
エラーハンドリング・フォールバック機能

参考コード: セクション4.1の完全実装
5.1.3 config.js改修
作業内容:

LIBRARY_CONFIG追加
LIBRARY_FLAGS追加
既存CONFIG構造への統合

参考ファイル: v1rev12_Phase2/config.js
改修箇所: セクション4.2の追加内容
5.1.4 index.html更新
html<!-- ライブラリ読み込み追加（config.js後、utils.js前） -->
<script src="libs/pixi-extensions.js"></script>
検証手順:
javascript// ブラウザコンソールで確認
console.log(window.PixiExtensions); // オブジェクト存在確認
console.log(window.CONFIG.LIBRARY_FLAGS); // 設定確認
5.2 Step 2: ポップアップ機能移行
所要時間: 2日
優先度: 高（既存問題解決）
5.2.1 pen-tool-ui.js改修
参考ファイル: v1rev12_Phase2/drawing-tools/ui/pen-tool-ui.js
改修内容: セクション4.3の実装パターン
作業手順:

既存のポップアップ作成メソッド特定
@pixi/ui使用パターンに改修
フォールバック実装追加
既存機能の動作確認

改修前確認:

popup-manager.jsの使用箇所特定
ポップアップ関連メソッドのリスト作成

改修後テスト:
javascript// ペンツールポップアップテスト
window.testPenPopup = function() {
    if (window.penToolUI?.showPopup) {
        return window.penToolUI.showPopup('pen-settings');
    }
    return false;
};
5.2.2 popup-manager.js削除準備
作業内容:

popup-manager.js使用箇所の完全移行確認
依存関係の解決確認
バックアップ作成後の安全な削除

5.3 Step 3: 描画機能強化
所要時間: 2日
優先度: 中（品質向上）
5.3.1 pen-tool.js改修
参考ファイル: v1rev12_Phase2/drawing-tools/tools/pen-tool.js
改修内容: セクション4.4の実装パターン
改修手順:

applySmoothingFilterメソッド削除
onPointerDownでの SmoothGraphics使用
onPointerMoveの処理簡素化
フォールバック機能の実装

改修後テスト:
javascript// スムージング機能テスト
window.testSmoothDrawing = function() {
    const toolsSystem = window.toolsSystem;
    if (toolsSystem) {
        toolsSystem.setTool('pen');
        // 描画テストの実施
        return window.PixiExtensions?.loaded?.graphicsSmooth || false;
    }
    return false;
};
5.3.2 パフォーマンス測定
測定項目:

描画FPS（改修前後比較）
メモリ使用量
CPU使用率
描画品質（目視確認）

5.4 Step 4: レイヤー機能実装
所要時間: 3日
優先度: 中（新機能）
5.4.1 layer-manager.js作成
実装場所: v1rev12_Phase2/layer-manager.js
実装内容: セクション4.5の完全実装
作業手順:

LayerManagerクラス実装
@pixi/layers統合処理
履歴管理システム連携
UI連携準備

5.4.2 drawing-tools.js統合
参考ファイル: v1rev12_Phase2/drawing-tools.js
改修内容: セクション4.6の追加実装
統合手順:

DrawingToolsSystemにLayerManager統合
初期化処理の更新
API追加・既存APIの拡張

5.4.3 UI実装（将来拡張）
準備作業:

レイヤー選択UI の設計
レイヤー操作ボタンの配置計画
@pixi/ui Button使用の準備

5.5 Step 5: 最終統合・テスト
所要時間: 2日
優先度: 高（品質保証）
5.5.1 統合テスト
テスト内容:
javascript// 統合機能テスト関数
window.testFullIntegration = function() {
    console.group('🧪 ライブラリ統合テスト');
    
    // 1. ライブラリ読み込み状況確認
    const libStatus = window.PixiExtensions?.loaded || {};
    console.log('ライブラリ状況:', libStatus);
    
    // 2. 基本機能テスト
    const basicTest = {
        penTool: window.testPenPopup(),
        smoothDrawing: window.testSmoothDrawing(),
        layerSystem: !!window.layerManager
    };
    console.log('基本機能:', basicTest);
    
    // 3. 性能テスト
    window.measureDrawingPerformance();
    
    console.groupEnd();
};
5.5.2 非回帰テスト
確認項目:

既存ペン機能の正常動作
アンドゥ・リドゥ機能
プリセット機能
キーボードショートカット
パフォーマンス劣化チェック

5.5.3 ドキュメント更新
更新対象:

README.md（ライブラリ依存関係）
設定ファイル解説
新機能説明（レイヤー等）

6. AIバイブコーディング支援情報
6.1 参考実装パターン
6.1.1 ライブラリ使用の標準パターン
javascript// ✅ 推奨: 存在確認 + フォールバック
const createUIComponent = function() {
    if (window.PixiExtensions?.Button) {
        return new window.PixiExtensions.Button({
            text: 'OK',
            style: window.CONFIG.LIBRARY_CONFIG.UI_BUTTON_STYLE
        });
    } else {
        // フォールバック実装
        return createFallbackButton();
    }
};

// ❌ 避ける: 直接使用（エラーリスク）
const button = new window.PixiExtensions.Button({ text: 'OK' });
6.1.2 設定値参照パターン
javascript// ✅ 推奨: safeConfigGet使用
const maxLayers = window.safeConfigGet('LIBRARY_CONFIG.LAYER_MAX_COUNT', 10);

// ❌ 避ける: 直接参照
const maxLayers = window.CONFIG.LIBRARY_CONFIG.LAYER_MAX_COUNT;
6.2 エラーパターンと対策
6.2.1 よくあるエラー
javascript// Error: Cannot read property 'Button' of undefined
// 原因: PixiExtensions未初期化

// 対策: 存在確認
if (window.PixiExtensions?.loaded?.ui) {
    // UI機能使用
}
6.2.2 デバッグ支援
javascript// デバッグ関数の活用
window.debugLibraries(); // ライブラリ状況確認
window.testFullIntegration(); // 統合テスト
6.3 実装時の参考ファイル優先順位

config.js - 設定値・フラグ確認
libs/pixi-extensions.js - ライブラリ使用パターン
既存実装ファイル - 改修前の動作理解
Rulebook v7 - 全体方針・禁止事項確認
PixiJS公式ドキュメント - 標準API確認

6. 品質保証・テスト計画
6.1 単体テスト

各ライブラリ機能の動作確認
既存機能の非回帰テスト
パフォーマンステスト

6.2 統合テスト

ライブラリ間連携テスト
UI操作フローテスト
エラーハンドリングテスト

6.3 AIコード生成テスト

各ライブラリのAI生成しやすさ検証
ドキュメント参照によるコード品質確認

7. 期待効果・メリット
7.1 コード削減効果

popup-manager.js: 200行 → 削除 (100%削減)
pen-tool.js: スムージング50行削減
ui関連: 独自コンポーネント150行削減
合計: 400行以上削減見込み

7.2 開発効率向上

実装時間: 50%短縮見込み
バグ修正: ライブラリ側で自動対応
機能追加: 標準APIで容易

7.3 AI実装支援向上

コード予測性: PixiJS標準パターンで向上
ドキュメント参照: 公式ドキュメント活用可能
エラー解決: StackOverflow等の情報活用可能

8. リスク軽減策
8.1 段階的移行

一度に全機能移行せず段階的実施
各ステップでの動作確認・ロールバック準備
既存機能の互換性維持

8.2 エラー対応

ライブラリ読み込み失敗時のフォールバック実装
段階的機能無効化によるグレースフルデグラデーション
詳細エラーログによる問題特定迅速化

8.3 パフォーマンス監視

ライブラリ導入前後のパフォーマンス比較
メモリ使用量監視
FPS監視による描画性能確認

9. 移行スケジュール案
9.1 Phase1 (1-2日)

環境準備・ライブラリインストール
基盤ファイル作成・テスト

9.2 Phase2 (2-3日)

ポップアップ機能移行
描画スムージング移行

9.3 Phase3 (3-4日)

レイヤー機能実装
追加形状描画実装

9.4 Phase4 (2-3日)

GIF機能実装
統合テスト・最適化

9.5 Phase5 (1-2日)

ドキュメント更新
AI実装テスト・品質確認

合計所要期間: 9-14日
10. 次作業クライアントへの引き継ぎ事項
10.1 作業準備

本計画書とRulebook改修版を参照
段階的移行の徹底（一度に複数機能変更禁止）
各ステップでの動作確認必須

10.2 重要注意事項

既存のfetch API分割構造を維持
グローバル変数形式でのライブラリ使用
エラーハンドリングの強化必須

10.3 テスト項目

ポップアップ表示・操作確認
描画スムージング動作確認
パフォーマンス比較測定
各ブラウザでの互換性確認

11. 成功基準
11.1 機能基準

全既存機能の正常動作維持
新機能（レイヤー・GIF）の正常実装
UIの操作性向上

11.2 品質基準

コード行数400行以上削減
AI生成コード品質向上
エラー発生率削減

11.3 保守性基準

新機能追加の容易さ向上
バグ修正時間短縮
ドキュメント整備完了

この改修により、PixiJSエコシステムの恩恵を最大限活用し、保守性・拡張性・AI実装しやすさを大幅に向上させる効果を期待します。