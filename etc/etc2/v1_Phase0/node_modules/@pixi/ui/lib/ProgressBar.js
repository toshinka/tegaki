'use strict';

var display = require('@pixi/display');
var core = require('@pixi/core');
var sprite = require('@pixi/sprite');
var view = require('./utils/helpers/view.js');
var meshExtras = require('@pixi/mesh-extras');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ProgressBar extends display.Container {
  /**
   * Creates a ProgressBar.
   * @param options - Options.
   * @param { Sprite | Graphics | Texture | string } options.bg - Background of the ProgressBar.
   * @param { Sprite | Graphics | Texture | string } options.fill - Fill of the ProgressBar.
   * @param { FillPaddings } options.fillPaddings - Fill offsets.
   * @param { number } options.fillPaddings.top - Fill top offset.
   * @param { number } options.fillPaddings.right - Fill right offset.
   * @param { number } options.fillPaddings.bottom - Fill bottom offset.
   * @param { number } options.fillPaddings.left - Fill left offset.
   * @param { NineSlicePlane } options.nineSlicePlane - NineSlicePlane values for bg and fill.
   * @param { Array } options.nineSlicePlane.bg - NineSlicePlane config for bg ([number, number, number, number]).
   * @param { Array } options.nineSlicePlane.fill - NineSlicePlane config fill ([number, number, number, number]).
   * @param { number } options.progress - Initial progress value.
   */
  constructor(options) {
    super();
    __publicField(this, "bg");
    __publicField(this, "fill");
    __publicField(this, "fillMask");
    __publicField(this, "progressStart", 0);
    __publicField(this, "_progress", 0);
    __publicField(this, "options");
    /** Container, that holds all inner views. */
    __publicField(this, "innerView");
    /** Container, given as a constructor parameter that is a button view. */
    __publicField(this, "_view");
    this.options = options;
    this.innerView = new display.Container();
    this.addChild(this.innerView);
    if (options?.bg && options?.fill) {
      this.init(options);
    }
  }
  /**
   * Initialize ProgressBar.
   * @param root0
   * @param root0.bg - Background texture.
   * @param root0.fill - Fill texture.
   * @param root0.fillPaddings - Fill offset.
   * @param root0.progress - Initial progress value.
   */
  init({ bg, fill, fillPaddings, progress }) {
    this.setBackground(bg);
    this.setFill(fill, fillPaddings);
    this.progress = progress;
  }
  /**
   * Set bg.
   * @param bg
   */
  setBackground(bg) {
    if (this.bg) {
      this.bg.destroy();
    }
    if (this.options?.nineSlicePlane) {
      if (typeof bg === "string") {
        this.bg = new meshExtras.NineSlicePlane(core.Texture.from(bg), ...this.options.nineSlicePlane.bg);
      } else if (bg instanceof core.Texture) {
        this.bg = new meshExtras.NineSlicePlane(bg, ...this.options.nineSlicePlane.bg);
      } else {
        console.warn("NineSlicePlane can not be used with views set as Container.");
      }
    }
    if (!this.bg) {
      this.bg = view.getView(bg);
    }
    this.innerView.addChildAt(this.bg, 0);
  }
  /**
   * Set fill.
   * @param fill
   * @param fillPadding
   */
  setFill(fill, fillPadding) {
    if (this.fill) {
      this.fill.destroy();
    }
    if (this.bg instanceof sprite.Sprite && fill === this.bg) {
      console.warn("Can not use same Sprite instance for bg and fill.");
      return;
    }
    if (this.options?.nineSlicePlane) {
      if (typeof fill === "string") {
        this.fill = new meshExtras.NineSlicePlane(core.Texture.from(fill), ...this.options.nineSlicePlane.fill);
      } else if (fill instanceof core.Texture) {
        this.fill = new meshExtras.NineSlicePlane(fill, ...this.options.nineSlicePlane.fill);
      } else {
        console.warn("NineSlicePlane can not be used with views set as Container.");
      }
    }
    if (!this.fill) {
      this.fill = view.getView(fill);
    }
    this.innerView.addChildAt(this.fill, 1);
    const offsetX = fillPadding?.left ?? 0;
    const offsetY = fillPadding?.top ?? 0;
    this.fill.x = offsetX;
    this.fill.y = offsetY;
    if (this.fillMask) {
      this.fill.mask = null;
      this.fillMask.destroy();
    }
    const leftWidth = this.fill.width / 2;
    const rightWidth = this.fill.width / 2;
    const topHeight = this.fill.height / 2;
    const bottomHeight = this.fill.height / 2;
    let texture = core.Texture.WHITE;
    if (this.fill instanceof sprite.Sprite && this.fill.texture) {
      texture = this.fill.texture;
    }
    this.fillMask = new meshExtras.NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);
    this.fill.addChild(this.fillMask);
    this.fill.mask = this.fillMask;
  }
  validate(progress) {
    progress = Math.round(progress);
    if (progress < 0) {
      return 0;
    }
    if (progress > 100) {
      return 100;
    }
    return progress;
  }
  /** Set current progress percentage value. */
  set progress(progress) {
    this._progress = this.validate(progress);
    if (!this.fill)
      return;
    if (this.fillMask) {
      this.fillMask.width = this.fill.width / 100 * (this._progress - this.progressStart);
      this.fillMask.x = this.progressStart / 100 * this.fill.width;
      this.fillMask.height = this.fill.height;
    }
  }
  /** Return current progress percentage value. */
  get progress() {
    return this._progress;
  }
  /**
   * Sets width of a ProgressBars background and fill.
   * If nineSlicePlane is set, then width will be set to nineSlicePlane.
   * If nineSlicePlane is not set, then width will control components width as Container.
   * @param width - Width value.
   */
  set width(width) {
    if (this.options?.nineSlicePlane) {
      if (this.bg) {
        this.bg.width = width;
      }
      if (this.fill) {
        const leftPadding = this.options.fillPaddings?.left ?? 0;
        const rightPadding = this.options.fillPaddings?.right ?? 0;
        this.fill.width = width - leftPadding - rightPadding;
        this.fillMask.width = width - leftPadding - rightPadding;
      }
      this.progress = this._progress;
    } else {
      super.width = width;
    }
  }
  /** Gets width of a ProgressBar. */
  get width() {
    return super.width;
  }
  /**
   * Sets height of a ProgressBars background and fill.
   * If nineSlicePlane is set, then height will be set to nineSlicePlane.
   * If nineSlicePlane is not set, then height will control components height as Container.
   * @param height - Height value.
   */
  set height(height) {
    if (this.options?.nineSlicePlane) {
      if (this.bg) {
        this.bg.height = height;
      }
      if (this.fill) {
        const topPadding = this.options.fillPaddings?.top ?? 0;
        const bottomPadding = this.options.fillPaddings?.bottom ?? 0;
        this.fill.height = height - topPadding - bottomPadding;
        this.fillMask.height = height - topPadding - bottomPadding;
      }
      this.progress = this._progress;
    } else {
      super.height = height;
    }
  }
  /** Gets height of a ProgressBar. */
  get height() {
    return super.height;
  }
}

exports.ProgressBar = ProgressBar;
//# sourceMappingURL=ProgressBar.js.map
