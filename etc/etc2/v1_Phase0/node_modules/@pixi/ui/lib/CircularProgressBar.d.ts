import { Container } from '@pixi/display';
export type MaskedProgressBarOptions = {
    backgroundColor?: number;
    fillColor: number;
    lineWidth: number;
    radius: number;
    value?: number;
    backgroundAlpha?: number;
    fillAlpha?: number;
    cap?: 'butt' | 'round' | 'square';
};
/**
 * Creates a Circular ProgressBar.
 * @example
 * const progressBar = new CircularProgressBar({
 *    backgroundColor: 0x000000,
 *    backgroundAlpha: 0.5,
 *    lineWidth: 10,
 *    fillColor: 0xFFFFFF,
 *    radius: 50,
 *    value: 50,
 *    cap: 'round'
 * });
 *
 * progressBar.progress = 100;
 */
export declare class CircularProgressBar extends Container {
    private _progress;
    private options;
    private bgCircle;
    private fillCircle;
    /** Container, that holds all inner views. */
    innerView: Container<import("@pixi/display").DisplayObject>;
    /**
     * Creates a Circular ProgressBar.
     * @param { number } options - Options object to use.
     * @param { number } options.backgroundColor - Background color.
     * @param { number } options.fillColor - Fill color.
     * @param { number } options.lineWidth - Line width.
     * @param { number } options.radius - Radius.
     * @param { number } options.value - Progress value.
     * @param { number } options.backgroundAlpha - Background alpha.
     * @param { number } options.fillAlpha - Fill alpha.
     * @param { 'butt' | 'round' | 'square' } options.cap - Line cap.
     */
    constructor(options?: MaskedProgressBarOptions);
    private addBackground;
    /**
     * Set progress value.
     * @param { number } value - Progress value.
     */
    set progress(value: number);
    /**
     * Current progress value.
     * @returns { number } - Progress value.
     */
    get progress(): number;
}
//# sourceMappingURL=CircularProgressBar.d.ts.map