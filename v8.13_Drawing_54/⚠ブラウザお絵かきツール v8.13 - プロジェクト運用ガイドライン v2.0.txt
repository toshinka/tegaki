## ブラウザお絵かきツール v8.13 - プロジェクト運用ガイドライン v2.0

### ■ 実行環境・技術スタック

- **実行環境：** Chrome 最新、ローカルで HTML 直開き可能（file://）を想定、またファイルをブックマークレット発火しCSPを回避する為のビルドによる一括化も予定。
- **フレームワーク主体：** ベクターペン主体で、ラスターペンは全ての実装が終わるまで使わない。
- **技術スタック：** PixiJS v8.13（CDN読み込み）、ES2023（モジュールは使用しない）、fetch API clear API boundaries可
- **禁止事項：** Canvas2D（サムネイルは使用許可）, TypeScript, Vite, ESM, bundler, Babel 不使用
- **ライブラリ方針：** ライブラリを有効活用し車輪の再発明を無くす。但しPixiJSv8との相性やAIからの見通し・改修し易さも考慮すること。

---

### ■ 座標系統合ガイドライン【v2.0で明確化】

#### 座標変換の責務分離

- **座標変換を coordinate-system.js に完全統合**
  - DPI/DPR/CSSスケールを考慮した変換関数を一元化
  - Screen → Canvas → World → Local の完全パイプライン実装

- **drawing-engine.js の責務**
  - ❌ 「座標変換に依存せずワールド座標で動作」は誤り
  - ✓ **ポインターイベントから Local座標に変換し、ストローク記録する**
  - coordinate-system.worldToLocal() を使用して正確なLocal座標を取得
  - strokeRecorder には **Local座標のみ** を渡す（二重変換防止）

- **camera-system.js は表示変換のみ担当**
  - worldContainer の位置・スケール・回転管理
  - カメラ操作（ズーム・パン）のみ実装

- **stroke-recorder.js の責務**
  - ✓ **ローカル座標のポイントを直接記録**
  - ❌ screenToLayer() や座標変換を呼ばない（二重変換防止）
  - 入力パラメータ名に座標系を明示（localX, localY）

---

### ■ 座標系統合の実装ルール【v2.0実装知見】

#### 1. 座標変換の正確性

- すべてのpointerイベントは統一された変換パイプラインを通す
  ```
  PointerEvent.clientX/Y 
    → screenClientToCanvas()  [DPI補正]
    → canvasToWorld()  [worldContainer逆行列]
    → worldToLocal()  [手動逆算・親チェーン遡査]
    → Local座標確定
  ```

- **worldToLocal() は PIXI v8 toLocal() ではなく手動逆算のみ**
  - 理由: toLocal() が親チェーン全体の worldTransform を使うため、worldContainer の offset が含まれる
  - 実装: 親コンテナをスキャンして各 position/scale/rotation を逆順に適用

#### 2. 命名と API の厳格性

- **パラメータ名に座標系を明示**
  ```javascript
  ✓ startStroke(localX, localY, pressure)
  ✗ startStroke(x, y, pressure)  // 座標系不明
  ```

- **メソッド名で座標系を区別可能に**
  ```javascript
  screenClientToCanvas()
  canvasToWorld()
  worldToLocal()
  localToWorld()
  // 各メソッド名から座標系が明確
  ```

- **二重変換を命名で防ぐ**
  - addPoint(localX, localY) = screenToLayer() を呼ばない
  - drawingEngine側で座標変換を完結させる
  - strokeRecorder は受け取った座標をそのまま記録

#### 3. グローバルオブジェクトの統一

- **グローバルオブジェクトは明確に統一**
  ```javascript
  window.CoordinateSystem         // ✓ 統一
  window.cameraSystem             // ✓ 統一（CameraSystem インスタンス）
  window.layerManager             // ✓ 統一（LayerSystem インスタンス）
  
  window.TEGAKI_COORDINATE_SYSTEM // ❌ 削除候補（重複）
  ```
  - core-runtime.js で明示的に割り当て
  - クラス定義の副作用的なグローバル汚染を避ける

#### 4. 初期化の一元化

- **CoordinateSystem.init() は1回限りに**
  ```javascript
  init() {
      if (this.app) return;  // 2回目以降はスキップ
      // 初期化処理
  }
  ```
  - 初期化状態フラグ (isInitialized) を用意
  - 重複初期化によるバグを防止

#### 5. デバッグ手法の統一

- **コンソールログは最小限、なるべく無しで。** 不具合はAIによる検索が可能なので冗長化でしか無い。
  - 代わりに **デバッグコンソールツール（CoordDebug等）** をグローバルに提供
  - 実行時に `CoordDebug.testPoint()` で座標検証
  - 問題時は **具体的な座標値をコンソールに出力** （自動ログではなく意図的な出力）

---

### ■ ファイル責務の明確化

| ファイル | 責務 | 依存 |
|---------|------|------|
| **coordinate-system.js** | Screen↔Canvas↔World↔Local 変換の完全統合 | config, eventBus |
| **camera-system.js** | worldContainer transform管理、ズーム・パン | coordinate-system |
| **drawing-engine.js** | ポインターイベント → Local座標 変換、ストローク開始 | coordinate-system, layerManager, strokeRecorder |
| **stroke-recorder.js** | Local座標ポイント直接記録 | 座標変換なし |
| **stroke-renderer.js** | Local座標からビジュアル生成 | 座標変換なし |
| **core-runtime.js** | 全システムの初期化・統合 | すべて |

---

### ■ API の不一致・二重実装チェックリスト

各改修時に確認すること：

- [ ] **座標系の一貫性**
  - パラメータ名に座標系が明示されているか
  - 座標変換は coordinate-system.js 経由のみか
  - 二重変換がないか（drawing-engine と stroke-recorder で別々に変換していないか）

- [ ] **グローバルオブジェクトの統一**
  - window.layerSystem/layerManager が統一されているか
  - window.CoordinateSystem が初期化されているか
  - 重複定義（TEGAKI_* vs. TegakiXxx）がないか

- [ ] **命名の規則性**
  - メソッド名から座標系が判別できるか
  - パラメータ名に座標系が含まれているか
  - EventBus イベント名が統一フォーマットか

- [ ] **初期化処理の明確性**
  - init() が複数回呼ばれても安全か
  - 初期化順序に依存関係がないか（or 明示されているか）
  - 依存するシステムが先に初期化されているか

- [ ] **責務分離**
  - coordinate-system.js が座標変換のみか（描画ロジックを含まないか）
  - drawing-engine.js が描画ロジックと座標変換の責務が分離されているか
  - stroke-recorder.js が記録のみか（描画やUI更新を含まないか）

---

### ■ ショートカット中心運用

- **基本的にショートカット中心運用でアイコンは無駄に設けない**
- UI要素は最小限（レイヤーパネル、タイムライン、簡易ステータスのみ）
- ペン操作・カメラ操作はすべてキーボード/マウスで実装

---

### ■ 実装品質基準

- **多数ある競合ツールとの差別化のためモダンな実装を心がけ、後方互換は気にしない。**
  - PixiJS v8 の最新機能を積極的に活用
  - ES2023 の新構文を使用（async/await, オプショナルチェーン等）

- **DRY/SOLID原則に基づく明確なファイルの責務分担をしClaudeからの可視性を高める事。**
  - 各ファイルは単一責任に特化
  - コード重複を徹底的に排除
  - インターフェースを明確に定義

- **APIの不一致・断片化・EventBus統合の不完全性・設定参照の混在・二重実装があるか等の整合性のチェック**
  - 各機能追加時に整合性レビュー
  - 新しいAPI導入時は既存APIとの競合を確認
  - EventBus の イベント名・パラメータ形式を統一

- **命名・形式・メソッド・初期化・イベント・管理の規則性のある統一ルール化/系統の一元化をして他Claudeからの可読性・保守性を高める。**
  - メソッド命名: camelCase で座標系を含む
  - イベント名: `component:action` フォーマット統一
  - パラメータ: 座標系を名に含める

---

### ■ 禁止事項【v2.0で追加】

- 🚫 **フォールバック処理・フェイルセーフ - 曖昧な動作・暗黙修復禁止。**
  - 座標系の fallback は明示的に（or 例外 throw）
  - 初期化失敗時は隠さず throw
  - 「何か動いてるっぽい」は許さない

- 🚫 **バージョン混在 - PixiJS v7/v8同時対応・二重管理禁止。**
  - v8.13 専用実装
  - v7対応コードは削除

- 🚫 **二重実装による肥大化、過度なエラー演出も禁止。冗長化注意。**
  - 座標変換を複数箇所で実装しない
  - エラーメッセージは簡潔に（AI検索しやすく）
  - ログ出力は最小限

- 🚫 **二重変換の禁止【v2.0で明確化】**
  - drawing-engine で Local座標に変換後、stroke-recorder で screenToLayer() を呼ばない
  - メソッドの入力座標系を明示してから呼び出す

---

### ■ 座標系統合テストの必須項目

改修完了後、以下すべてをテストする：

- [ ] 初期状態でペン位置と描画位置が一致
- [ ] ズーム後も描画位置が正確
- [ ] パン後も描画位置が正確
- [ ] レイヤー移動後も描画位置が正確
- [ ] Canvas resize 後も描画位置が正確
- [ ] Retina/DPI 環境で描画位置が正確

---

### ■ 今後の改修時のチェックリスト

**新しいコードを追加する際：**

1. 座標系を扱うか確認
2. YES → パラメータ名に座標系を明示
3. メソッド名でも座標系を区別可能か確認
4. 二重変換がないか確認
5. coordinate-system.js 経由か確認
6. グローバルオブジェクトの統一性を確認
7. EventBus イベント名が統一フォーマットか確認

---

### ■ 参考資料

- **座標系統合・完全修正 改修ロードマップ.txt** - 基本的な改修手順
- **座標系統合・完全修正 改修ロードマップ v1.1** - 実装知見と落とし穴
- **CoordDebug** - コンソール座標検証ツール