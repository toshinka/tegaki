 ✅ config.js (Phase 1: ペン高精度化設定追加版) loaded
    🆕 Phase 1: ベースラインキャリブレーション設定追加
    🆕 Phase 1: devicePixelRatio対応設定追加
batch-api.js:382 ✅ batch-api.js (Phase 6: History統合版) loaded
event-bus.js:143 ✅ system/event-bus.js Phase 2: 優先度機能追加版 loaded
popup-manager.js:357 ✅ popup-manager.js (quick-access除外対応版) loaded
drawing-clipboard.js:603 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
drawing-clipboard.js:604    - ✅ CTRL+V behavior: overwrite active layer
drawing-clipboard.js:605    - ✅ Commit events: paste:commit, operation:commit
drawing-clipboard.js:606    - ✅ Thumbnail auto-update on paste
history.js:185 ✅ history.js (Phase 1: async対応完了版) loaded
animation-system.js:1428 ✅ animation-system.js (Phase 4.1: CUT自動採番対応版) loaded
brush-settings.js:183 ✅ brush-settings.js (API統一版) loaded
brush-settings.js:184    - ✅ getOpacity() / setOpacity() 追加
brush-settings.js:185    - ✅ brush:opacity-changed イベント購読追加
export-manager.js:259 ✅ export-manager.js loaded
png-exporter.js:85 ✅ png-exporter.js (単一フレーム専用・プレビュー対応) loaded
apng-exporter.js:236 ✅ apng-exporter.js (PixiJS v8.13完全対応版) loaded
gif-exporter.js:300 ✅ gif-exporter.js (PixiJS v8.13完全対応版) loaded
dom-builder.js:494 ✅ dom-builder.js (ID重複解消版) loaded
dom-builder.js:495    - #pen-settings → #legacy-pen-settings に変更
dom-builder.js:496    - pen-size-slider → legacy-pen-size-slider に変更
dom-builder.js:497    - quick-access-popup.jsとのID競合を完全解消
slider-utils.js:197 ✅ ui/slider-utils.js loaded
slider-utils.js:198    - 責務: スライダーUIの統一実装
slider-utils.js:199    - DRY原則: settings-popup.js と ui-panels.js で共有
slider-utils.js:200    - API: createSlider() / createSimpleSlider()
resize-popup.js:531 ✅ resize-popup.js (イベントリスナー参照修正版) loaded
timeline-ui.js:969 ✅ timeline-ui.js (Frame表記・UI改善版) loaded
album-popup.js:477 ✅ album-popup.js (PopupManager対応版 + display修正) loaded
settings-popup.js:583 ✅ settings-popup.js (即応性完全修正版) loaded
settings-popup.js:584    - CSS transition完全除去（!important付き）
settings-popup.js:585    - DOM更新を同期的に即座実行
settings-popup.js:586    - quick-access/resize-popupと完全同等の動作
quick-access-popup.js:538 ✅ quick-access-popup.js (背景ドラッグ + 閉じるボタン版) loaded
quick-access-popup.js:539    - 背景ドラッグで移動可能（スライダー/ボタン以外）
quick-access-popup.js:540    - 右上×ボタンで閉じる
quick-access-popup.js:541    - 画面外クリックで閉じない（常時開きっぱなし可能）
export-popup.js:429 ✅ export-popup.js (PopupManager対応版) loaded
ui-panels.js:396 ✅ ui-panels.js (完全改修版) loaded
core-runtime.js:841 ✅ core-runtime.js (ツール切り替え強化版) loaded
core-initializer.js:307 ✅ core-initializer.js (Phase 1修正版) loaded
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
core-initializer.js:148 ✅ window.BrushSettings 公開完了
core-initializer.js:151 ✅ グローバル参照確認:
core-initializer.js:152    window.drawingEngine: true
core-initializer.js:153    window.layerManager: true
core-initializer.js:154    window.cameraSystem: true
popup-manager.js:16 ✅ PopupManager initialized
popup-manager.js:42 📋 Popup "settings" registered (priority: 1)
popup-manager.js:42 📋 Popup "quickAccess" registered (priority: 2)
popup-manager.js:42 📋 Popup "album" registered (priority: 3)
popup-manager.js:42 📋 Popup "resize" registered (priority: 4)
popup-manager.js:42 📋 Popup "export" registered (priority: 5)
popup-manager.js:102 🔧 Initializing all popups...
popup-manager.js:87 ✅ Popup "settings" initialized successfully
popup-manager.js:87 ✅ Popup "quickAccess" initialized successfully
popup-manager.js:87 ✅ Popup "album" initialized successfully
popup-manager.js:87 ✅ Popup "resize" initialized successfully
popup-manager.js:66 ⏳ Popup "export" waiting for: TEGAKI_EXPORT_MANAGER
popup-manager.js:118 📊 Popup initialization: 4 ready, 1 deferred
popup-manager.js:87 ✅ Popup "export" initialized successfully
popup-manager.js:153 ✅ All deferred popups initialized
// Phase2機能確認
const de = window.drawingEngine || window.coreEngine?.drawingEngine;
const ls = window.layerSystem || window.coreEngine?.layerSystem;
undefined
// 1. 消しゴムツール選択
window.TegakiEventBus?.emit('tool:select', { tool: 'eraser' });
console.log('Current Tool:', de?.currentTool); // 'eraser'
VM389:3 Current Tool: eraser
undefined
// 2. GPU BlendMode確認
console.log('Eraser Renderer:', de?.eraserRenderer);
console.log('BLEND_MODES.ERASE:', PIXI.BLEND_MODES.ERASE); // 26
VM393:2 Eraser Renderer: EraserMaskRenderer {app: ju, renderer: kv}
VM393:3 Uncaught TypeError: Cannot read properties of undefined (reading 'ERASE')
    at <anonymous>:3:52
(anonymous) @ VM393:3
// 3. スナップショットキャッシュ確認
console.log('Snapshot Cache:', de?.eraserSnapshotCache);
console.log('Cache Size:', de?.eraserSnapshotCache.size);
VM397:2 Snapshot Cache: Map(0) {size: 0}
VM397:3 Cache Size: 0
undefined
// 4. マスク状態確認
ls?.getLayers().forEach((layer, i) => {
    console.log(`Layer ${i}:`, {
        hasMask: layer.layerData?.hasMask(),
        maskTexture: !!layer.layerData?.maskTexture,
        maskSprite: !!layer.layerData?.maskSprite,
        textureSize: layer.layerData?.maskTexture ? 
            `${layer.layerData.maskTexture.width}x${layer.layerData.maskTexture.height}` : 'N/A'
    });
});
VM401:4 Uncaught TypeError: layer.layerData?.hasMask is not a function
    at <anonymous>:4:35
    at Array.forEach (<anonymous>)
    at <anonymous>:2:17
(anonymous) @ VM401:4
(anonymous) @ VM401:2
// 5. GPU最適化テスト
const testErase = () => {
    const layer = ls.getActiveLayer();
    if (!layer?.layerData?.hasMask()) {
        console.log('❌ No mask on active layer');
        return;
    }
    
    const testPoints = [
        {x: 100, y: 100},
        {x: 110, y: 110},
        {x: 120, y: 120}
    ];
    
    console.time('GPU Erase');
    const ok = de.eraserRenderer.renderEraserToMask(
        layer.layerData, 
        testPoints, 
        25
    );
    console.timeEnd('GPU Erase');
    console.log('Erase Result:', ok);
};
testErase();
VM405:4 Uncaught TypeError: layer?.layerData?.hasMask is not a function
    at testErase (<anonymous>:4:28)
    at <anonymous>:24:1
testErase @ VM405:4
(anonymous) @ VM405:24
// 6. スナップショット速度テスト
const testSnapshot = () => {
    const layer = ls.getActiveLayer();
    if (!layer?.layerData?.hasMask()) {
        console.log('❌ No mask on active layer');
        return;
    }
    
    console.time('GPU Snapshot');
    const snapshot = de.eraserRenderer.captureMaskSnapshot(layer.layerData);
    console.timeEnd('GPU Snapshot');
    console.log('Snapshot:', snapshot);
    
    // 復元テスト
    console.time('GPU Restore');
    de.eraserRenderer.restoreMaskSnapshot(layer.layerData, snapshot).then(ok => {
        console.timeEnd('GPU Restore');
        console.log('Restore Result:', ok);
        
        // 後始末
        de.eraserRenderer.destroySnapshot(snapshot);
    });
};
testSnapshot();
VM409:4 Uncaught TypeError: layer?.layerData?.hasMask is not a function
    at testSnapshot (<anonymous>:4:28)
    at <anonymous>:24:1
testSnapshot @ VM409:4
(anonymous) @ VM409:24
// 7. Undo/Redo速度テスト
const testUndoRedo = async () => {
    console.time('Undo Performance');
    await window.History.undo();
    console.timeEnd('Undo Performance');
    
    console.time('Redo Performance');
    await window.History.redo();
    console.timeEnd('Redo Performance');
};
undefined
// 8. メモリ使用状況
const checkMemory = () => {
    if (performance.memory) {
        const used = (performance.memory.usedJSHeapSize / 1048576).toFixed(2);
        const total = (performance.memory.totalJSHeapSize / 1048576).toFixed(2);
        console.log(`Memory: ${used}MB / ${total}MB`);
    }
    
    console.log('Snapshot Cache Entries:', 
        Array.from(de.eraserSnapshotCache.entries()).map(([id, cache]) => ({
            layerId: id,
            count: cache.length
        }))
    );
};
checkMemory();
VM417:6 Memory: 13.64MB / 14.50MB
VM417:9 Snapshot Cache Entries: []
undefined
// 9. FPS監視（60fps維持確認）
let frameCount = 0;
let lastTime = performance.now();
const checkFPS = () => {
    frameCount++;
    const currentTime = performance.now();
    if (currentTime - lastTime >= 1000) {
        console.log(`FPS: ${frameCount}`);
        frameCount = 0;
        lastTime = currentTime;
    }
    requestAnimationFrame(checkFPS);
};
checkFPS();
undefined
VM421:8 FPS: 62
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
// 10. Phase2完全動作テスト
const fullTest = async () => {
    console.log('=== Phase 2 完全動作テスト開始 ===');
    
    // ツール切替
    window.TegakiEventBus?.emit('tool:select', { tool: 'eraser' });
    await new Promise(r => setTimeout(r, 100));
    
    // 描画→消去→Undo→Redo
    const layer = ls.getActiveLayer();
    if (!layer) {
        console.log('❌ No active layer');
        return;
    }
    
    console.log('✅ Active layer:', layer.layerData?.name);
    console.log('✅ Has mask:', layer.layerData?.hasMask());
    console.log('✅ Eraser renderer ready:', !!de.eraserRenderer);
    
    // 消しゴムストローク
    const points = [];
    for (let i = 0; i < 20; i++) {
        points.push({x: 100 + i * 5, y: 100 + Math.sin(i) * 20});
    }
    
    console.time('Full Erase Stroke');
    const snapshot1 = de.eraserRenderer.captureMaskSnapshot(layer.layerData);
    de.eraserRenderer.renderEraserToMask(layer.layerData, points, 15);
    const snapshot2 = de.eraserRenderer.captureMaskSnapshot(layer.layerData);
    console.timeEnd('Full Erase Stroke');
    
    // Undo/Redoテスト
    console.time('Undo');
    await de.eraserRenderer.restoreMaskSnapshot(layer.layerData, snapshot1);
    console.timeEnd('Undo');
    
    console.time('Redo');
    await de.eraserRenderer.restoreMaskSnapshot(layer.layerData, snapshot2);
    console.timeEnd('Redo');
    
    // クリーンアップ
    de.eraserRenderer.destroySnapshot(snapshot1);
    de.eraserRenderer.destroySnapshot(snapshot2);
    
    console.log('=== Phase 2 完全動作テスト完了 ===');
};
fullTest();
VM425:3 === Phase 2 完全動作テスト開始 ===
Promise {<pending>}
VM425:16 ✅ Active layer: レイヤー1
VM425:17 Uncaught (in promise) TypeError: layer.layerData?.hasMask is not a function
    at fullTest (<anonymous>:17:49)
fullTest @ VM425:17
await in fullTest
(anonymous) @ VM425:47
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
VM421:8 FPS: 60
// 11. BlendMode確認
console.log('Available Blend Modes:', Object.keys(PIXI.BLEND_MODES)
    .filter(k => isNaN(k))
    .map(k => `${k}: ${PIXI.BLEND_MODES[k]}`));
VM429:2 Uncaught TypeError: Cannot convert undefined or null to object
    at Object.keys (<anonymous>)
    at <anonymous>:2:46
(anonymous) @ VM429:2
// 12. Phase2性能ベンチマーク
const benchmark = async () => {
    console.log('=== Phase 2 性能ベンチマーク ===');
    const layer = ls.getActiveLayer();
    if (!layer?.layerData?.hasMask()) return;
    
    const testSizes = [10, 50, 100, 200];
    
    for (const pointCount of testSizes) {
        const points = Array.from({length: pointCount}, (_, i) => ({
            x: 100 + i * 2,
            y: 100 + Math.sin(i * 0.1) * 50
        }));
        
        console.time(`Erase ${pointCount} points`);
        de.eraserRenderer.renderEraserToMask(layer.layerData, points, 20);
        console.timeEnd(`Erase ${pointCount} points`);
    }
    
    console.log('=== ベンチマーク完了 ===');
};
benchmark();
VM433:3 === Phase 2 性能ベンチマーク ===
Promise {<rejected>: TypeError: layer?.layerData?.hasMask is not a function
    at benchmark (<anonymous>:5:28)
    at <…}
VM433:5 Uncaught (in promise) TypeError: layer?.layerData?.hasMask is not a function
    at benchmark (<anonymous>:5:28)
    at <anonymous>:22:1
benchmark @ VM433:5
(anonymous) @ VM433:22



---
※リドゥをすると下記エラー
---
GraphicsContextSystem.ts:164 Uncaught TypeError: Cannot read properties of null (reading 'uid')

