config.js:523 ✅ config.js (Phase 2完全版) loaded
config.js:524    - BRUSH_DEFAULTS追加完了
event-bus.js:143 ✅ system/event-bus.js Phase 2: 優先度機能追加版 loaded
coordinate-system.js:519 ✅ coordinate-system.js (Phase 2.5完全修正版) loaded
coordinate-system.js:520    - Phase 2.5: worldToLocal() の pivot/position/rotation/scale 計算順序を完全修正
coordinate-system.js:521    - Phase 2.5: localToWorld() も同様に修正（完全な逆変換を保証）
coordinate-system.js:522    - サムネイル問題の根本原因を解決
coordinate-system.js:601 ✅ Debug commands: TegakiDebug.coord.*
data-models.js:276 ✅ data-models.js (マスクスプライト不可視版) loaded
batch-api.js:382 ✅ batch-api.js (Phase 6: History統合版) loaded
popup-manager.js:357 ✅ popup-manager.js (quick-access除外対応版) loaded
camera-system.js:704 ✅ camera-system.js (v2.0: リサイズ修正版) loaded
layer-transform.js:910 ✅ layer-transform.js (Phase 1-5 GSAP統合完全版) loaded
layer-transform.js:911    ✓ Phase 1-4: イベント発火・NaN対策・UI整備・反転機能
layer-transform.js:912    ✓ Phase 5: GSAP統合（killTweensOf + delayedCall）
layer-transform.js:913    ✓ GPU反映保証: Transform適用から1フレーム後にイベント発火
layer-transform.js:914    ✓ サムネイル同期: layer:transform-updated + thumbnail:layer-updated
layer-system.js:1247 ✅ layer-system.js (v2.0.1: 反転機能修復版) loaded
drawing-clipboard.js:603 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
drawing-clipboard.js:604    - ✅ CTRL+V behavior: overwrite active layer
drawing-clipboard.js:605    - ✅ Commit events: paste:commit, operation:commit
drawing-clipboard.js:606    - ✅ Thumbnail auto-update on paste
history.js:217 ✅ history.js (Phase 3: Redo null参照修正版) loaded
animation-system.js:218 [AnimationSystem] GSAP detected - using synchronized thumbnail generation
animation-system.js:1484 ✅ animation-system.js (GSAP統合完全版) loaded
animation-system.js:1485    ✓ Phase 1: フレーム名統一（xF形式）
animation-system.js:1486    ✓ Phase 3: Canvas2D廃止 → ThumbnailSystem統一
animation-system.js:1487    ✓ Phase 3-2: init()時にGSAP.delayedCall()で初回サムネイル生成
animation-system.js:1488    ✓ generateFrameThumbnail(): PixiJS RenderTexture使用
animation-system.js:1489    ✓ frame.thumbnailDataURL保存で UI層連携
pressure-handler.js:183 ✅ pressure-handler.js (Phase 3: 距離ベースフィルタ追加版) loaded
pressure-handler.js:184    - applyDistanceFilter() 追加
pressure-handler.js:185    - 短距離: alpha=0.9 (即座反映)
pressure-handler.js:186    - 長距離: alpha=0.3 (スムージング強)
curve-interpolator.js:205 ✅ curve-interpolator.js (Phase 3) loaded
curve-interpolator.js:206    - Catmull-Rom スプライン補間
curve-interpolator.js:207    - 適応的サンプリング対応
curve-interpolator.js:208    - tiltX/Y/twist データ補間対応
stroke-renderer.js:247 ✅ system/drawing/stroke-renderer.js loaded (PixiJS v8完全対応版)
thumbnail-system.js:505 ✅ thumbnail-system.js loaded (Phase 1-3)
brush-settings.js:183 ✅ brush-settings.js (API統一版) loaded
brush-settings.js:184    - ✅ getOpacity() / setOpacity() 追加
brush-settings.js:185    - ✅ brush:opacity-changed イベント購読追加
drawing-engine.js:376 ✅ drawing-engine.js (座標系完全修正版) loaded
drawing-engine.js:459 ✅ Debug commands: TegakiDebug.drawing.*
quick-export-ui.js:292 ✅ quick-export-ui.js (無効化版) loaded
export-manager.js:224 ✅ export-manager.js (CUT→FRAME完全修正版) loaded
png-exporter.js:85 ✅ png-exporter.js (単一フレーム専用・プレビュー対応) loaded
apng-exporter.js:236 ✅ apng-exporter.js (CUT→FRAME完全修正版) loaded
gif-exporter.js:300 ✅ gif-exporter.js (CUT→FRAME完全修正版) loaded
webp-exporter.js:289 ✅ webp-exporter.js (静止画・動画自動判定対応版) loaded
mp4-exporter.js:30 ✅ mp4-exporter.js (Phase 8完成版) loaded
pdf-exporter.js:225 ✅ pdf-exporter.js (CUT→FRAME完全対応版) loaded
dom-builder.js:494 ✅ dom-builder.js (ID重複解消版) loaded
dom-builder.js:495    - #pen-settings → #legacy-pen-settings に変更
dom-builder.js:496    - pen-size-slider → legacy-pen-size-slider に変更
dom-builder.js:497    - quick-access-popup.jsとのID競合を完全解消
slider-utils.js:197 ✅ ui/slider-utils.js loaded
slider-utils.js:198    - 責務: スライダーUIの統一実装
slider-utils.js:199    - DRY原則: settings-popup.js と ui-panels.js で共有
slider-utils.js:200    - API: createSlider() / createSimpleSlider()
keyboard-handler.js:318 ✅ keyboard-handler.js (P/Eサイドバー同期版) loaded
resize-popup.js:452 ✅ resize-popup.js (Phase 4完了: ロジック削減版) loaded
layer-panel-renderer.js:471 ✅ ui/layer-panel-renderer.js (Phase 2 サムネイル更新パイプライン統合版) loaded
layer-panel-renderer.js:472    ✓ Phase 2: layer:transform-updated 購読・即座更新
layer-panel-renderer.js:473    ✓ GSAP delayedCall でサムネイル更新タイミング同期
layer-panel-renderer.js:474    ✓ throttle: 50ms（レイヤー個別管理）
layer-panel-renderer.js:475    ✓ キャッシュ強制クリア実装
layer-panel-renderer.js:476    ✓ immediate フラグ対応
status-display-renderer.js:138 ✅ status-display-renderer.js (Phase 1改修版) loaded
timeline-thumbnail-utils.js:258 ✅ ui/timeline-thumbnail-utils.js (Phase 3完全版) loaded
timeline-thumbnail-utils.js:259    ✓ Phase 1: layer:transform-updated 購読追加
timeline-thumbnail-utils.js:260    ✓ Phase 3: throttle最適化（100ms）
timeline-thumbnail-utils.js:261    ✓ Phase 3: immediate フラグ対応
timeline-thumbnail-utils.js:262    ✓ タイムラインサムネイルがレイヤー変形に即座追従
timeline-ui.js:981 ✅ timeline-ui.js (Phase 4完了: レイヤー変形連携版) loaded
album-popup.js:473 ✅ album-popup.js (FRAME改修版) loaded
settings-popup.js:583 ✅ settings-popup.js (即応性完全修正版) loaded
settings-popup.js:584    - CSS transition完全除去（!important付き）
settings-popup.js:585    - DOM更新を同期的に即座実行
settings-popup.js:586    - quick-access/resize-popupと完全同等の動作
quick-access-popup.js:538 ✅ quick-access-popup.js (背景ドラッグ + 閉じるボタン版) loaded
quick-access-popup.js:539    - 背景ドラッグで移動可能（スライダー/ボタン以外）
quick-access-popup.js:540    - 右上×ボタンで閉じる
quick-access-popup.js:541    - 画面外クリックで閉じない（常時開きっぱなし可能）
export-popup.js:423 ✅ export-popup.js (frameInfo修正版＋PDF有効化) loaded
ui-panels.js:408 ✅ ui-panels.js (サイドバー同期・色調整版) loaded
core-runtime.js:713 ✅ core-runtime.js (Phase 1-3完全版: ThumbnailSystem統合) loaded
core-engine.js:847 ✅ core-engine.js (GSAP統合・反転機能修正完全版) loaded
core-engine.js:848    ✓ Phase 2: リサイズ時レイヤー座標シフト + 背景色修正
core-engine.js:849    ✓ Phase 4: onFlipRequestコールバック設定（Vモード反転機能修復）
core-engine.js:850    ✓ Phase 5: GSAP Ticker統合準備完了（_setupGSAPTicker）
core-engine.js:851    ✓ destroy()メソッド追加（GSAP完全停止・リロード安定化）
core-initializer.js:347 ✅ core-initializer.js (完全修正版・SettingsManager＋ExportPopup対応) loaded
core-engine.js:352 [CoreEngine] GSAP detected - Ticker統合 available
layer-transform.js:46 [LayerTransform] GSAP detected - using synchronized updates
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
thumbnail-system.js:50 ✅ ThumbnailSystem initialized (Phase 1-3)
thumbnail-system.js:51    ✓ RenderTexture pool: max size 10
core-engine.js:757 ✅ ThumbnailSystem initialized in CoreEngine
animation-system.js:218 [AnimationSystem] GSAP detected - using synchronized thumbnail generation
core-engine.js:496 ✅ [CoreEngine] onFlipRequest callback configured
core-initializer.js:63 ✅ SettingsManager initialized
popup-manager.js:16 ✅ PopupManager initialized
popup-manager.js:42 📋 Popup "settings" registered (priority: 1)
popup-manager.js:42 📋 Popup "quickAccess" registered (priority: 2)
popup-manager.js:42 📋 Popup "album" registered (priority: 3)
popup-manager.js:42 📋 Popup "resize" registered (priority: 4)
popup-manager.js:102 🔧 Initializing all popups...
popup-manager.js:87 ✅ Popup "settings" initialized successfully
popup-manager.js:87 ✅ Popup "quickAccess" initialized successfully
popup-manager.js:87 ✅ Popup "album" initialized successfully
popup-manager.js:87 ✅ Popup "resize" initialized successfully
popup-manager.js:118 📊 Popup initialization: 4 ready, 0 deferred
animation-system.js:255 🎬 Regenerating 0 frame thumbnails...
animation-system.js:265 ✅ All frame thumbnails regenerated
popup-manager.js:42 📋 Popup "export" registered (priority: 5)
popup-manager.js:87 ✅ Popup "export" initialized successfully
core-initializer.js:245 ✅ ExportPopup registered and initialized
animation-system.js:777 🎬 Generating frame thumbnail: index=0, id=frame_1761798304482_jig1g6bjw
animation-system.js:794 ✓ Frame thumbnail saved: frame_1761798304482_jig1g6bjw
animation-system.js:800 ✓ Frame thumbnail dataURL generated
animation-system.js:812 ✅ Frame 0 thumbnail generation complete
// ================================================================================
// 簡易デバッグコマンド - コンソールで実行
// ================================================================================

// ========== 基本確認 ==========
console.log('=== システム状態 ===');
console.log('ThumbnailSystem:', typeof window.ThumbnailSystem, window.ThumbnailSystem?.isInitialized);
console.log('AnimationSystem:', typeof window.animationSystem);
console.log('LayerManager:', typeof window.layerManager);
console.log('GSAP:', typeof gsap);

// ========== 診断コマンド ==========
window.checkThumb = function() {
    if (!window.ThumbnailSystem) {
        console.error('❌ ThumbnailSystem not found');
        return;
    }
    
    console.log('ThumbnailSystem状態:');
    console.log('  initialized:', window.ThumbnailSystem.isInitialized);
    console.log('  app:', !!window.ThumbnailSystem.app);
    console.log('  renderer:', !!window.ThumbnailSystem.app?.renderer);
    console.log('  eventBus:', !!window.ThumbnailSystem.eventBus);
    
    const info = window.ThumbnailSystem.getDebugInfo();
    console.log('  layer cache:', info.layerCacheSize);
    console.log('  frame cache:', info.frameCacheSize);
    console.log('  pending:', info.pendingVModeRefreshCount);
};

// 手動初期化
window.fixThumb = function() {
    if (!window.ThumbnailSystem) {
        console.error('❌ ThumbnailSystem not found');
        return;
    }
    
    if (!window.ThumbnailSystem.app) {
        window.ThumbnailSystem.app = window.app;
        console.log('✅ app assigned');
    }
    
    if (!window.ThumbnailSystem.isInitialized) {
        window.ThumbnailSystem.init(window.TegakiEventBus);
        console.log('✅ initialized');
    }
    
    window.checkThumb();
};

// onFlipRequest修復
window.fixFlip = function() {
    const layerMgr = window.layerManager;
    if (!layerMgr?.transform) {
        console.error('❌ LayerTransform not found');
        return;
    }
    
    layerMgr.transform.onFlipRequest = (direction) => {
        console.log(`🔄 Flip: ${direction}`);
        const layer = layerMgr.getActiveLayer();
        if (!layer) return;
        
        layerMgr.transform.flipLayer(layer, direction);
        
        if (window.TegakiEventBus) {
            window.TegakiEventBus.emit('thumbnail:layer-updated', {
                component: 'fix',
                action: 'flip',
                data: { 
                    layerIndex: layerMgr.activeLayerIndex, 
                    layerId: layer.layerData.id, 
                    immediate: true 
                }
            });
        }
    };
    
    console.log('✅ onFlipRequest fixed');
};

// 全修復
window.fixAll = function() {
    console.log('=== 全修復 ===');
    window.fixThumb();
    window.fixFlip();
    console.log('✅ 完了');
};

// ★★★ 新規: サムネイル生成テスト ★★★
window.testThumbGeneration = async function() {
    console.log('=== サムネイル生成テスト ===');
    
    const layerMgr = window.layerManager;
    if (!layerMgr) {
        console.error('❌ LayerManager not found');
        return;
    }
    
    const layers = layerMgr.getLayers();
    console.log(`📋 Total layers: ${layers.length}`);
    
    for (let i = 0; i < layers.length; i++) {
        const layer = layers[i];
        const layerId = layer.layerData?.id;
        
        if (layer.layerData?.isBackground) {
            console.log(`⏭️  Layer ${i} (${layerId}): Background - skipped`);
            continue;
        }
        
        console.log(`🎬 Layer ${i} (${layerId}): Generating...`);
        
        const thumb = await window.ThumbnailSystem.generateLayerThumbnail(layer, 64, 64);
        
        if (thumb) {
            console.log(`  ✅ Generated: ${thumb.width}x${thumb.height}`);
        } else {
            console.log(`  ❌ Failed`);
        }
        
        await new Promise(r => setTimeout(r, 50));
    }
    
    console.log('\n📊 Final cache state:');
    window.checkThumb();
};

// ★★★ 新規: UI層から強制更新 ★★★
window.forceUIUpdate = async function() {
    console.log('=== UI層強制更新 ===');
    
    // LayerPanelRenderer取得
    const layerPanel = window.TegakiUI?.layerPanelRenderer || 
                      window.CoreRuntime?.internal?.layerPanelRenderer;
    
    if (!layerPanel) {
        console.error('❌ LayerPanelRenderer not found');
        return;
    }
    
    console.log('🔄 Calling updateAllThumbnails()...');
    await layerPanel.updateAllThumbnails();
    
    console.log('\n📊 Cache state after update:');
    window.checkThumb();
};

// ★★★ 新規: タイムラインサムネイル生成テスト ★★★
window.testTimelineThumb = async function() {
    console.log('=== タイムラインサムネイル生成テスト ===');
    
    const animSys = window.animationSystem;
    if (!animSys) {
        console.error('❌ AnimationSystem not found');
        return;
    }
    
    const frames = animSys.getAllFrames();
    console.log(`📋 Total frames: ${frames.length}`);
    
    for (let i = 0; i < frames.length; i++) {
        const frame = frames[i];
        
        console.log(`🎬 Frame ${i} (${frame.id}): Generating...`);
        
        const thumb = await window.ThumbnailSystem.generateFrameThumbnail(frame.container, 150, 150);
        
        if (thumb) {
            console.log(`  ✅ Generated: ${thumb.width}x${thumb.height}`);
        } else {
            console.log(`  ❌ Failed`);
        }
        
        await new Promise(r => setTimeout(r, 50));
    }
    
    console.log('\n📊 Final cache state:');
    window.checkThumb();
};

// レイヤーサムネイル強制更新
window.refreshLayer = function(index = 0) {
    const layerMgr = window.layerManager;
    if (!layerMgr) return;
    
    const layers = layerMgr.getLayers();
    const layer = layers[index];
    if (!layer) return;
    
    const layerId = layer.layerData?.id;
    console.log(`🔄 Refreshing layer ${index} (${layerId})`);
    
    if (window.ThumbnailSystem) {
        window.ThumbnailSystem._invalidateLayerCacheByLayerId(layerId);
    }
    
    if (window.TegakiEventBus) {
        window.TegakiEventBus.emit('thumbnail:layer-updated', {
            component: 'manual',
            action: 'refresh',
            data: { layerIndex: index, layerId, immediate: true }
        });
    }
};

console.log('\n✅ デバッグコマンド準備完了');
console.log('\n📋 使い方:');
console.log('  window.checkThumb()         - 状態確認');
console.log('  window.fixAll()             - 全修復');
console.log('  window.testThumbGeneration()- レイヤーサムネイル生成テスト');
console.log('  window.testTimelineThumb()  - タイムラインサムネイル生成テスト');
console.log('  window.forceUIUpdate()      - UI層から強制更新');
console.log('  window.refreshLayer(0)      - レイヤー0更新');

// 自動診断実行
console.log('\n=== 自動診断 ===');
window.checkThumb();
VM539:6 === システム状態 ===
VM539:7 ThumbnailSystem: object true
VM539:8 AnimationSystem: object
VM539:9 LayerManager: object
VM539:10 GSAP: object
VM539:207 
✅ デバッグコマンド準備完了
VM539:208 
📋 使い方:
VM539:209   window.checkThumb()         - 状態確認
VM539:210   window.fixAll()             - 全修復
VM539:211   window.testThumbGeneration()- レイヤーサムネイル生成テスト
VM539:212   window.testTimelineThumb()  - タイムラインサムネイル生成テスト
VM539:213   window.forceUIUpdate()      - UI層から強制更新
VM539:214   window.refreshLayer(0)      - レイヤー0更新
VM539:217 
=== 自動診断 ===
VM539:19 ThumbnailSystem状態:
VM539:20   initialized: true
VM539:21   app: true
VM539:22   renderer: true
VM539:23   eventBus: true
VM539:26   layer cache: 0
VM539:27   frame cache: 1
VM539:28   pending: 0
undefined
