📋 総合評価
✅ 良好な点

責務分離は概ね良好: settings-popup.jsはUI表示とEventBus通知のみに専念
EventBus統合は完成: 設定変更は全てEventBus経由で通知
BrushSettingsが適切に購読: brush-settings.jsが設定変更を正しく購読
二重実装は確認されず: 設定値の管理はBrushSettingsに一元化

⚠️ 発見された問題点
🔴 重大な問題
1. DrawingEngineがEventBusを購読していない
javascript// drawing-engine.js L12-20
if (window.TegakiDrawing) {
  this.settings = window.TegakiDrawing.BrushSettings ? 
    new window.TegakiDrawing.BrushSettings(config, eventBus) : null;
  // ...
}
```

**問題**: `DrawingEngine`自体はEventBusから設定変更を購読していません。`BrushSettings`が購読しているだけです。

**影響**: 筆圧補正の変更が`PressureHandler`に伝わらない可能性があります。

### 2. **PressureHandlerへの設定適用が不完全**

`pressure-handler.js`は筆圧を取得するだけで、`BrushSettings`の`pressureCorrection`や`pressureCurve`を適用する責務が不明確です。

**現状の処理フロー**:
```
settings-popup.js → EventBus → brush-settings.js
                                      ↓
                                 (適用されない?)
                                      ↓
                              pressure-handler.js
🟡 中程度の問題
3. スライダーの実装が二重化
settings-popup.js:
javascript// L175-254: 独自のスライダー実装
setupPressureCorrectionListener() { ... }
setupSmoothingListener() { ... }
ui-panels.js:
javascript// L272-312: 別のスライダー実装
createSlider: function(sliderId, min, max, initial, callback) { ... }
問題: 2つの異なるスライダー実装が存在し、コードが重複しています。
4. CoreRuntime APIの不足
core-runtime.jsには以下のAPIが存在しません:

api.setPressureCorrection(value)
api.setSmoothing(value)
api.setPressureCurve(curve)

現状: これらの設定はEventBus経由でのみ変更可能ですが、CoreRuntime.apiから直接呼び出せる方が統一感があります。
5. 設定の永続化が分散
javascript// settings-popup.js L235-244
saveSettings(partial) {
  const stored = localStorage.getItem('tegaki_settings');
  // ...
  localStorage.setItem('tegaki_settings', JSON.stringify(updated));
}
問題: localStorageへの保存がsettings-popup.jsにハードコードされており、将来config.jsとの連携時に競合する可能性があります。
🟢 軽微な問題
6. BrushSettingsのコンストラクタで初期値読み込みが不完全
javascript// brush-settings.js L13-14
this.pressureCorrection = this.config.userSettings?.pressureCorrection || 1.0;
this.pressureCurve = this.config.userSettings?.pressureCurve || 'linear';
問題: config.jsにuserSettingsの定義がないため、常にデフォルト値が使用されます。
📝 改善提案
🔧 提案1: DrawingEngineでEventBusを完全統合
javascript// drawing-engine.js
constructor(cameraSystem, layerManager, eventBus, config) {
  // ... 既存のコード ...
  
  // 🆕 EventBus購読
  this.subscribeToSettings();
}

subscribeToSettings() {
  if (!this.eventBus) return;
  
  // 筆圧補正の変更を購読
  this.eventBus.on('settings:pressure-correction', ({ value }) => {
    if (this.pressureHandler && this.settings) {
      // PressureHandlerに適用するロジック
      this.pressureHandler.pressureCorrection = value;
    }
  });
  
  // 線補正の変更を購読
  this.eventBus.on('settings:smoothing', ({ value }) => {
    if (this.settings) {
      this.settings.setSmoothing(value);
    }
  });
  
  // 筆圧カーブの変更を購読
  this.eventBus.on('settings:pressure-curve', ({ curve }) => {
    if (this.settings) {
      this.settings.setPressureCurve(curve);
    }
  });
}
🔧 提案2: スライダーを統一化
ui-panels.jsのcreateSliderを共通関数として抽出し、settings-popup.jsでも使用:
javascript// 新規ファイル: ui/slider-utils.js
window.TegakiUI.SliderUtils = {
  createSlider(container, options) {
    const { min, max, initial, onChange, onCommit } = options;
    // 統一されたスライダー実装
  }
};
🔧 提案3: CoreRuntime APIの追加
javascript// core-runtime.js の api セクションに追加
api: {
  // ... 既存のメソッド ...
  
  setPressureCorrection(value) {
    if (CoreRuntime.internal.drawingEngine?.settings) {
      CoreRuntime.internal.drawingEngine.settings.setPressureCorrection(value);
      return true;
    }
    return false;
  },
  
  setSmoothing(value) {
    if (CoreRuntime.internal.drawingEngine?.settings) {
      CoreRuntime.internal.drawingEngine.settings.setSmoothing(value);
      return true;
    }
    return false;
  },
  
  setPressureCurve(curve) {
    if (CoreRuntime.internal.drawingEngine?.settings) {
      CoreRuntime.internal.drawingEngine.settings.setPressureCurve(curve);
      return true;
    }
    return false;
  }
}
🔧 提案4: 設定管理を一元化
javascript// 新規ファイル: system/settings-manager.js
window.TegakiSettingsManager = class {
  constructor(eventBus) {
    this.eventBus = eventBus;
    this.settings = this.loadFromStorage();
    this.subscribeToChanges();
  }
  
  loadFromStorage() {
    const stored = localStorage.getItem('tegaki_settings');
    return stored ? JSON.parse(stored) : this.getDefaults();
  }
  
  getDefaults() {
    return {
      pressureCorrection: 1.0,
      smoothing: 0.5,
      pressureCurve: 'linear',
      statusPanelVisible: true
    };
  }
  
  updateSetting(key, value) {
    this.settings[key] = value;
    this.saveToStorage();
    this.eventBus.emit(`settings:${this.kebabCase(key)}`, { value });
  }
  
  saveToStorage() {
    localStorage.setItem('tegaki_settings', JSON.stringify(this.settings));
  }
  
  subscribeToChanges() {
    // config.js からの変更も購読可能に
  }
};
📊 優先度別タスク
🔴 最優先（動作に影響）

DrawingEngineでEventBus購読を追加 - 筆圧補正が機能していない可能性
PressureHandlerへの設定適用フローを明確化

🟡 中優先（保守性・拡張性）

CoreRuntime APIの追加 - 統一されたAPI提供
設定管理の一元化 - SettingsManagerの導入
スライダーの統一 - コード重複削減

🟢 低優先（将来対応）

config.jsとの連携強化 - キーコンフィグ設定の統合準備
UIテーマ設定の追加 - 色やフォントのカスタマイズ