# Tool Size Popup 統合実装計画書

## 🔍 現状調査結果

### 問題の核心
1. **ui-panels.js に `showToolSizePopup()` メソッドが存在しない**
2. **`handleToolClick()` 内でペン/消しゴムクリック時にポップアップ呼び出しが実装されていない**
3. **`toolbarIconClickMode` は実装済みだが、実際に使われていない**

### 既存の実装状況

#### ✅ 実装済み
- `window.ToolSizePopup` クラス（tool-size-popup.js）
- BrushSettings との統合
- スロット/スライダー機能
- `toolbarIconClickMode` フラグ（ui-panels.js）
- `config.js` に toolSizePopup 設定（**不在**）

#### ❌ 未実装
- ui-panels.js の `showToolSizePopup(tool)` メソッド
- ui-panels.js の `closeToolSizePopup()` メソッド
- `handleToolClick()` 内のポップアップ表示ロジック
- config.js の `toolSizePopup` 設定

---

## 📦 グローバルシンボル一覧

### Config (config.js)
```javascript
window.TEGAKI_CONFIG = {
  pen: { size: 10, opacity: 0.85 },
  eraser: { size: 20, opacity: 1.0 },
  tools: {
    pen: { defaultSize: 10, defaultOpacity: 0.85 },
    eraser: { defaultSize: 20, defaultOpacity: 1.0 }
  },
  sizeSlots: {
    pen: [2, 4, 6, 8, 12, 16, 24, 36, 50],
    eraser: [10, 15, 20, 30, 40, 50, 60, 80, 100]
  },
  // ⚠️ 不在: toolSizePopup 設定
}
```

### EventBus (system/event-bus.js)
```javascript
class EventBus {
  on(eventName, callback)
  emit(eventName, data)
  off(eventName, callback)
}

// グローバルインスタンス
window.TegakiEventBus
```

### BrushSettings (system/drawing/brush-settings.js)
```javascript
class BrushSettings {
  setBrushSize(size)
  setBrushOpacity(opacity)
  getBrushSize()
  getBrushOpacity()
}

// 取得パス
window.drawingApp?.drawingEngine?.settings
window.coreEngine?.drawingEngine?.settings
window.CoreRuntime?.internal?.drawingEngine?.settings
```

### DrawingEngine (system/drawing/drawing-engine.js)
```javascript
class DrawingEngine {
  settings: BrushSettings
  setTool(tool) // 'pen' | 'eraser'
  setBrushSize(size)
  getCurrentTool()
}
```

### UIController (ui/ui-panels.js)
```javascript
class UIController {
  toolbarIconClickMode: boolean
  
  // ✅ 実装済み
  handleToolClick(button)
  updateToolUI(tool)
  showPopup(popup)
  closeAllPopups(exceptPopup)
  
  // ❌ 未実装
  showToolSizePopup(tool)
  closeToolSizePopup()
}

window.TegakiUI.UIController
window.TegakiUI.uiController // シングルトン
```

### ToolSizePopup (ui/tool-size-popup.js)
```javascript
const ToolSizePopup = {
  show(tool)       // ポップアップ表示
  hide()           // ポップアップ非表示
  isVisible()      // 表示状態確認
  forceShow(tool)  // デバッグ用強制表示
  getDebugInfo()   // デバッグ情報取得
}

window.ToolSizePopup
```

---

## 🔄 理想的なフロー

### ショートカット（P/E）
```
1. KeyboardHandler が 'KeyP' 検出
2. EventBus.emit('ui:tool-changed', { tool: 'pen' })
3. CoreRuntime が受信、drawingEngine.setTool('pen')
4. DrawingEngine.setTool('pen')
   - this.currentTool = 'pen'
   - EventBus.emit('toolChanged', { tool: 'pen' })
5. UIController.updateToolUI('pen')
   - ボタンのアクティブ状態更新
   - toolbarIconClickMode = false → ポップアップ表示なし
```

### アイコンクリック
```
1. ユーザーがペンアイコンをクリック
2. UIController.setupEventDelegation() が click イベントキャッチ
3. toolbarIconClickMode = true 設定
4. UIController.handleToolClick(button)
   ├─ 'pen-tool' の場合
   │  ├─ CoreRuntime.api.setTool('pen')
   │  ├─ if (toolbarIconClickMode)
   │  │   └─ showToolSizePopup('pen') // 🆕 ポップアップ表示
   │  └─ updateToolUI('pen')
   └─ toolbarIconClickMode = false にリセット
```

---

## 🚀 最小限の改修内容

### 1. config.js に追加
```javascript
toolSizePopup: {
  slots: [1, 3, 5, 10, 30, 100],
  sliderMin: 0.1,
  sliderMax: 500,
  dotMinSize: 4,
  dotMaxSize: 20
}
```

### 2. ui-panels.js に追加（2メソッド）
```javascript
/**
 * ToolSizePopup を表示
 */
showToolSizePopup(tool) {
  if (!window.ToolSizePopup) {
    console.error('[UIController] ToolSizePopup not found');
    return;
  }
  
  this.closeAllPopups();
  window.ToolSizePopup.show(tool);
  this.activePopup = 'toolSizePopup';
}

/**
 * ToolSizePopup を閉じる
 */
closeToolSizePopup() {
  if (window.ToolSizePopup && window.ToolSizePopup.isVisible()) {
    window.ToolSizePopup.hide();
  }
}
```

### 3. ui-panels.js の handleToolClick() 改修
```javascript
'pen-tool': () => {
  if (!window.CoreRuntime.api.setTool('pen')) return;
  window.CoreRuntime.api.exitLayerMoveMode();
  
  // 🆕 アイコンクリック時のみポップアップ表示
  if (this.toolbarIconClickMode) {
    this.showToolSizePopup('pen');
  } else {
    this.togglePopup('pen-settings'); // 従来のレガシーポップアップ
  }
  
  this.updateToolUI('pen');
},

'eraser-tool': () => {
  if (!window.CoreRuntime.api.setTool('eraser')) return;
  window.CoreRuntime.api.exitLayerMoveMode();
  
  // 🆕 アイコンクリック時のみポップアップ表示
  if (this.toolbarIconClickMode) {
    this.showToolSizePopup('eraser');
  }
  
  this.closeAllPopups();
  this.updateToolUI('eraser');
}
```

### 4. ui-panels.js の closeAllPopups() 改修
```javascript
closeAllPopups(exceptPopup = null) {
  // ... 既存のポップアップ処理 ...
  
  // 🆕 ToolSizePopup も閉じる
  if (exceptPopup !== 'toolSizePopup') {
    this.closeToolSizePopup();
  }
  
  this.activePopup = null;
}
```

---

## 🎨 CSS 要件（既存 styles/main.css で実装済み）

- `.tool-size-popup-panel`
- `.slots-container`
- `.slot-item`, `.slot-item.active`
- `.slot-dot`, `.slot-number`
- `.size-slider-container`
- `.slider-step-btn`
- `.size-slider`, `.size-value-input`

---

## ✅ 改修チェックリスト

- [x] tool-size-popup.js 実装済み
- [ ] **config.js に `toolSizePopup` 設定追加**
- [ ] **ui-panels.js に `showToolSizePopup()` 追加**
- [ ] **ui-panels.js に `closeToolSizePopup()` 追加**
- [ ] **ui-panels.js の `handleToolClick()` 改修**
- [ ] **ui-panels.js の `closeAllPopups()` 改修**
- [x] CSS スタイル実装済み
- [x] EventBus 統合済み
- [x] BrushSettings 統合済み

---

## 🧪 テスト手順

1. **ショートカット P/E**: ポップアップ表示なし
2. **ペンアイコンクリック**: ToolSizePopup 表示
3. **消しゴムアイコンクリック**: ToolSizePopup 表示
4. **スロットクリック**: サイズ反映 + アクティブ状態変更
5. **スライダー操作**: サイズ反映 + アクティブスロット解除
6. **◀▶ボタン**: テーパリング刻み幅で増減
7. **ペン ⇔ 消しゴム切り替え**: 各ツールのサイズ保持

---

## 🔧 デバッグコマンド

```javascript
// ポップアップ強制表示
window.ToolSizePopup.forceShow('pen')

// デバッグ情報取得
window.ToolSizePopup.getDebugInfo()

// BrushSettings 確認
window.CoreRuntime.internal.drawingEngine.settings.getBrushSize()
```