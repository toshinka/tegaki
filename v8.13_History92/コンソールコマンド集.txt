// ===== P/E+ドラッグ機能 デバッグコマンド =====
// ブラウザのコンソールで実行してください

// 1. 初期化状態の確認
console.log('=== 初期化状態チェック ===');
console.log('EventBus:', !!window.TegakiEventBus);
console.log('ToolSizeManager:', !!window.toolSizeManager);
console.log('DragVisualFeedback:', !!window.dragVisualFeedback);
console.log('KeyboardHandler initialized:', !!window.KeyboardHandler._isInitialized);
console.log('DrawingEngine:', !!window.drawingApp?.drawingEngine);
console.log('CoreEngine:', !!window.coreEngine);

// 2. BrushSettings存在確認
console.log('\n=== BrushSettings確認 ===');
console.log('TegakiDrawing:', window.TegakiDrawing);
console.log('TegakiDrawing.BrushSettings:', window.TegakiDrawing?.BrushSettings);

const drawingEngine = window.drawingApp?.drawingEngine || window.coreEngine?.drawingEngine;
console.log('drawingEngine:', drawingEngine);
console.log('drawingEngine.settings:', drawingEngine?.settings);

if (drawingEngine?.settings) {
    console.log('✅ BrushSettings found!');
    console.log('  - getCurrentSettings():', drawingEngine.settings.getCurrentSettings());
} else {
    console.log('❌ BrushSettings NOT found');
}

// 3. ToolSizeManager状態確認
console.log('\n=== ToolSizeManager状態 ===');
if (window.toolSizeManager) {
    console.log('✅ ToolSizeManager exists');
    console.log('Debug info:', window.toolSizeManager.getDebugInfo());
    console.log('BrushSettings linked:', !!window.toolSizeManager.brushSettings);
} else {
    console.log('❌ ToolSizeManager NOT found');
}

// 4. KeyboardHandler状態確認
console.log('\n=== KeyboardHandler状態 ===');
if (window.KeyboardHandler) {
    console.log('✅ KeyboardHandler exists');
    console.log('Debug state:', window.KeyboardHandler.getDebugState());
} else {
    console.log('❌ KeyboardHandler NOT found');
}

// 5. DragVisualFeedback確認
console.log('\n=== DragVisualFeedback確認 ===');
if (window.dragVisualFeedback) {
    console.log('✅ DragVisualFeedback exists');
    console.log('isActive:', window.dragVisualFeedback.isActive);
    console.log('container:', window.dragVisualFeedback.container);
} else {
    console.log('❌ DragVisualFeedback NOT found');
}

// 6. イベントリスナーテスト（手動でイベント発行）
console.log('\n=== イベントリスナーテスト ===');
if (window.TegakiEventBus) {
    console.log('Testing event emission...');
    
    // テストイベント発行
    window.TegakiEventBus.emit('tool:drag-size-start', {
        tool: 'pen',
        startSize: 10,
        startOpacity: 0.85
    });
    
    console.log('✅ Test event emitted: tool:drag-size-start');
    console.log('Check if ToolSizeManager received it (should see log above)');
}

// 7. Config確認
console.log('\n=== Config確認 ===');
console.log('TEGAKI_CONFIG.tools:', window.TEGAKI_CONFIG?.tools);
console.log('TEGAKI_CONFIG.sizeSlots:', window.TEGAKI_CONFIG?.sizeSlots);
console.log('TEGAKI_CONFIG.dragAdjustment:', window.TEGAKI_CONFIG?.dragAdjustment);

// 8. 完全診断
console.log('\n=== 完全診断 ===');
const diagnosis = {
    eventBus: !!window.TegakiEventBus,
    toolSizeManager: !!window.toolSizeManager,
    dragVisualFeedback: !!window.dragVisualFeedback,
    keyboardHandler: !!window.KeyboardHandler._isInitialized,
    drawingEngine: !!drawingEngine,
    brushSettings: !!drawingEngine?.settings,
    config: {
        tools: !!window.TEGAKI_CONFIG?.tools,
        sizeSlots: !!window.TEGAKI_CONFIG?.sizeSlots,
        dragAdjustment: !!window.TEGAKI_CONFIG?.dragAdjustment
    }
};

const allOK = Object.values(diagnosis).every(v => {
    if (typeof v === 'object') {
        return Object.values(v).every(x => x === true);
    }
    return v === true;
});

if (allOK) {
    console.log('✅✅✅ 全てのコンポーネントが正常に初期化されています！');
    console.log('Pキーを押しながらマウスをドラッグしてみてください。');
} else {
    console.log('❌ 問題が見つかりました:');
    console.log(diagnosis);
}

// ===== 追加のデバッグ関数 =====

// BrushSettings手動更新テスト
window.testBrushSettingsUpdate = function() {
    const drawingEngine = window.drawingApp?.drawingEngine || window.coreEngine?.drawingEngine;
    if (!drawingEngine?.settings) {
        console.error('❌ BrushSettings not found');
        return;
    }
    
    console.log('Testing BrushSettings update...');
    console.log('Before:', drawingEngine.settings.getCurrentSettings());
    
    drawingEngine.settings.setBrushSize(20);
    drawingEngine.settings.setBrushOpacity(0.5);
    
    console.log('After:', drawingEngine.settings.getCurrentSettings());
    console.log('✅ BrushSettings update test completed');
};

// ドラッグイベント手動発火テスト
window.testDragEvents = function() {
    if (!window.TegakiEventBus) {
        console.error('❌ EventBus not found');
        return;
    }
    
    console.log('Testing drag events...');
    
    // ドラッグ開始
    window.TegakiEventBus.emit('tool:drag-size-start', {
        tool: 'pen',
        startSize: 10,
        startOpacity: 0.85
    });
    console.log('✅ Emitted: drag-size-start');
    
    // ドラッグ更新（複数回）
    setTimeout(() => {
        window.TegakiEventBus.emit('tool:drag-size-update', {
            tool: 'pen',
            deltaX: 50,
            deltaY: -20
        });
        console.log('✅ Emitted: drag-size-update (deltaX:50, deltaY:-20)');
    }, 100);
    
    setTimeout(() => {
        window.TegakiEventBus.emit('tool:drag-size-update', {
            tool: 'pen',
            deltaX: 100,
            deltaY: -40
        });
        console.log('✅ Emitted: drag-size-update (deltaX:100, deltaY:-40)');
    }, 200);
    
    // ドラッグ終了
    setTimeout(() => {
        window.TegakiEventBus.emit('tool:drag-size-end');
        console.log('✅ Emitted: drag-size-end');
        
        // 最終状態確認
        if (window.toolSizeManager) {
            console.log('Final state:', window.toolSizeManager.getDebugInfo());
        }
    }, 300);
};

console.log('\n=== デバッグ関数 ===');
console.log('testBrushSettingsUpdate() - BrushSettings更新テスト');
console.log('testDragEvents() - ドラッグイベント手動テスト');