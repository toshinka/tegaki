 ✅ config.js (P/E+ドラッグ機能対応版) loaded
    🆕 tools: ペン/消しゴムのデフォルト設定追加
    🆕 sizeSlots: サイズスロット設定追加
    🆕 dragAdjustment: ドラッグ調整感度設定追加
    🆕 dragAdjustment.visual: 視覚フィードバック設定追加
 🧭 CoordinateSystem: システム統合改修版 初期化
 ✅ coordinate-system.js loaded (システム統合改修版)
 🔧 改修完了項目:
   🆕 applyLayerTransform(): 統一レイヤー変形API
   🆕 normalizeTransform(): 変形データ正規化
   🆕 combineTransforms(): 変形合成
   🆕 screenToWorld/worldToScreen(): キャッシュ対応座標変換
   🆕 localToWorld/worldToLocal(): レイヤー座標変換
   🆕 getLayerBounds(): 統一境界取得
   🆕 distance/angle/normalizeAngle(): 数学関数統合
   🆕 normalizeVector/dotProduct/crossProduct(): ベクトル計算
   🆕 diagnoseReferences(): システム統合診断
   🆕 runTransformTests(): 座標変換テスト
   🆕 runPerformanceTest(): パフォーマンス測定
   🔧 EventBus完全統合・キャッシュシステム
   🔧 LayerSystem/CameraSystem/AnimationSystem参照統合
   🔧 座標系混在問題・API断片化解消
   ✅ PixiJS v8.13 完全対応
   ✅ システム間連携強化
 ✅ data-models.js (Phase 2: meshVertices対応) loaded
 ✅ system/event-bus.js loaded
 ✅ batch-api.js (Phase 6: History統合版) loaded
 ✅ system/settings-manager.js loaded
    - 責務: 設定の永続化・デフォルト管理
    - SOLID原則準拠: 単一責任
    - EventBus統合: 設定変更の購読と通知
 ✅ camera-system.js (Phase 4.2: 拡縮上下修正版) loaded successfully
    - 🔥 Space+Shift+ドラッグ: 上=拡大、下=縮小に修正
    - 🔥 Space+Shift+↑: 拡大、Space+Shift+↓: 縮小に修正
 ✅ layer-transform.js loaded
 ✅ layer-system.js (GPT5案修正完全版) loaded
 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
    - ✅ CTRL+V behavior: overwrite active layer
    - ✅ Commit events: paste:commit, operation:commit
drawing-clipboard.js:606    - ✅ Thumbnail auto-update on paste
history.js:179 ✅ history.js (Phase 2: EventBus修正版) loaded
animation-system.js:1428 ✅ animation-system.js (Phase 4.1: CUT自動採番対応版) loaded
brush-settings.js:291 🔧 [BrushSettings] Starting registration...
brush-settings.js:296 ✅ [BrushSettings] Created window.TegakiDrawing namespace
brush-settings.js:309 ✅ [BrushSettings] Registered successfully:
brush-settings.js:310    - window.TegakiDrawing.BrushSettings: true
brush-settings.js:311    - window.BrushSettings: true
brush-settings.js:312    - globalThis.BrushSettings: true
brush-settings.js:314 ✅ brush-settings.js loaded completely
export-manager.js:259 ✅ export-manager.js loaded
png-exporter.js:85 ✅ png-exporter.js (単一フレーム専用・プレビュー対応) loaded
apng-exporter.js:236 ✅ apng-exporter.js (PixiJS v8.13完全対応版) loaded
gif-exporter.js:300 ✅ gif-exporter.js (PixiJS v8.13完全対応版) loaded
slider-utils.js:197 ✅ ui/slider-utils.js loaded
slider-utils.js:198    - 責務: スライダーUIの統一実装
slider-utils.js:199    - DRY原則: settings-popup.js と ui-panels.js で共有
slider-utils.js:200    - API: createSlider() / createSimpleSlider()
drag-visual-feedback.js:150 ✅ ui/drag-visual-feedback.js (統合修正版) loaded
timeline-ui.js:977 ✅ timeline-ui.js (Phase 5.2: キー処理一元化版) loaded
timeline-ui.js:978    - 🔥 setupKeyboardShortcuts()を削除（キー処理はUnifiedKeyHandlerに一元化）
timeline-ui.js:979    - 🔥 goToPreviousCutSafe()とgoToNextCutSafe()はpublicメソッドとして維持
timeline-ui.js:980    - 🔥 togglePlayStop()もpublicメソッドとして維持
core-initializer.js:451 ✅ core-initializer.js loaded
core-runtime.js:757 ✅ core-runtime.js v2.1 loaded
core-runtime.js:758   ✅ Phase 12: PixiJS EventSystem統合
core-runtime.js:759   ✅ FederatedPointerEvent対応
core-runtime.js:760   ✅ stage.eventMode設定
core-runtime.js:761   ✅ 🆕 v2.1: 設定関連API追加
core-runtime.js:762      - setPressureCorrection()
core-runtime.js:763      - setSmoothing()
core-runtime.js:764      - setPressureCurve()
core-runtime.js:765      - getSettings()
core-runtime.js:766      - updateSettings()
core-runtime.js:767      - resetSettings()
core-runtime.js:768      - getSettingsManager()
core-runtime.js:769   ✅ window.startTegakiApp() registered
core-runtime.js:770   ✅ APNGExporter登録対応
core-runtime.js:771   ✅ 既存機能完全維持
core-engine.js:850 ✅ core-engine.js (GPT5案修正完全版) loaded
coordinate-system.js:63 🔗 CoordinateSystem EventBus integration configured
coordinate-system.js:47 ✅ CoordinateSystem initialized with canvas: 344x135
coordinate-system.js:757 🔄 CoordinateSystem auto-initialized
index.html:78 🚀 Starting application with P/E+Drag feature...
index.html:84 📦 Checking dependencies...
index.html:85   PIXI: true
index.html:86   TegakiDrawing: true
index.html:87   BrushSettings: true
index.html:88   ToolSizeManager: true
index.html:89   KeyboardHandler: true
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
coordinate-system.js:75 🔗 CameraSystem reference set in CoordinateSystem
coordinate-system.js:70 🔗 LayerSystem reference set in CoordinateSystem
coordinate-system.js:80 🔗 AnimationSystem reference set in CoordinateSystem
core-runtime.js:51 === CoreRuntime Phase 12: PixiJS EventSystem統合版 初期化開始 ===
core-runtime.js:179 ✅ CUT作成: CUT1 (344x135)
core-runtime.js:207 🔄 CUT切替: CUT1
core-runtime.js:101 ✅ PixiJS EventSystem設定完了
core-runtime.js:68 ✅ CoreRuntime 初期化完了（Phase 12対応）
index.html:97 ✅ Application ready!
index.html:98 📝 Usage:
index.html:99   - Press P + drag: Adjust pen size/opacity
index.html:100   - Press E + drag: Adjust eraser size/opacity
index.html:101   - Drag Left/Right: Change size
index.html:102   - Drag Up/Down: Change opacity
core-runtime.js:665 ✅ ExportSystem initialized (PNG/APNG/GIF/WebP)
// ブラウザコンソールで実行するデバッグスクリプト

console.log('=== P/E+Drag Debug Check ===');

// 1. 必須コンポーネントの存在確認
console.log('1. Components Check:');
console.log('  KeyboardHandler:', !!window.KeyboardHandler);
console.log('  KeyboardHandler._isInitialized:', window.KeyboardHandler?._isInitialized);
console.log('  ToolSizeManager:', !!window.toolSizeManager);
console.log('  DragVisualFeedback:', !!window.dragVisualFeedback);
console.log('  TegakiEventBus:', !!window.TegakiEventBus);

// 2. DrawingEngine と BrushSettings の確認
console.log('\n2. DrawingEngine & BrushSettings:');
const de1 = window.drawingApp?.drawingEngine;
const de2 = window.coreEngine?.drawingEngine;
const de3 = window.coreEngine?.getDrawingEngine?.();
console.log('  drawingApp.drawingEngine:', !!de1);
console.log('  coreEngine.drawingEngine:', !!de2);
console.log('  coreEngine.getDrawingEngine():', !!de3);
console.log('  settings (de1):', !!de1?.settings);
console.log('  settings (de2):', !!de2?.settings);
console.log('  settings (de3):', !!de3?.settings);

// 3. ToolSizeManager の状態確認
console.log('\n3. ToolSizeManager State:');
if (window.toolSizeManager) {
  console.log('  brushSettings linked:', !!window.toolSizeManager.brushSettings);
  console.log('  penSize:', window.toolSizeManager.penSize);
  console.log('  penOpacity:', window.toolSizeManager.penOpacity);
  console.log('  dragState:', window.toolSizeManager.dragState);
}

// 4. KeyboardHandler の状態確認
console.log('\n4. KeyboardHandler State:');
if (window.KeyboardHandler?.getDebugState) {
  const state = window.KeyboardHandler.getDebugState();
  console.log('  Debug state:', state);
}

// 5. EventBus のリスナー確認
console.log('\n5. EventBus Listeners:');
if (window.TegakiEventBus?._listeners) {
  const listeners = window.TegakiEventBus._listeners;
  console.log('  tool:drag-size-start:', listeners['tool:drag-size-start']?.length || 0);
  console.log('  tool:drag-size-update:', listeners['tool:drag-size-update']?.length || 0);
  console.log('  tool:drag-size-end:', listeners['tool:drag-size-end']?.length || 0);
  console.log('  tool:size-opacity-changed:', listeners['tool:size-opacity-changed']?.length || 0);
  console.log('  brush:initialized:', listeners['brush:initialized']?.length || 0);
}

// 6. イベント発火テスト
console.log('\n6. Event Test:');
console.log('Emitting test event: tool:drag-size-start');
if (window.TegakiEventBus) {
  window.TegakiEventBus.emit('tool:drag-size-start', {
    tool: 'pen',
    startSize: 10,
    startOpacity: 1.0
  });
  console.log('  Event emitted, check if ToolSizeManager received it');
}

// 7. 手動でBrushSettings取得を試行
console.log('\n7. Manual BrushSettings Test:');
function testGetBrushSettings() {
  const candidates = [
    window.drawingApp?.drawingEngine,
    window.coreEngine?.drawingEngine,
    window.coreEngine?.getDrawingEngine?.()
  ];
  
  for (let i = 0; i < candidates.length; i++) {
    const de = candidates[i];
    if (de?.settings) {
      console.log(`  Found at candidate ${i}:`, de.settings);
      console.log('    getBrushSize:', typeof de.settings.getBrushSize);
      console.log('    setBrushSize:', typeof de.settings.setBrushSize);
      console.log('    current size:', de.settings.getBrushSize?.() || de.settings.size);
      return de.settings;
    }
  }
  console.log('  BrushSettings not found');
  return null;
}

const bs = testGetBrushSettings();

console.log('\n=== End Debug Check ===');
console.log('\n💡 Next Steps:');
console.log('1. Press P key and check console');
console.log('2. While holding P, drag mouse and check console');
console.log('3. Check if any events are logged');
VM880:3 === P/E+Drag Debug Check ===
VM880:6 1. Components Check:
VM880:7   KeyboardHandler: true
VM880:8   KeyboardHandler._isInitialized: true
VM880:9   ToolSizeManager: true
VM880:10   DragVisualFeedback: true
VM880:11   TegakiEventBus: true
VM880:14 
2. DrawingEngine & BrushSettings:
VM880:18   drawingApp.drawingEngine: true
VM880:19   coreEngine.drawingEngine: true
VM880:20   coreEngine.getDrawingEngine(): true
VM880:21   settings (de1): false
VM880:22   settings (de2): false
VM880:23   settings (de3): false
VM880:26 
3. ToolSizeManager State:
VM880:28   brushSettings linked: false
VM880:29   penSize: 6
VM880:30   penOpacity: 1
VM880:31   dragState: null
VM880:35 
4. KeyboardHandler State:
VM880:38   Debug state: {pKeyPressed: false, eKeyPressed: false, isDragging: false, activeTool: null, isInitialized: true, …}
VM880:42 
5. EventBus Listeners:
VM880:53 
6. Event Test:
VM880:54 Emitting test event: tool:drag-size-start
VM880:61   Event emitted, check if ToolSizeManager received it
VM880:65 
7. Manual BrushSettings Test:
VM880:83   BrushSettings not found
VM880:89 
=== End Debug Check ===
VM880:90 
💡 Next Steps:
VM880:91 1. Press P key and check console
VM880:92 2. While holding P, drag mouse and check console
VM880:93 3. Check if any events are logged
undefined
