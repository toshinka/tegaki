# P/E+ドラッグ機能 実装ガイド

## 概要

ペン（P）または消しゴム（E）キーを押しながらマウスドラッグすることで、サイズと透明度をリアルタイムに調整できる機能です。

### 操作方法
- **Pキー押しっぱなし + ドラッグ**: ペンのサイズ・透明度調整
  - 左右ドラッグ: サイズ変更
  - 上下ドラッグ: 透明度変更（下方向で透明度UP）
- **Eキー押しっぱなし + ドラッグ**: 消しゴムのサイズ・透明度調整
  - 左右ドラッグ: サイズ変更
  - 上下ドラッグ: 透明度変更（下方向で透明度UP）

## アーキテクチャ

### DRY/SOLID原則に基づく設計

```
┌─────────────────────────────────────────────────────┐
│                   config.js                         │
│  - sizeSlots設定（1-9のプリセット）                 │
│  - dragAdjustment感度設定                            │
└─────────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────┐
│            system/tool-size-manager.js              │
│  【責務】ツールサイズ・透明度の一元管理              │
│  - サイズスロット管理（1-9）                         │
│  - P/E+ドラッグ時の計算処理                          │
│  - BrushSettings更新                                │
│  - EventBus統合                                     │
└─────────────────────────────────────────────────────┘
          │                                    │
          │ EventBus                           │ 直接呼び出し
          ▼                                    ▼
┌──────────────────────┐        ┌──────────────────────┐
│ ui/keyboard-handler.js│        │ BrushSettings        │
│ - P/Eキー検出         │        │ - setBrushSize()     │
│ - ドラッグイベント    │        │ - setBrushOpacity()  │
│ - EventBus発行        │        └──────────────────────┘
└──────────────────────┘
```

### 責務分担

#### 1. `config.js`
- **責務**: 設定値の定義
- **内容**:
  ```javascript
  sizeSlots: {
    pen: [2, 4, 6, 8, 12, 16, 24, 36, 50],
    eraser: [10, 15, 20, 30, 40, 50, 60, 80, 100]
  },
  dragAdjustment: {
    size: { sensitivity: 0.1, min: 0.1, max: 100 },
    opacity: { sensitivity: 0.005, min: 0.0, max: 1.0 }
  }
  ```

#### 2. `system/tool-size-manager.js`
- **責務**: サイズ・透明度管理の単一責任
- **機能**:
  - サイズスロット管理（将来の1-9キー対応）
  - ドラッグ時のサイズ・透明度計算
  - BrushSettingsへの反映
  - EventBus統合
- **API**:
  ```javascript
  // イベント購読
  eventBus.on('tool:drag-size-start', ({ tool, startSize, startOpacity }))
  eventBus.on('tool:drag-size-update', ({ tool, deltaX, deltaY }))
  eventBus.on('tool:drag-size-end', ())
  
  // イベント発行
  eventBus.emit('tool:size-opacity-changed', { tool, size, opacity })
  eventBus.emit('tool:size-drag-completed', { tool, finalSize, finalOpacity })
  ```

#### 3. `ui/keyboard-handler.js`
- **責務**: キー入力とマウスイベントの検出
- **機能**:
  - P/Eキー押しっぱなし検出
  - マウスドラッグイベントの捕捉
  - ToolSizeManagerへのイベント委譲
- **実装**: ツール切り替えも兼ねる（Pキー単押しでペン、Eキー単押しで消しゴム）

## ファイル構成

```
tegaki/
├── config.js                        # 設定追加
├── system/
│   └── tool-size-manager.js         # 新規作成
└── ui/
    └── keyboard-handler.js          # 修正
```

## 初期化手順

### 1. HTMLでの読み込み順序

```html
<!-- 依存関係に注意して読み込む -->
<script src="config.js"></script>
<script src="system/event-bus.js"></script>
<script src="system/tool-size-manager.js"></script>
<script src="ui/keyboard-handler.js"></script>
```

### 2. 初期化コード（core-initializer.js等に追加）

```javascript
// EventBus初期化
window.TegakiEventBus = new window.TegakiEventBusClass();

// ToolSizeManager初期化
window.toolSizeManager = new window.ToolSizeManager(
    window.TEGAKI_CONFIG,
    window.TegakiEventBus
);

// KeyboardHandler初期化
window.KeyboardHandler.init();
```

### 3. DrawingEngineとの統合

```javascript
// DrawingEngine初期化後に同期
const drawingEngine = window.drawingApp?.drawingEngine;
if (drawingEngine && window.toolSizeManager) {
    // BrushSettingsの初期値を取得
    const brushSettings = drawingEngine.brushSettings;
    window.toolSizeManager.penSize = brushSettings.getBrushSize();
    window.toolSizeManager.penOpacity = brushSettings.getBrushOpacity();
}
```

## イベントフロー

### P+ドラッグの場合

```
1. ユーザーがPキーを押す
   └→ KeyboardHandler: pKeyPressed = true, activeDragTool = 'pen'
   
2. ユーザーがマウスをドラッグ
   └→ KeyboardHandler: handleMouseDown()
       └→ EventBus.emit('tool:drag-size-start', {...})
           └→ ToolSizeManager: handleDragStart()
               └→ dragState保存
   
3. ドラッグ中
   └→ KeyboardHandler: handleMouseMove()
       └→ EventBus.emit('tool:drag-size-update', { deltaX, deltaY })
           └→ ToolSizeManager: handleDragUpdate()
               ├→ サイズ・透明度を計算
               ├→ BrushSettings.setBrushSize()
               ├→ BrushSettings.setBrushOpacity()
               └→ EventBus.emit('tool:size-opacity-changed', {...})
   
4. マウスリリース
   └→ KeyboardHandler: handleMouseUp()
       └→ EventBus.emit('tool:drag-size-end')
           └→ ToolSizeManager: handleDragEnd()
               └→ EventBus.emit('tool:size-drag-completed', {...})
```

## 将来の拡張性

### 1. サイズスロット機能（1-9キー）

```javascript
// keyboard-handler.jsに追加
if (e.code.startsWith('Digit') && !e.ctrlKey && !e.shiftKey) {
    const slotNumber = parseInt(e.code.replace('Digit', ''));
    if (slotNumber >= 1 && slotNumber <= 9) {
        eventBus.emit('tool:select-size-slot', { slot: slotNumber });
    }
}
```

### 2. UI表示（サイズ・透明度スライダー）

```javascript
// tool:size-opacity-changedイベントを購読
eventBus.on('tool:size-opacity-changed', ({ tool, size, opacity }) => {
    // スライダーUI更新
    updateSizeSlider(size);
    updateOpacitySlider(opacity);
    
    // 数値表示更新
    document.getElementById('size-value').textContent = size.toFixed(1);
    document.getElementById('opacity-value').textContent = (opacity * 100).toFixed(0) + '%';
});
```

### 3. 設定の永続化

```javascript
// SettingsManagerとの統合
class ToolSizeManager {
    saveToConfig() {
        const settingsManager = window.settingsManager;
        if (settingsManager) {
            settingsManager.set('penSize', this.penSize);
            settingsManager.set('penOpacity', this.penOpacity);
            settingsManager.set('eraserSize', this.eraserSize);
            settingsManager.set('eraserOpacity', this.eraserOpacity);
            settingsManager.set('sizeSlots', this.sizeSlots);
        }
    }
}
```

## テスト方法

### 動作確認

1. Pキーを押しながらマウスドラッグ
   - 左右: ペンサイズが変わるか
   - 上下: ペンの透明度が変わるか

2. Eキーを押しながらマウスドラッグ
   - 左右: 消しゴムサイズが変わるか
   - 上下: 消しゴムの透明度が変わるか

3. コンソールでのテスト

```javascript
// ToolSizeManagerのテスト
testToolSizeManager();

// BrushSettingsとの同期確認
verifyBrushSettingsIntegration();

// デバッグ情報表示
console.log(window.toolSizeManager.getDebugInfo());
```

## トラブルシューティング

### 問題: ドラッグしてもサイズが変わらない

**確認事項**:
1. `window.toolSizeManager`が初期化されているか
2. `window.drawingApp.drawingEngine`が存在するか
3. EventBusが正しく初期化されているか

```javascript
// デバッグ
console.log('toolSizeManager:', window.toolSizeManager);
console.log('drawingEngine:', window.drawingApp?.drawingEngine);
console.log('eventBus:', window.TegakiEventBus);
```

### 問題: P/Eキーを押しても反応しない

**確認事項**:
1. `KeyboardHandler.init()`が呼ばれているか
2. 入力フィールドにフォーカスがないか
3. ブラウザのコンソールにエラーが出ていないか

```javascript
// デバッグ
console.log('KeyboardHandler initialized:', window.KeyboardHandler._isInitialized);
console.log('Active element:', document.activeElement);
```

## まとめ

この実装により:
- ✅ **単一責任**: ToolSizeManagerがサイズ管理を担当
- ✅ **依存性逆転**: EventBusを介した疎結合
- ✅ **開放閉鎖**: サイズスロット機能の追加が容易
- ✅ **DRY原則**: サイズ・透明度管理の一元化
- ✅ **可読性**: AIからの可視性が高い明確なAPI

将来的なペンサイズスロット機能やUI表示への拡張も容易です。