config.js:551 ✅ config.js (P/E+ドラッグ機能対応版) loaded
config.js:552    🆕 tools: ペン/消しゴムのデフォルト設定追加
config.js:553    🆕 sizeSlots: サイズスロット設定追加
config.js:554    🆕 dragAdjustment: ドラッグ調整感度設定追加
config.js:555    🆕 dragAdjustment.visual: 視覚フィードバック設定追加
coordinate-system.js:32 🧭 CoordinateSystem: システム統合改修版 初期化
coordinate-system.js:730 ✅ coordinate-system.js loaded (システム統合改修版)
coordinate-system.js:731 🔧 改修完了項目:
coordinate-system.js:732   🆕 applyLayerTransform(): 統一レイヤー変形API
coordinate-system.js:733   🆕 normalizeTransform(): 変形データ正規化
coordinate-system.js:734   🆕 combineTransforms(): 変形合成
coordinate-system.js:735   🆕 screenToWorld/worldToScreen(): キャッシュ対応座標変換
coordinate-system.js:736   🆕 localToWorld/worldToLocal(): レイヤー座標変換
coordinate-system.js:737   🆕 getLayerBounds(): 統一境界取得
coordinate-system.js:738   🆕 distance/angle/normalizeAngle(): 数学関数統合
coordinate-system.js:739   🆕 normalizeVector/dotProduct/crossProduct(): ベクトル計算
coordinate-system.js:740   🆕 diagnoseReferences(): システム統合診断
coordinate-system.js:741   🆕 runTransformTests(): 座標変換テスト
coordinate-system.js:742   🆕 runPerformanceTest(): パフォーマンス測定
coordinate-system.js:743   🔧 EventBus完全統合・キャッシュシステム
coordinate-system.js:744   🔧 LayerSystem/CameraSystem/AnimationSystem参照統合
coordinate-system.js:745   🔧 座標系混在問題・API断片化解消
coordinate-system.js:746   ✅ PixiJS v8.13 完全対応
coordinate-system.js:747   ✅ システム間連携強化
data-models.js:164 ✅ data-models.js (Phase 2: meshVertices対応) loaded
event-bus.js:171 ✅ system/event-bus.js loaded
batch-api.js:382 ✅ batch-api.js (Phase 6: History統合版) loaded
settings-manager.js:254 ✅ system/settings-manager.js loaded
settings-manager.js:255    - 責務: 設定の永続化・デフォルト管理
settings-manager.js:256    - SOLID原則準拠: 単一責任
settings-manager.js:257    - EventBus統合: 設定変更の購読と通知
camera-system.js:599 ✅ camera-system.js (Phase 4.2: 拡縮上下修正版) loaded successfully
camera-system.js:600    - 🔥 Space+Shift+ドラッグ: 上=拡大、下=縮小に修正
camera-system.js:601    - 🔥 Space+Shift+↑: 拡大、Space+Shift+↓: 縮小に修正
layer-transform.js:652 ✅ layer-transform.js loaded
layer-system.js:1427 ✅ layer-system.js (GPT5案修正完全版) loaded
drawing-clipboard.js:603 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
drawing-clipboard.js:604    - ✅ CTRL+V behavior: overwrite active layer
drawing-clipboard.js:605    - ✅ Commit events: paste:commit, operation:commit
drawing-clipboard.js:606    - ✅ Thumbnail auto-update on paste
history.js:179 ✅ history.js (Phase 2: EventBus修正版) loaded
animation-system.js:1428 ✅ animation-system.js (Phase 4.1: CUT自動採番対応版) loaded
brush-settings.js:291 🔧 [BrushSettings] Starting registration...
brush-settings.js:296 ✅ [BrushSettings] Created window.TegakiDrawing namespace
brush-settings.js:309 ✅ [BrushSettings] Registered successfully:
brush-settings.js:310    - window.TegakiDrawing.BrushSettings: true
brush-settings.js:311    - window.BrushSettings: true
brush-settings.js:312    - globalThis.BrushSettings: true
brush-settings.js:314 ✅ brush-settings.js loaded completely
export-manager.js:259 ✅ export-manager.js loaded
png-exporter.js:85 ✅ png-exporter.js (単一フレーム専用・プレビュー対応) loaded
apng-exporter.js:236 ✅ apng-exporter.js (PixiJS v8.13完全対応版) loaded
gif-exporter.js:300 ✅ gif-exporter.js (PixiJS v8.13完全対応版) loaded
slider-utils.js:197 ✅ ui/slider-utils.js loaded
slider-utils.js:198    - 責務: スライダーUIの統一実装
slider-utils.js:199    - DRY原則: settings-popup.js と ui-panels.js で共有
slider-utils.js:200    - API: createSlider() / createSimpleSlider()
drag-visual-feedback.js:150 ✅ ui/drag-visual-feedback.js (統合修正版) loaded
timeline-ui.js:977 ✅ timeline-ui.js (Phase 5.2: キー処理一元化版) loaded
timeline-ui.js:978    - 🔥 setupKeyboardShortcuts()を削除（キー処理はUnifiedKeyHandlerに一元化）
timeline-ui.js:979    - 🔥 goToPreviousCutSafe()とgoToNextCutSafe()はpublicメソッドとして維持
timeline-ui.js:980    - 🔥 togglePlayStop()もpublicメソッドとして維持
core-initializer.js:451 ✅ core-initializer.js loaded
core-runtime.js:757 ✅ core-runtime.js v2.1 loaded
core-runtime.js:758   ✅ Phase 12: PixiJS EventSystem統合
core-runtime.js:759   ✅ FederatedPointerEvent対応
core-runtime.js:760   ✅ stage.eventMode設定
core-runtime.js:761   ✅ 🆕 v2.1: 設定関連API追加
core-runtime.js:762      - setPressureCorrection()
core-runtime.js:763      - setSmoothing()
core-runtime.js:764      - setPressureCurve()
core-runtime.js:765      - getSettings()
core-runtime.js:766      - updateSettings()
core-runtime.js:767      - resetSettings()
core-runtime.js:768      - getSettingsManager()
core-runtime.js:769   ✅ window.startTegakiApp() registered
core-runtime.js:770   ✅ APNGExporter登録対応
core-runtime.js:771   ✅ 既存機能完全維持
core-engine.js:850 ✅ core-engine.js (GPT5案修正完全版) loaded
coordinate-system.js:63 🔗 CoordinateSystem EventBus integration configured
coordinate-system.js:47 ✅ CoordinateSystem initialized with canvas: 344x135
coordinate-system.js:757 🔄 CoordinateSystem auto-initialized
index.html:78 🚀 Starting application with P/E+Drag feature...
index.html:84 📦 Checking dependencies...
index.html:85   PIXI: true
index.html:86   TegakiDrawing: true
index.html:87   BrushSettings: true
index.html:88   ToolSizeManager: true
index.html:89   KeyboardHandler: true
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
coordinate-system.js:75 🔗 CameraSystem reference set in CoordinateSystem
coordinate-system.js:70 🔗 LayerSystem reference set in CoordinateSystem
coordinate-system.js:80 🔗 AnimationSystem reference set in CoordinateSystem
core-runtime.js:51 === CoreRuntime Phase 12: PixiJS EventSystem統合版 初期化開始 ===
core-runtime.js:179 ✅ CUT作成: CUT1 (344x135)
core-runtime.js:207 🔄 CUT切替: CUT1
core-runtime.js:101 ✅ PixiJS EventSystem設定完了
core-runtime.js:68 ✅ CoreRuntime 初期化完了（Phase 12対応）
index.html:97 ✅ Application ready!
index.html:98 📝 Usage:
index.html:99   - Press P + drag: Adjust pen size/opacity
index.html:100   - Press E + drag: Adjust eraser size/opacity
index.html:101   - Drag Left/Right: Change size
index.html:102   - Drag Up/Down: Change opacity
core-runtime.js:665 ✅ ExportSystem initialized (PNG/APNG/GIF/WebP)
// 完全緊急パッチ: DrawingEngine.settings初期化 + EventBusリスナー登録（統合版）

console.log('=== 完全緊急パッチ適用 ===\n');

const toolSizeManager = window.toolSizeManager;
const eventBus = window.TegakiEventBus;
const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;

if (!de) {
  console.log('❌ DrawingEngine not found');
} else if (!toolSizeManager) {
  console.log('❌ ToolSizeManager not found');
} else if (!eventBus) {
  console.log('❌ EventBus not found');
} else {
  
  // ========== パート1: DrawingEngine.settings初期化 ==========
  console.log('【パート1】DrawingEngine.settings 初期化');
  
  const BrushSettingsClass = window.TegakiDrawing?.BrushSettings || window.BrushSettings;
  
  if (!BrushSettingsClass) {
    console.log('❌ BrushSettings not found');
  } else {
    // BrushSettings初期化
    if (!de.settings) {
      de.settings = new BrushSettingsClass(de.config, de.eventBus);
      console.log('✅ DrawingEngine.settings 初期化完了');
    } else {
      console.log('✅ DrawingEngine.settings すでに初期化済み');
    }
    
    // _ensureBrushSettings()メソッドを追加
    de._ensureBrushSettings = function() {
      return !!this.settings;
    };
    console.log('✅ DrawingEngine._ensureBrushSettings() 追加');
    
    // ToolSizeManagerのpenSize/Opacityを同期
    toolSizeManager.penSize = de.settings.getBrushSize();
    toolSizeManager.penOpacity = de.settings.getBrushOpacity();
    console.log('✅ ToolSizeManager 初期値同期:', {
      penSize: toolSizeManager.penSize,
      penOpacity: toolSizeManager.penOpacity
    });
    
    // EventBus通知
    if (de.eventBus) {
      de.eventBus.emit('brush:initialized', { settings: de.settings });
      console.log('✅ brush:initialized イベント発火');
    }
  }
  
  // ========== パート2: EventBusリスナー登録 ==========
  console.log('\n【パート2】EventBusリスナー登録');
  
  const listeners = eventBus._listeners || {};
  console.log('既存リスナー:', {
    'drag-size-start': listeners['tool:drag-size-start']?.length || 0,
    'drag-size-update': listeners['tool:drag-size-update']?.length || 0,
    'drag-size-end': listeners['tool:drag-size-end']?.length || 0
  });
  
  // 🔥 tool:drag-size-start
  eventBus.on('tool:drag-size-start', (data) => {
    toolSizeManager.dragState = {
      tool: data.tool,
      startSize: data.startSize,
      startOpacity: data.startOpacity,
      currentSize: data.startSize,
      currentOpacity: data.startOpacity
    };
  });
  console.log('✅ tool:drag-size-start 登録');
  
  // 🔥 tool:drag-size-update
  eventBus.on('tool:drag-size-update', (data) => {
    if (!toolSizeManager.dragState || toolSizeManager.dragState.tool !== data.tool) {
      return;
    }
    
    const sensitivity = toolSizeManager.config.dragAdjustment;
    
    // サイズ計算
    const newSize = Math.max(
      sensitivity.size.min,
      Math.min(
        sensitivity.size.max,
        toolSizeManager.dragState.startSize + data.deltaX * sensitivity.size.sensitivity
      )
    );
    
    // 透明度計算
    const newOpacity = Math.max(
      sensitivity.opacity.min,
      Math.min(
        sensitivity.opacity.max,
        toolSizeManager.dragState.startOpacity + data.deltaY * sensitivity.opacity.sensitivity
      )
    );
    
    toolSizeManager.dragState.currentSize = newSize;
    toolSizeManager.dragState.currentOpacity = newOpacity;
    
    // 値を保存
    if (data.tool === 'pen') {
      toolSizeManager.penSize = newSize;
      toolSizeManager.penOpacity = newOpacity;
    } else if (data.tool === 'eraser') {
      toolSizeManager.eraserSize = newSize;
      toolSizeManager.eraserOpacity = newOpacity;
    }
    
    // BrushSettingsに反映
    if (de.settings) {
      de.settings.setBrushSize(newSize);
      de.settings.setBrushOpacity(newOpacity);
    }
    
    // イベント発行
    eventBus.emit('tool:size-opacity-changed', {
      tool: data.tool,
      size: newSize,
      opacity: newOpacity
    });
  });
  console.log('✅ tool:drag-size-update 登録');
  
  // 🔥 tool:drag-size-end
  eventBus.on('tool:drag-size-end', () => {
    if (!toolSizeManager.dragState) return;
    
    const { tool, currentSize, currentOpacity } = toolSizeManager.dragState;
    
    eventBus.emit('tool:size-drag-completed', {
      tool,
      finalSize: currentSize,
      finalOpacity: currentOpacity
    });
    
    toolSizeManager.dragState = null;
  });
  console.log('✅ tool:drag-size-end 登録');
  
  console.log('\n登録後のリスナー数:', {
    'drag-size-start': listeners['tool:drag-size-start']?.length || 0,
    'drag-size-update': listeners['tool:drag-size-update']?.length || 0,
    'drag-size-end': listeners['tool:drag-size-end']?.length || 0
  });
  
  // ========== パート3: 動作テスト ==========
  console.log('\n【パート3】動作テスト');
  
  setTimeout(() => {
    const initialSize = de.settings.getBrushSize();
    const initialOpacity = de.settings.getBrushOpacity();
    
    console.log('初期値:', { size: initialSize, opacity: initialOpacity });
    
    // start
    eventBus.emit('tool:drag-size-start', {
      tool: 'pen',
      startSize: initialSize,
      startOpacity: initialOpacity
    });
    
    // update
    eventBus.emit('tool:drag-size-update', {
      tool: 'pen',
      deltaX: 50,  // サイズ+5
      deltaY: -20  // 透明度-0.1
    });
    
    setTimeout(() => {
      const finalSize = de.settings.getBrushSize();
      const finalOpacity = de.settings.getBrushOpacity();
      
      console.log('更新後:', { size: finalSize, opacity: finalOpacity });
      
      if (finalSize !== initialSize || finalOpacity !== initialOpacity) {
        console.log('✅ イベント処理成功！');
        console.log('   変化量:', {
          size: (finalSize - initialSize).toFixed(1),
          opacity: (finalOpacity - initialOpacity).toFixed(2)
        });
      } else {
        console.log('❌ 値が変更されていません');
      }
      
      // end
      eventBus.emit('tool:drag-size-end');
      
    }, 50);
    
  }, 100);
}

console.log('\n=== パッチ適用完了 ===');
console.log('\n🎯 実機テスト手順:');
console.log('1. Pキーを押す（ペンツールに切替）');
console.log('2. Pキーを押したまま、マウスをドラッグ');
console.log('3. 左右でサイズ、上下で透明度が変わるか確認');
console.log('4. 画面左上に視覚フィードバック（円+数値）が表示されるか確認');
console.log('\n💡 うまく動かない場合:');
console.log('- ブラウザのコンソールを開いたまま操作');
console.log('- P+ドラッグ中にコンソールにログが出るか確認');
VM862:3 === 完全緊急パッチ適用 ===

VM862:18 【パート1】DrawingEngine.settings 初期化
VM862:28 ✅ DrawingEngine.settings 初期化完了
VM862:37 ✅ DrawingEngine._ensureBrushSettings() 追加
VM862:42 ✅ ToolSizeManager 初期値同期: {penSize: 10, penOpacity: 0.85}
VM862:50 ✅ brush:initialized イベント発火
VM862:55 
【パート2】EventBusリスナー登録
VM862:58 既存リスナー: {drag-size-start: 0, drag-size-update: 0, drag-size-end: 0}
VM862:74 ✅ tool:drag-size-start 登録
VM862:127 ✅ tool:drag-size-update 登録
VM862:143 ✅ tool:drag-size-end 登録
VM862:145 
登録後のリスナー数: {drag-size-start: 0, drag-size-update: 0, drag-size-end: 0}
VM862:152 
【パート3】動作テスト
VM862:198 
=== パッチ適用完了 ===
VM862:199 
🎯 実機テスト手順:
VM862:200 1. Pキーを押す（ペンツールに切替）
VM862:201 2. Pキーを押したまま、マウスをドラッグ
VM862:202 3. 左右でサイズ、上下で透明度が変わるか確認
VM862:203 4. 画面左上に視覚フィードバック（円+数値）が表示されるか確認
VM862:204 
💡 うまく動かない場合:
VM862:205 - ブラウザのコンソールを開いたまま操作
VM862:206 - P+ドラッグ中にコンソールにログが出るか確認
undefined
VM862:158 初期値: {size: 10, opacity: 0.85}
VM862:178 更新後: {size: 15, opacity: 0.75}
VM862:181 ✅ イベント処理成功！
VM862:182    変化量: {size: '5.0', opacity: '-0.10'}
     
undefined
