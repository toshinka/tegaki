座標系統合・リサイズ修正 段階的改修計画書
==============================================

【問題の本質】
表示リサイズとポインタ入力の座標変換が別系統で処理され、リサイズ時に入力変換が追従せずズレが発生。
renderer解像度・worldContainer transform・pointer→world変換の統一が必要。

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 1: CameraSystem の座標変換API追加【最優先・必須】
----------------------------------------------------------
目的：統一されたscreen→world変換をCameraSystemに実装

■ 改修ファイル
  system/camera-system.js

■ 処理フロー上の位置
  座標変換の唯一の入口として機能

■ 追加メソッド
  CameraSystem.prototype.screenClientToWorld(app, clientX, clientY)
  
■ 実装内容
  1. app.view.getBoundingClientRect()でDOM矩形取得
  2. clientX/Y → canvas内相対座標に変換
  3. pixelScale計算 = renderer.width / rect.width
  4. canvas相対座標 × pixelScale → renderer内ピクセル座標
  5. worldContainer.transform.worldTransform.invert()で逆行列取得
  6. 逆行列.apply()でworld座標へ変換
  7. {x, y}を返却

■ 注意点
  - offsetX/offsetY使用禁止（CSSスケール無視のため）
  - 高DPI対応を考慮したpixelScale計算必須
  - worldContainerのtransformが未初期化の場合はcanvasPx座標を返す

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 2: 描画入力の座標変換置換【最優先・必須】
----------------------------------------------------------
目的：全ての描画入力をPhase1のAPIに統一

■ 改修ファイル
  system/drawing/drawing-engine-unified.js

■ 処理フロー上の位置
  pointerdown/pointermove/pointerup イベントハンドラ内

■ 参考ファイル
  system/camera-system.js (Phase1で追加したAPI)

■ 置換対象
  旧: e.offsetX, e.offsetY の直接使用
  旧: layer.parent.toLocal(new PIXI.Point(localX, localY))
  
  新: const world = coreEngine.getCameraSystem().screenClientToWorld(app, e.clientX, e.clientY)

■ 実装箇所
  - handlePointerDown内の座標取得
  - handlePointerMove内の座標取得
  - handlePointerUp内の座標取得
  - プレビュー描画時の座標変換

■ 注意点
  - 全てのpointerイベントで統一すること
  - layer.worldToLocal()が必要な場合はworld座標取得後に適用

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 3: CameraSystem.resizeCanvas の厳密実装【最優先・必須】
----------------------------------------------------------
目的：リサイズ時にrendererとworldContainerを正しく同期

■ 改修ファイル
  system/camera-system.js

■ 処理フロー上の位置
  リサイズ処理の中核、全リサイズ操作の統一エントリポイント

■ 参考ファイル
  config.js (TEGAKI_CONFIG.canvas参照)
  ui/resize-popup.js (呼び出し元)

■ 実装内容
  1. TEGAKI_CONFIG.canvas.width/height 更新
  2. app.renderer.resize(newWidth, newHeight) 実行
  3. worldContainer.pivot.set(0, 0) リセット
  4. worldContainer.position.set(0, 0) リセット
  5. alignOptions に応じてoffset計算
     - horizontal: 'left'/'center'/'right'
     - vertical: 'top'/'center'/'bottom'
  6. worldContainer.position に offset適用
  7. eventBus.emit('camera:transform-changed') 発火

■ メソッドシグネチャ
  resizeCanvas(newWidth, newHeight, alignOptions = { horizontal: 'center', vertical: 'center' })

■ 注意点
  - renderer.resize失敗時のフォールバック不要（フェイルセーフ禁止ルール）
  - offset計算にpixelScaleが必要な場合は考慮
  - 既存のalignX/alignYロジックは完全置換

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 4: resize-popup.js の連携修正【高優先・推奨】
----------------------------------------------------------
目的：リサイズUI側をPhase3のAPIに統一

■ 改修ファイル
  ui/resize-popup.js

■ 処理フロー上の位置
  ユーザーリサイズ操作の受付とCameraSystemへの委譲

■ 参考ファイル
  system/camera-system.js (Phase3で改修)

■ 実装内容
  1. 適用ボタン押下時の処理をCameraSystem.resizeCanvas()呼び出しに変更
  2. layer.position の個別調整ロジックを削除（CameraSystemに一元化）
  3. alignOptions = { horizontal, vertical } の生成と引き渡し

■ 削除対象
  - 各レイヤーのposition個別調整ループ
  - 手動のoffset計算コード

■ 注意点
  - CameraSystemのresizeCanvas完了後はeventBusで通知されるため追加処理不要
  - layer.positionの直接操作は全廃

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 5: coordinate-system.js の役割整理【高優先・推奨】
----------------------------------------------------------
目的：診断用ユーティリティへの限定、本番変換はCameraSystemへ集約

■ 改修ファイル
  coordinate-system.js

■ 処理フロー上の位置
  開発時デバッグ・座標系診断専用

■ 参考ファイル
  system/camera-system.js (本番API)

■ 実装方針
  オプション1: 診断用としてコメント明記、本番コードからの参照を削除
  オプション2: CameraSystem.screenClientToWorldをラッパー呼び出しに変更

■ 修正内容
  - screenToWorld/worldToScreen を診断用または削除
  - 本番コードはCameraSystemのみ参照するようコメント追記
  - DOM→renderer変換ロジックは削除（CameraSystemに統合済み）

■ 注意点
  - 既存の診断ログ出力機能は保持可
  - 二重実装防止のため本番変換ロジックは完全移行

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 6: layer-transform.js (Vモード)の修正【中優先・推奨】
----------------------------------------------------------
目的：Vモードでのレイヤー移動後の描画ズレ解消

■ 改修ファイル
  system/layer-transform.js

■ 処理フロー上の位置
  Vキー発動時のアクティブレイヤー内描画物移動処理

■ 参考ファイル
  system/camera-system.js (座標変換API)
  system/drawing/drawing-engine-unified.js (描画側)

■ 実装内容
  1. レイヤー移動完了後に eventBus.emit('layer:transform-updated', layerId)
  2. 描画エンジン側でlayer:transform-updatedを購読
  3. 該当レイヤーのlocalTransform更新を認識
  4. 次回描画時にCameraSystem.screenClientToWorld → layer.worldToLocal の連鎖を再実行

■ 注意点
  - layer.position変更後は必ずイベント発火
  - 描画側はlayer座標系の更新を動的に反映する設計

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 7: サムネイル・UIパネルの同期【中優先・推奨】
----------------------------------------------------------
目的：リサイズ後のサムネイル生成・パネル表示の正常化

■ 対象ファイル
  ui/timeline-thumbnail-utils.js
  ui/layer-panel-renderer.js
  ui/timeline-ui.js

■ 処理フロー上の位置
  camera:transform-changed イベント購読による再描画

■ 参考ファイル
  system/camera-system.js (イベント発行元)

■ 実装内容
  1. eventBus.on('camera:transform-changed', () => { サムネイル再生成 })
  2. TEGAKI_CONFIG.canvas.width/height 参照箇所の確認
  3. renderer解像度との整合性確認

■ 注意点
  - イベント購読は初期化時1回のみ
  - サムネイル生成は非同期でも可

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Phase 8: 動作検証とクリーンアップ【必須】
----------------------------------------------------------
目的：全Phase完了後の統合テストと不要コード削除

■ テスト項目
  1. リサイズ前に描画 → リサイズ(center/left/right) → 同位置に再描画 → 座標一致確認
  2. Vモードでレイヤー移動 → 描画 → ペン先と描画位置の一致確認
  3. 高DPI環境でのpixelScale正常動作確認
  4. console.logでcamera:transform-changedイベント発火確認

■ クリーンアップ対象
  - offsetX/offsetY の直接使用箇所（検索して全削除）
  - 旧coordinate-system.jsの本番変換ロジック
  - resize-popup.js内のlayer.position個別調整
  - 二重実装された座標変換関数

■ 最終確認
  - CameraSystem.screenClientToWorld が唯一の座標変換入口であること
  - 全pointerイベントが統一APIを使用していること
  - リサイズ時にrenderer.resize()が必ず呼ばれること
  - eventBusでの通知が正常に機能していること

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

【重要な設計原則】
- 座標変換はCameraSystem一元管理
- offsetX/offsetY 使用禁止
- renderer解像度とDOM表示サイズの区別を厳密に
- リサイズ時は renderer.resize() + worldContainer更新 + イベント発火 をセットで実行
- フェイルセーフ・フォールバック禁止、失敗時は明示的エラー
- eventBusによる疎結合な更新通知

【Phase実行順序】
Phase 1 → Phase 2 → Phase 3 → Phase 4 → Phase 5 → Phase 6 → Phase 7 → Phase 8

各Phase完了後は個別に動作確認を推奨。
Phase 1-3完了時点でリサイズズレは解消予定。
Phase 6完了でVモードズレ解消予定。