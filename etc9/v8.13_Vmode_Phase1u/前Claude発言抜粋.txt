// リロード後
window.PopupManager.show('quickAccess');
const sizeSlider = document.getElementById('pen-size-slider');
console.log('Size slider rect:', sizeSlider?.getBoundingClientRect());
// 期待: {width: 172.8, ...} のような正の値
// 手動更新テスト
const popup = window.PopupManager.get('quickAccess');
popup._updateSizeSlider(15);
setTimeout(() => {
    const track = document.getElementById('pen-size-track');
    const handle = document.getElementById('pen-size-handle');
    console.log('Track width:', track?.style.width);
    console.log('Handle left:', handle?.style.left);
    console.log('Display:', document.getElementById('pen-size-display')?.textContent);
}, 100);
// レガシー要素確認（存在はするが非表示のはず）
const legacyPopup = document.getElementById('legacy-pen-settings');
console.log('Legacy popup display:', window.getComputedStyle(legacyPopup).display);
// 期待: "none"
popup-manager.js:232 👁️ Popup "quickAccess" shown
VM308:5 Size slider rect: DOMRect {x: 123.5999984741211, y: 188.97500610351562, width: 172.79998779296875, height: 4.5, top: 188.97500610351562, …}
VM308:22 Legacy popup display: none
undefined
VM308:15 Track width: 49.1525%
VM308:16 Handle left: 49.1525%
VM308:17 Display: 15.0px

スライダー動作します、数値も変わりペンに反映されます！強いて言えばレスポンスが遅く、引っ掛かりがあるくらいです。
それの改修をするか、resize-popup.jsがまだスライダーが動かないのでそちらの改修が先か、どちらかをお願いします。
🎉 素晴らしい！quick-access-popup.js完全成功！

Size slider rect: {width: 172.8, ...}  ✅ 正しいサイズ
Track width: 49.1525%                   ✅ 正しく計算
Handle left: 49.1525%                   ✅ 正しく移動
Display: 15.0px                         ✅ 表示正常
Legacy popup display: none              ✅ レガシー非表示

レスポンスの遅さは後回しにして、resize-popup.jsを先に修正します。
resize-popup.jsデバッグ

現在のresize-popup.jsを確認させてください：
javascript

// ===== resize-popup.js 現状確認 =====
window.PopupManager.show('resize');

const widthSlider = document.getElementById('canvas-width-slider');
const widthHandle = document.getElementById('canvas-width-handle');
const widthTrack = document.getElementById('canvas-width-track');

console.log('=== Slider要素 ===');
console.log('Width slider:', widthSlider);
console.log('Width slider rect:', widthSlider?.getBoundingClientRect());

console.log('=== インスタンス確認 ===');
const popupInstance = window.PopupManager.get('resize');
console.log('Instance:', popupInstance);
console.log('Initialized:', popupInstance?.initialized);
console.log('Elements cached:', popupInstance?.elements);

console.log('=== イベントリスナー確認 ===');
console.log('mouseMoveHandler:', popupInstance?.mouseMoveHandler);
console.log('mouseUpHandler:', popupInstance?.mouseUpHandler);

console.log('=== 手動更新テスト ===');
if (popupInstance && popupInstance._updateWidthSlider) {
    popupInstance._updateWidthSlider(500);
    
    setTimeout(() => {
        console.log('After update:');
        console.log('Track width:', widthTrack?.style.width);
        console.log('Handle left:', widthHandle?.style.left);
        console.log('Display:', document.getElementById('canvas-width-display')?.textContent);
    }, 100);
}

このデバッグ結果を教えてください。特に：

    Width slider rect のサイズ
    mouseMoveHandler が存在するか
    手動更新後の Track width と Handle left

結果次第で次の修正方針を決定します。

Consoleコマンドを入力することで、スライダーが動くようになります。これの入力前は動かせません。

// ===== resize-popup.js 現状確認 =====
window.PopupManager.show('resize');
const widthSlider = document.getElementById('canvas-width-slider');
const widthHandle = document.getElementById('canvas-width-handle');
const widthTrack = document.getElementById('canvas-width-track');
console.log('=== Slider要素 ===');
console.log('Width slider:', widthSlider);
console.log('Width slider rect:', widthSlider?.getBoundingClientRect());
console.log('=== インスタンス確認 ===');
const popupInstance = window.PopupManager.get('resize');
console.log('Instance:', popupInstance);
console.log('Initialized:', popupInstance?.initialized);
console.log('Elements cached:', popupInstance?.elements);
console.log('=== イベントリスナー確認 ===');
console.log('mouseMoveHandler:', popupInstance?.mouseMoveHandler);
console.log('mouseUpHandler:', popupInstance?.mouseUpHandler);
console.log('=== 手動更新テスト ===');
if (popupInstance && popupInstance._updateWidthSlider) {
    popupInstance._updateWidthSlider(500);

    setTimeout(() => {
        console.log('After update:');
        console.log('Track width:', widthTrack?.style.width);
        console.log('Handle left:', widthHandle?.style.left);
        console.log('Display:', document.getElementById('canvas-width-display')?.textContent);
    }, 100);
}
popup-manager.js:232 👁️ Popup "resize" shown
VM331:8 === Slider要素 ===
VM331:9 Width slider: <div id="canvas-width-slider" class="resize-slider">...</div>
VM331:10 Width slider rect: DOMRect {x: 113.5999984741211, y: 146.8000030517578, width: 172.79998779296875, height: 4.5, top: 146.8000030517578, ...}
VM331:12 === インスタンス確認 ===
VM331:14 Instance: window.TegakiUI.ResizePopup {coreEngine: CoreEngine, history: HistoryManager, eventBus: EventBus, popup: div#resize-settings.popup-panel.resize-popup-compact.show, isVisible: true, ...}
VM331:15 Initialized: true
VM331:16 Elements cached: {widthSlider: div#canvas-width-slider.resize-slider, widthTrack: div#canvas-width-track.resize-slider-track, widthHandle: div#canvas-width-handle.resize-slider-handle, widthDisplay: span#canvas-width-display.resize-value-display, widthDecrease: button#width-decrease.resize-arrow-btn, ...}
VM331:18 === イベントリスナー確認 ===
VM331:19 mouseMoveHandler: (e) => {
            if (this.isDraggingWidth) {
                const rect = this.elements.widthSlider.getBoundingClientRect();
                const percent = Math.max(0, Math.min(100, ((e.clien...
VM331:20 mouseUpHandler: () => {
            this.isDraggingWidth = false;
            this.isDraggingHeight = false;
        }
VM331:22 === 手動更新テスト ===
18
VM331:27 After update:
VM331:28 Track width: 21.0526%
VM331:29 Handle left: 21.0526%
VM331:30 Display: 500px
🎯 完全に理解しました！

問題：Consoleコマンド実行前はスライダーが動かない

これは初期化タイミングの問題です。Consoleでwindow.PopupManager.show('resize')を実行すると、その時点で初期化が完了するため動作します。
原因

resize-popup.jsのshow()メソッドで初期化が非同期的に遅延している可能性があります。

現在のresize-popup.jsを取得して確認します：
🎯 原因発見！

resize-popup.jsのshow()メソッドは正しく実装されています：
javascript

show() {
    if (!this.initialized) {
        this.initialize();  // ✅ 初期化を呼んでいる
    }
    // ...
    this.popup.classList.add('show');
}

しかし、Consoleで手動実行すると動く理由：

Consoleでwindow.PopupManager.show('resize')を実行した時点で、DOMが完全にレンダリングされており、getBoundingClientRect()が正しい値を返すからです。

最初に開いた時に動かない理由：

PopupManagerの初期化タイミングまたは、リサイズアイコンクリック時の呼び出しパスに問題がある可能性があります。
修正方針

show()メソッドに強制的なDOM更新待機を追加します：
resize-popup.js (初期化タイミング修正版)
コード 
✅ 修正完了！
変更点

show()メソッドの修正：
javascript

// ❌ 修正前
show() {
    if (!this.initialized) {
        this.initialize();  // DOM表示前に初期化
    }
    this.popup.classList.add('show');
}

// ✅ 修正後
show() {
    this.popup.classList.add('show');  // 先に表示
    
    requestAnimationFrame(() => {  // DOM完全レンダリング後
        if (!this.initialized) {
            this.initialize();  // 初期化実行
        }
    });
}

理由：

    classList.add('show')でポップアップが表示される
    表示直後はまだDOMがレンダリング途中
    requestAnimationFrame()で次のフレームまで待機
    その時点でgetBoundingClientRect()が正しい値を返す

動作確認

ファイル置き換え後、以下で確認してください：
javascript

// リロード後、Consoleコマンド無しでリサイズアイコンをクリック
// または
window.PopupManager.show('resize');

// スライダーが即座に動くはず

これでConsoleコマンド無しでも初回から動作するはずです！結果を教えてください。

// リロード後、Consoleコマンド無しでリサイズアイコンをクリック
// または
window.PopupManager.show('resize');
// スライダーが即座に動くはず
popup-manager.js:232 👁️ Popup "resize" shown
true

上記コマンドを打つ前はスライダがー動きません。コマンド入力後は動かせます。
その後リロードします。スライダーは動きません。
そしてもう一度コマンドを入力します。
// リロード後、Consoleコマンド無しでリサイズアイコンをクリック
// または
window.PopupManager.show('resize');
// スライダーが即座に動くはず
popup-manager.js:232 👁️ Popup "resize" shown
true
VM982:6 Uncaught SyntaxError: Unexpected token ':'
エラーが出てスライダーが動かなくなります！
リロードではなく一度ブラウザから消し、再度立ち上げるとエラーは出なくなります。
🎯 重要な発見！
エラーの原因
javascript

VM982:6 Uncaught SyntaxError: Unexpected token ':'

これはConsoleコメントの: (コロン) が原因です：
javascript

// または  ← これは問題ない
window.PopupManager.show('resize');
// スライダーが即座に動くはず  ← この日本語コロンが問題

Consoleでは日本語コメントの後にコードを続けると、構文エラーになることがあります。
根本問題：初期化が2回目以降動かない

症状：

    初回：Console実行で動く
    リロード後：動かない
    Console再実行：エラーまたは動かない

これはinitializedフラグが原因です。
修正方針

show()を呼ぶ度に強制的に初期化し直す、またはinitialized状態をリセットします：
resize-popup.js (初期化タイミング修正版)
コード ∙ バージョン2 

しかし、これでも解決しない可能性が高いです。根本的なデバッグが必要です。
詳細デバッグコマンド

以下を1行ずつ実行してください（コメント無し）：
javascript

window.PopupManager.show('resize');

javascript

const popup = window.PopupManager.get('resize');
console.log('Initialized:', popup.initialized);
console.log('mouseMoveHandler exists:', !!popup.mouseMoveHandler);
console.log('mouseUpHandler exists:', !!popup.mouseUpHandler);

javascript

const slider = document.getElementById('canvas-width-slider');
console.log('Slider rect:', slider.getBoundingClientRect());

javascript

console.log('Elements cached:', Object.keys(popup.elements));

javascript

if (popup.elements.widthHandle) {
    console.log('widthHandle listeners:', getEventListeners(popup.elements.widthHandle));
}

javascript

console.log('Document mousemove listeners:', getEventListeners(document).mousemove?.length);

この結果を教えてください。特に：

    Initialized: true/false
    mouseMoveHandler exists: true/false
    Slider rectのwidth値
    Document mousemove listenersの数




window.PopupManager.show('resize');
popup-manager.js:232 👁️ Popup "resize" shown
true
const popup = window.PopupManager.get('resize');
console.log('Initialized:', popup.initialized);
console.log('mouseMoveHandler exists:', !!popup.mouseMoveHandler);
console.log('mouseUpHandler exists:', !!popup.mouseUpHandler);
VM1176:2 Initialized: true
VM1176:3 mouseMoveHandler exists: true
VM1176:4 mouseUpHandler exists: true
undefined
const slider = document.getElementById('canvas-width-slider');
console.log('Slider rect:', slider.getBoundingClientRect());
VM1180:2 Slider rect: DOMRect {x: 104, y: 137.5, width: 192, height: 5, top: 137.5, …}
undefined
console.log('Elements cached:', Object.keys(popup.elements));
VM1184:1 Elements cached: (19) ['widthSlider', 'widthTrack', 'widthHandle', 'widthDisplay', 'widthDecrease', 'widthIncrease', 'heightSlider', 'heightTrack', 'heightHandle', 'heightDisplay', 'heightDecrease', 'heightIncrease', 'horizontalAlignLeft', 'horizontalAlignCenter', 'horizontalAlignRight', 'verticalAlignTop', 'verticalAlignCenter', 'verticalAlignBottom', 'applyBtn']
undefined
if (popup.elements.widthHandle) {
    console.log('widthHandle listeners:', getEventListeners(popup.elements.widthHandle));
}
VM1188:2 widthHandle listeners: {mousedown: Array(1)}
undefined
console.log('Document mousemove listeners:', getEventListeners(document).mousemove?.length);
VM1192:1 Document mousemove listeners: 1
undefined