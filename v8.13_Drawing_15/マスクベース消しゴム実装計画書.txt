================================================================================
マスクベース消しゴム実装計画書
PixiJS v8.13 Drawing Tool - Mask-based Eraser Implementation Plan
================================================================================

【現状分析】
- drawing-engine.js で透明ペン方式の消しゴムを試みたが完全動作せず
- ベクター削除アプローチも実装されているが彫刻的な使用に未対応
- レイヤーシステムは正常動作（layer-system.js）
- 描画エンジンの基本構造は良好

【実装方針】
マスクベースアプローチでレイヤーごとに独立した消しゴムマスクを保持
- 各レイヤーに RenderTexture ベースのマスクを附属
- 消しゴム使用時はマスクに黒で描画（非表示領域）
- GPU 処理でパフォーマンス良好
- 彫刻的な使用・バケツ塗りの削り出しに完全対応


================================================================================
Phase 1: データ構造とマスク管理システム構築
================================================================================

【改修ファイル】
system/data-models.js

【追加内容】
LayerModel クラスに以下を追加：
- maskTexture: PIXI.RenderTexture | null
- maskSprite: PIXI.Sprite | null
- maskGraphics: PIXI.Graphics | null (一時描画用)

【参考箇所】
既存: LayerModel コンストラクタ
処理: init() でマスク初期化メソッド呼び出し

【メソッド追加】
initializeMask(width, height, renderer)
- RenderTexture 作成（レイヤーサイズ）
- 初期状態: 全白（全表示）
- Sprite 作成して Graphics.mask に設定
destroyMask()
- RenderTexture/Sprite の破棄
hasMask()
- マスク存在チェック


================================================================================
Phase 2: レイヤーシステムへのマスク統合
================================================================================

【改修ファイル】
system/layer-system.js

【改修箇所】
createLayer() メソッド
- レイヤー作成時に layerData.initializeMask() 呼び出し
- マスク Sprite をレイヤーに追加
- Graphics.mask にマスク設定

init() メソッド
- 既存レイヤー（背景・初期レイヤー）にもマスク追加

deleteLayer() メソッド
- レイヤー削除時に layerData.destroyMask() 呼び出し

【参考箇所】
_createCheckerPatternBackground() - 背景生成ロジック
rebuildPathGraphics() - Graphics 再構築処理

【処理フロー】
1. createLayer 時にマスク初期化
2. レイヤー Container に maskSprite を addChild
3. レイヤー内の Graphics に mask プロパティ設定
4. 削除時にマスクリソース解放


================================================================================
Phase 3: 消しゴム描画エンジン実装
================================================================================

【新規ファイル】
system/drawing/eraser-mask-renderer.js

【クラス】
EraserMaskRenderer
- コンストラクタ(app)
- renderEraserToMask(layerData, points, radius)
  - layerData.maskTexture に黒い円と線を描画
  - 既存マスクを保持（clear: false）
  - ストローク補間で滑らか
- clearMask(layerData)
  - マスクを全白にリセット

【参考】
drawing-engine.js の updatePreview() - Graphics 描画パターン
stroke-renderer.js - ストローク描画ロジック

【処理詳細】
renderEraserToMask(layerData, points, radius):
1. eraserGraphics = new PIXI.Graphics()
2. 黒色 (0x000000) で円・線描画
3. points をループして各点に円描画
4. 点間を線で接続
5. app.renderer.render() で maskTexture に描画（clear: false）


================================================================================
Phase 4: DrawingEngine への統合
================================================================================

【改修ファイル】
system/drawing/drawing-engine.js

【削除箇所】
- applyEraserEffect() メソッド全削除
- applyRealtimeEraserEffect() メソッド全削除
- splitPathByEraserTrail() メソッド全削除
- applyPathModifications() メソッド全削除
- applyRealtimePathModifications() メソッド全削除
- eraserPreviewGraphics 関連全削除
- lastProcessedPointIndex 削除

【追加・改修】
コンストラクタ:
- this.eraserRenderer = new EraserMaskRenderer(app)

continueDrawing():
- 消しゴムモード判定削除
- リアルタイム処理削除
- 通常のプレビュー更新のみ

stopDrawing():
消しゴム時の処理を変更:
```
if (tool === 'eraser') {
    const activeLayer = this.currentLayer;
    if (activeLayer?.layerData?.hasMask()) {
        this.eraserRenderer.renderEraserToMask(
            activeLayer.layerData,
            strokeData.points,
            this.currentSettings.size / 2
        );
    }
    // History記録
    const entry = {
        name: 'Erase',
        do: () => { /* マスク適用 */ },
        undo: () => { /* マスク復元 */ }
    };
    this.history.push(entry);
} else {
    this.finalizeStroke(strokeData, tool);
}
```

【参考箇所】
既存: finalizeStroke() - ペン確定処理
既存: stopDrawing() - 描画終了フロー


================================================================================
Phase 5: History システム対応
================================================================================

【改修ファイル】
system/history.js

【対応内容】
消しゴムコマンドの Undo/Redo:
- マスク状態のスナップショット保存
- Canvas.toDataURL() で画像化して保存
- Undo: 前の画像を復元
- Redo: 後の画像を復元

【実装パターン】
```
{
    name: 'Erase',
    do: () => {
        // maskTextureSnapshot を適用
        restoreMaskFromSnapshot(layer, afterSnapshot);
    },
    undo: () => {
        restoreMaskFromSnapshot(layer, beforeSnapshot);
    },
    meta: { layerId, tool: 'eraser' }
}
```

【補助関数追加】
captureMaskSnapshot(layerData)
- RenderTexture を Canvas に変換
- DataURL 取得
restoreMaskFromSnapshot(layerData, dataURL)
- Image 読み込み
- RenderTexture に再描画


================================================================================
Phase 6: UI/UX 改善
================================================================================

【改修ファイル】
ui/keyboard-handler.js
core-runtime.js

【追加機能】
消しゴムモード時のカーソル表示:
- CSS で円形カーソル表示
- ブラシサイズに連動

マスククリア機能:
- Ctrl+Delete でアクティブレイヤーのマスクリセット
- 「消しゴムで消した部分を全復元」相当

【参考】
既存: ツール切り替え処理
既存: カーソル更新ロジック


================================================================================
Phase 7: エクスポート対応
================================================================================

【改修ファイル】
system/exporters/png-exporter.js
system/exporters/apng-exporter.js
system/exporters/gif-exporter.js

【対応内容】
エクスポート時にマスク適用状態で描画:
1. 各レイヤーを RenderTexture に描画
2. マスクが自動適用される（Graphics.mask 設定済み）
3. 通常通り extract.canvas() で取得

【注意点】
マスクは PIXI.Graphics.mask で自動処理されるため
エクスポート側の特別な処理は不要


================================================================================
Phase 8: 最終調整とテスト
================================================================================

【確認項目】
1. レイヤー作成時にマスク正常初期化
2. 消しゴムでマスクに黒が描画される
3. 彫刻的な削り出しが可能
4. バケツ塗り（大きな fill）の削りが可能
5. 下のレイヤーが透けて見える
6. Undo/Redo が正常動作
7. エクスポート時にマスク適用される
8. レイヤー削除時にマスクリソース解放
9. メモリリーク無し
10. パフォーマンス良好（60fps維持）

【デバッグ用】
console.log 追加箇所:
- マスク初期化成功
- マスク描画実行
- マスク破棄実行


================================================================================
実装順序まとめ
================================================================================

Phase 1 → Phase 2 → Phase 3 → Phase 4 → Phase 5 → Phase 6 → Phase 7 → Phase 8

各 Phase は独立性が高く、段階的に実装・テスト可能
Phase 4 完了時点で基本動作確認可能


================================================================================
注意事項
================================================================================

【禁止事項】
- localStorage/sessionStorage 使用禁止（Claude.ai artifacts 非対応）
- フォールバック処理禁止（曖昧な動作防止）
- 過度なエラーハンドリング禁止（冗長化防止）
- コンソールログ最小限（不具合は AI 検索可能）

【原則】
- DRY/SOLID 原則厳守
- API 統一性維持
- EventBus 経由の疎結合
- 座標系の明確化（ワールド座標 vs ローカル座標）
- 命名規則統一

【パフォーマンス】
- RenderTexture はレイヤーごとに1つのみ
- 描画中は clear: false で追記
- リサイズ時の再作成処理必要


================================================================================
補足: マスクの仕組み
================================================================================

PIXI.Graphics.mask = PIXI.Sprite の動作:
- Sprite のテクスチャがマスクとして機能
- 白い部分: 表示 (alpha = 1)
- 黒い部分: 非表示 (alpha = 0)
- グレー: 半透明

消しゴムの実装:
- RenderTexture に黒い円を描画
- 黒い部分が「削られた」ように見える
- 実際の Graphics は削除されず保持される


================================================================================
以上
================================================================================