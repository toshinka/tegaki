# 画像アニメ出力機能 改修計画書

## 問題の原因特定

### 1. PNG/APNG出力が静止画のみになる原因
- `export-manager.js`: `_shouldUseAPNG()` の判定ロジックは正常
- `apng-exporter.js`: `export()` メソッドが存在するが `generateBlob()` の実装に問題
  - `cut.duration` の単位が不明瞭（秒かミリ秒か）
  - UPNG.encode への遅延時間の渡し方に誤り
  - フレーム取得のタイミング制御が不安定

### 2. プレビュー機能が発火しない原因
- **重大**: `quick-export-ui.js` が `generateGifBlob()` を呼び出しているが、実際のメソッド名は `generateBlob()`
- **重大**: APNG用の呼び出しも同様に誤った関数名を使用
- `gif-exporter.js`: Worker読み込みがfile://環境で失敗
- エラーが発生してもUI側で適切に処理されていない

## 修正方針

### 優先度【高】即時対応
1. API名の統一: 全exporterで `generateBlob(options)` を実装
2. `quick-export-ui.js` の関数呼び出しを修正
3. `gif-exporter.js` にローカルvendorフォールバックを追加

### 優先度【中】機能安定化
4. `apng-exporter.js` のフレーム生成ロジック修正
5. `cut.duration` 単位を秒に統一
6. エラーメッセージの明確化

### 優先度【低】将来対応
7. WebP/MP4対応の完全実装

## データ構造仕様の明確化

### cut.duration の単位
- **決定**: 秒（浮動小数）で統一
- 例: 0.1秒 = 100ms
- APNG/GIF出力時に `Math.round(duration * 1000)` でミリ秒変換

## 修正対象ファイル

1. `system/quick-export-ui.js` - 関数名修正【高】
2. `system/exporters/gif-exporter.js` - Worker読み込み改善【高】
3. `system/exporters/apng-exporter.js` - フレーム生成修正【中】
4. `system/export-manager.js` - エラー処理強化【中】
5. `ui/export-popup.js` - エラー表示改善【低】

## フロー図

### APNG出力フロー
```
[ユーザー] → [ExportPopup/QuickExportUI]
              ↓
         [ExportManager.generatePreview('png')]
              ↓
         [_shouldUseAPNG() → true]
              ↓
         [APNGExporter.generateBlob()]
              ↓
         [AnimationSystem.getCuts()]
              ↓
         [各CUTをレンダリング → frames配列]
              ↓
         [UPNG.encode(frames, delays)]
              ↓
         [Blob返却]
```

### GIF出力フロー
```
[ユーザー] → [QuickExportUI]
              ↓
         [GIFExporter.generateBlob()]
              ↓
         [createWorkerBlobURL()]
              ↓ (try local → CDN)
         [gif.js初期化]
              ↓
         [各CUTをレンダリング → addFrame]
              ↓
         [Worker処理 → Blob返却]
```

## テスト項目

- [ ] file://環境でGIFエクスポートプレビューが動作
- [ ] APNGエクスポートで複数フレームが生成
- [ ] cut.durationが正しくミリ秒変換される
- [ ] Worker未取得時に明確なエラー表示
- [ ] UPNG未ロード時に明確なエラー表示

## 注意事項

- ベクターデータは Animation System が管理
- レイヤー状態の保存/復元は既存実装を維持
- レンダリングは ExportManager.renderToCanvas() を使用
- PixiJS v8.13 の renderer.render() API に準拠