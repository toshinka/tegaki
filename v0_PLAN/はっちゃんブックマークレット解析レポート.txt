# はっちゃん ブックマークレット展開の仕組み解析

## 📋 概要

canvas98（はっちゃん）は、**ブックマークレット**という技術を使って、既存の掲示板サイトに**お絵かきツールを後から注入**する仕組みです。

## 🔍 ブックマークレットの基本構造

### 提供されたブックマークレット

```javascript
javascript:(function(){
    if(!globalThis.canvas98start){
        var s=document.createElement('script');
        s.charset='UTF-8';
        s.src='https://canvas98.github.io/canvas98/all-in-one.js';
        document.body.appendChild(s)
    }else{
        globalThis.canvas98start()
    }
})();
```

### 動作フロー

```
[ユーザーがブックマークレットをクリック]
    ↓
[現在のページで即座にJavaScriptが実行される]
    ↓
[canvas98start が存在するか確認]
    ↓
┌─ NO ──┐                ┌─ YES ──┐
│        │                │         │
[script要素を動的作成]    [既存のツールを再起動]
    ↓                         ↓
[外部JSを読み込み]       [canvas98start() 実行]
    ↓
[ツールが展開される]
```

## 🛠️ 技術的な仕組み

### 1. **Same-Origin Policyの回避**

**なぜ動作するのか？**

ブックマークレットは**ユーザーアクション**として実行されるため:

- ✅ ユーザーが明示的にクリックして実行
- ✅ 現在のページの**コンテキスト内**で実行される
- ✅ そのページの**DOM全体にアクセス可能**
- ✅ 外部スクリプトの動的読み込みが可能

**通常のXSSとの違い**:
- ❌ XSS: 攻撃者が勝手に注入（ブロックされる）
- ✅ ブックマークレット: ユーザーが自発的に実行（許可される）

### 2. **動的スクリプト注入**

```javascript
var s = document.createElement('script');  // script要素を作成
s.charset = 'UTF-8';                       // 文字コード設定
s.src = 'https://canvas98.github.io/canvas98/all-in-one.js';  // 外部JS
document.body.appendChild(s);              // DOMに追加→即座に実行
```

**重要ポイント**:
- `<script src="...">` タグは**CORS制約を受けない**
- HTTPSから読み込めば、ほぼすべてのページで動作
- 掲示板のCSP（Content Security Policy）が緩ければ確実に動作

### 3. **グローバル名前空間の活用**

```javascript
if(!globalThis.canvas98start){
    // 初回実行時: ツールを読み込む
} else {
    // 2回目以降: 既存のツールを再起動
    globalThis.canvas98start()
}
```

**メリット**:
- 重複読み込みを防止
- 高速な再起動
- メモリの節約

## 🎯 canvas98.ts での掲示板統合コード

### canvas98.ts の関連部分

```typescript
class w {
    static m_0: w
    m_1: m<HTMLMetaElement> | null = null

    get canvas() {
        return document.getElementById("oejs") as HTMLCanvasElement | null
    }

    get _B1() {
        return null != this.canvas
    }

    get _D8() {
        var t = document.getElementById("oebtnj");
        return null != t ? t : document.getElementById("oebtnj_f")
    }

    async _I() {
        return new Promise<void>(t => {
            var _ = screen.width < 400 ? .75 : 1;
            this.m_1 = strToHTML<"meta">(`<meta name="viewport" content="...">`)
            document.head.appendChild(this.m_1._2)

            if (this._B1) {
                t()
            } else {
                this.m_2(t)
                this._D8?.click()  // ← ★掲示板の「お絵かきボタン」を自動クリック
            }
        })
    }
}
```

**解説**:
1. `document.getElementById("oejs")` - 掲示板の既存キャンバス要素を探す
2. `document.getElementById("oebtnj")` - 掲示板の「お絵かきボタン」を探す
3. 見つからなければ自動的にクリック → 掲示板標準のお絵かきUIを起動
4. その後、canvas98が**乗っ取る**

### 掲示板への統合フロー

```javascript
static async _ya() {
    if (!b._B1) {  // 既に起動していないか確認
        let t = new b(w._42.canvas!);  // 掲示板のcanvas要素を取得
        (c._W = t)._92.add(async () => {
            w._42._E8(),  // 掲示板UIを表示
            await (new G).reverse(t),
            t._H5._d(),
            t.remove()
        })
        t.add()  // ツールUIを追加
        await (new G)._r3(t)  // アニメーション表示
        w._42._Y3()  // 掲示板のcanvasを隠す
    }
}
```

**ポイント**:
- 掲示板の既存canvas要素を**そのまま使う**
- 掲示板のUI要素を**一時的に隠す**
- 終了時に元の状態に**復元する**

## 🔐 セキュリティ面での考察

### なぜ「めぶきちゃんねる」でも動作するのか？

#### 1. **CSP（Content Security Policy）の緩さ**

多くの画像掲示板は:
```http
Content-Security-Policy: script-src 'self' 'unsafe-inline'
```

これは:
- ✅ `'unsafe-inline'` が含まれる → ブックマークレット動作可能
- ✅ 動的に追加されたscriptタグも実行される
- ✅ 外部ドメインからのスクリプト読み込みも可能（制限が緩い場合）

#### 2. **レガシーな設計**

ふたば系掲示板の特徴:
- 元々が2000年代初頭の設計
- CSPなどの近代的セキュリティ機能が未実装
- `<script>`タグの制限がほぼない

#### 3. **ユーザー権限での実行**

```
[掲示板のセキュリティ]
    ↓
ブックマークレットは「ユーザー自身の操作」として実行
    ↓
掲示板側からは「正当なユーザーの操作」に見える
    ↓
ブロックする手段がない（意図的にブロックしない限り）
```

## 🚀 具体的な展開手順

### Step 1: ブックマークレット実行

```javascript
// ユーザーがクリック
javascript:(function(){ /* ... */ })();
```

### Step 2: スクリプト注入

```javascript
var s = document.createElement('script');
s.src = 'https://canvas98.github.io/canvas98/all-in-one.js';
document.body.appendChild(s);
```

### Step 3: DOM解析とUI構築

```javascript
// all-in-one.js の中身（推測）
(function() {
    // 1. 掲示板のcanvas要素を検出
    const boardCanvas = document.getElementById('oejs');
    
    // 2. canvas98のUIを構築
    const ui = createCanvas98UI();
    
    // 3. 掲示板のUIを隠す
    boardCanvas.style.visibility = 'hidden';
    
    // 4. canvas98を表示
    document.body.appendChild(ui);
    
    // 5. グローバル関数を登録
    globalThis.canvas98start = function() {
        // 再起動処理
    };
})();
```

### Step 4: 絵を描く

```javascript
// ユーザーが絵を描く
// → canvas98の内部canvas上で描画
```

### Step 5: 貼り付け

```javascript
async m_a() {
    var t = this.ui;
    await N._va(t.canvas, this._43);  // サイズ確認
    t._2b();  // UIを閉じる
    this._92._d();  // 終了処理
}
```

```javascript
_E8() {
    var t = document.getElementById("oe3");
    if (null != t)
        t.style.visibility = "visible"  // 掲示板のUIを再表示
}

_F8() {
    if (!this.canvas) return
    
    o(this.canvas)._1({
        visibility: "",
        "image-rendering": "auto"
    })
    
    // 掲示板のcanvasにcanvas98の内容をコピー
    d._k2(t.ui.canvas!, w._42.canvas!)
}
```

**最終結果**:
- canvas98で描いた絵が掲示板のcanvas要素にコピーされる
- 掲示板の標準投稿機能で送信される

## 🎨 掲示板側の要件

canvas98が動作するための条件:

### 必須要件

1. ✅ **既存のcanvas要素**: `<canvas id="oejs">`
2. ✅ **お絵かきボタン**: `id="oebtnj"` または `id="oebtnj_f"`
3. ✅ **緩いCSP**: `script-src 'unsafe-inline'` 許可

### オプション要件

4. ⚠️ **投稿フォーム**: 標準的なHTML form
5. ⚠️ **画像保存**: canvas.toDataURL() が機能する

## 🔄 なぜChrome拡張不要なのか？

### ブックマークレット vs Chrome拡張

| 項目 | ブックマークレット | Chrome拡張 |
|------|-------------------|-----------|
| インストール | 不要（ブックマーク追加のみ） | 必要 |
| 権限 | ユーザーが実行時に付与 | 事前に申請 |
| 更新 | 自動（外部JSを読み込むため） | ストア経由 |
| 対応ブラウザ | すべて | Chromeのみ |
| 審査 | 不要 | 必要 |
| Same-Origin | 制約なし | 制約あり |

**ブックマークレットの強み**:
- 🎯 ユーザー操作として実行 → セキュリティ制約が最小
- 🎯 外部JSを動的読み込み → 更新が容易
- 🎯 DOM全体にアクセス可能 → 既存要素の操作が自由

## 🛡️ セキュリティリスクと対策

### 掲示板管理者側の対策

もし掲示板側がブックマークレットをブロックしたい場合:

#### 1. **厳格なCSP設定**

```http
Content-Security-Policy: 
    script-src 'self'; 
    style-src 'self';
    default-src 'none';
```

これにより:
- ❌ インラインスクリプト実行不可
- ❌ 外部ドメインからのスクリプト読み込み不可
- ❌ ブックマークレット動作不可

#### 2. **Subresource Integrity (SRI)**

```html
<script 
    src="https://example.com/script.js"
    integrity="sha384-..."
    crossorigin="anonymous">
</script>
```

#### 3. **動的script要素の検出**

```javascript
// 掲示板側のコード
new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
            if (node.tagName === 'SCRIPT' && 
                !node.src.startsWith(location.origin)) {
                node.remove();  // 外部スクリプトを削除
            }
        });
    });
}).observe(document.body, { childList: true, subtree: true });
```

### なぜ「めぶきちゃんねる」は対策していないのか？

推測される理由:

1. **ユーザー利便性優先**
   - お絵かき機能の拡張は歓迎される
   - ブックマークレット禁止はユーザー体験を損なう

2. **技術的制約**
   - 古いコードベースでCSP導入が困難
   - 既存機能との互換性問題

3. **コミュニティ文化**
   - ふたば系は「改造・拡張文化」が根付いている
   - 公式も暗黙の了解で許容

4. **実害の少なさ**
   - ブックマークレットはユーザー自身が実行
   - XSSのような攻撃とは異なる

## 📊 canvas98の賢い設計

### 1. **非破壊的な統合**

```javascript
// 既存の要素を隠すだけ、削除しない
boardCanvas.style.visibility = 'hidden';

// 終了時に復元
boardCanvas.style.visibility = 'visible';
```

### 2. **段階的な初期化**

```javascript
if (this._B1) {
    t()  // 既にcanvasがあれば即座に起動
} else {
    this.m_2(t)  // なければボタンクリックを待つ
    this._D8?.click()  // 自動でボタンをクリック
}
```

### 3. **エラーハンドリング**

```javascript
get _D8() {
    var t = document.getElementById("oebtnj");
    return null != t ? t : document.getElementById("oebtnj_f")
    // 複数のID候補を試行
}
```

## 🎯 あなたのツールへの応用

### 実装方針

canvas98と同様の掲示板展開機能を実装する場合:

#### 1. **ブックマークレット作成**

```javascript
javascript:(function(){
    if(!window.tegakiStart){
        const s=document.createElement('script');
        s.src='https://your-domain.com/tegaki-bookmarklet.js';
        document.body.appendChild(s);
    }else{
        window.tegakiStart();
    }
})();
```

#### 2. **掲示板検出ロジック**

```javascript
// tegaki-bookmarklet.js
(function() {
    // 1. 掲示板タイプを判定
    const boardType = detectBoardType();
    
    // 2. 対応する統合モジュールを読み込み
    if (boardType === 'futaba') {
        loadFutabaIntegration();
    } else if (boardType === 'mebuki') {
        loadMebukiIntegration();
    }
    
    function detectBoardType() {
        if (document.getElementById('oejs')) return 'futaba';
        if (document.querySelector('[data-mebuki]')) return 'mebuki';
        return null;
    }
})();
```

#### 3. **掲示板要素の乗っ取り**

```javascript
class BoardIntegration {
    constructor() {
        this.boardCanvas = document.getElementById('oejs');
        this.postButton = document.getElementById('oebtnj');
    }
    
    async inject() {
        // 1. 掲示板UIを隠す
        this.boardCanvas.style.visibility = 'hidden';
        
        // 2. Tegakiツールを表示
        const tegakiUI = await this.createTegakiUI();
        document.body.appendChild(tegakiUI);
        
        // 3. 終了ハンドラー
        tegakiUI.on('close', () => {
            this.restore();
        });
    }
    
    restore() {
        // 掲示板UIを復元
        this.boardCanvas.style.visibility = 'visible';
        
        // 描いた絵をコピー
        this.copyToBoard();
    }
    
    copyToBoard() {
        const ctx = this.boardCanvas.getContext('2d');
        
        // PixiJSからPNGを生成
        const dataURL = this.tegakiApp.renderer.extract.canvas().toDataURL();
        
        // 画像を読み込んでcanvasに描画
        const img = new Image();
        img.onload = () => {
            ctx.clearRect(0, 0, this.boardCanvas.width, this.boardCanvas.height);
            ctx.drawImage(img, 0, 0);
        };
        img.src = dataURL;
    }
}
```

## 📝 まとめ

### canvas98がブックマークレットで動作する理由

1. **ブックマークレットはユーザー操作** → セキュリティ制約が緩い
2. **動的script注入** → 外部JSを自由に読み込める
3. **掲示板の既存要素を活用** → 権限不要
4. **CSPが緩い掲示板が多い** → ブロックされない
5. **非破壊的な統合** → 元の機能を壊さない

### なぜChrome拡張不要なのか

- ブックマークレットで十分な機能を実現可能
- インストール不要で手軽
- 自動更新が可能（外部JSを読み込むため）
- すべてのブラウザで動作

### 技術的に優れている点

- ✅ 最小限のコード（ブックマークレット本体は数行）
- ✅ 自動更新（all-in-one.jsを更新するだけ）
- ✅ 複数の掲示板に対応（検出ロジックで切り替え）
- ✅ 既存機能を尊重（非破壊的）

---

**結論**: canvas98の掲示板展開は、古典的なブックマークレット技術と、掲示板のセキュリティの緩さを巧みに利用した、非常に賢い実装です。Chrome拡張や特別な権限は一切不要で、**ユーザーが自発的にクリックする**という行為だけで、強力なお絵かきツールを任意のページに注入できます。