===========================
ベクター＋ラスタ混在レイヤー構造設計書（Undo/Redo安定化対応）
===========================

【対象バージョン】
v8.13_History9（PixiJS v8.13ベース）

【作成目的】
現在のUndo/Redo挙動の不整合（描画直後Undo無効・Redo誤動作・履歴破損）を解消し、
ベクターとラスターレイヤーが混在しても安定した状態管理を実現する。

最終的には「ベクター主体・ラスター補助」構成を基本方針とし、
将来的なAVIUTL2出力やSPINE的変形アニメーションにも対応できるアーキテクチャに拡張する。


------------------------------------------------------------
■ 1. 現状の問題点
------------------------------------------------------------

(1) history.js が「Canvas全体」または「レイヤー全体」をまとめてスナップショット保存している。
    → 履歴間でレイヤー構造や描画モードの差異が吸収できず、Undo時に破綻。

(2) state-manager.js が「どの状態が有効スナップショットか」を判定していない。
    → 履歴スタックと描画中状態が競合し、Redo時に異なるレイヤーが復元される。

(3) ベクター描画とラスタ描画が同一の保存形式で扱われている。
    → ベクターはパス構造差分で管理すべきなのに、ラスタも同じ扱いで処理。
    → レイヤーの型不明状態でUndo/Redoが動くため、復元時に描画エラー。

(4) 描画終了タイミングでhistory.pushが適切に呼ばれていない。
    → 直後Undoが無効になる現象。


------------------------------------------------------------
■ 2. 改修方針（全体）
------------------------------------------------------------

ベクター・ラスタ両対応の「型安全なレイヤー構造」を導入する。

  layer = {
      id: string,
      name: string,
      type: "vector" | "raster",
      data: object | PIXI.RenderTexture,
      transform: { x, y, scaleX, scaleY, rotation },
      visible: boolean
  }

state-manager および history は、この layer.type に応じて処理を分岐させる。

Undo/Redoは「各レイヤー単位での状態履歴」を記録し、
グローバル履歴は layerId と action 情報で統合管理する。


------------------------------------------------------------
■ 3. データフロー概要
------------------------------------------------------------

描画操作発生
  ↓
event-bus.js が "DRAW_END" を発火
  ↓
state-manager.js が layer.data を更新
  ↓
history.js が layerId・type・action・payload を記録
  ↓
Undo/Redo 時は type に応じた restore メソッドを呼び出す

  vector: history.restoreVectorState(entry)
  raster: history.restoreRasterState(entry)


------------------------------------------------------------
■ 4. ファイル別改修指針
------------------------------------------------------------

-------------------------------------
【system/state-manager.js】
-------------------------------------
● 目的：
  - レイヤー状態と描画操作を一元管理。
  - 各レイヤーがベクター／ラスターどちらかを明示的に持つ。

● 主要メソッド定義：

  function getActiveLayer()
    → 現在操作中の layer を返す。

  function updateLayerData(layerId, newData)
    → typeに応じて data を更新（ベクターならJSON構造、ラスターならRenderTexture）。

  function getLayerSnapshot(layerId)
    → dataとtransformをまとめた現在状態を返す。

  function applyLayerSnapshot(layerId, snapshot)
    → Undo/Redoで使用。typeに応じて復元処理を分岐。


-------------------------------------
【system/history.js】
-------------------------------------
● 目的：
  - Undo/Redoの中核ロジックを型別に整理。
  - 現在はCanvas全体スナップショットだが、レイヤー単位での差分保存に改修。

● 新構造例：

  const historyStack = [
    {
      layerId: 1,
      type: "vector",
      action: "addPath",
      payload: { pathId: 22, pathData: {...} }
    },
    {
      layerId: 2,
      type: "raster",
      action: "paint",
      snapshot: PIXI.RenderTexture
    }
  ];

● メソッド定義：

  function pushEntry(entry)
    → 描画終了時に呼ばれる。entry.type で処理分岐。

  function undo()
    → 最新entryをpopし、typeごとにrestore処理を実行。
       vector → restoreVectorState()
       raster → restoreRasterState()

  function redo()
    → undoStackから復元。

  function restoreVectorState(entry)
    → layer.data = deepClone(entry.payload)
       再描画。

  function restoreRasterState(entry)
    → layer.data = entry.snapshot (RenderTexture)
       Spriteに再割り当て。

  ※履歴保存単位をレイヤーごとにすることで、履歴肥大化を防ぐ。


-------------------------------------
【system/layer-system.js】
-------------------------------------
● 目的：
  - レイヤー生成・削除・切り替え・描画モードの管理。

● メソッド定義追加：

  function createLayer(name, type)
    → 新規レイヤー作成。type指定必須。
       type="vector" → ベクター描画用のpath構造を初期化。
       type="raster" → PIXI.RenderTextureを生成してSpriteに割当。

  function switchLayerType(layerId, newType)
    → 明示的に変換する場合のみ許可。
       vector→rasterはflattenしてテクスチャ化。
       raster→vectorは不可（構造情報が失われるため）。


------------
