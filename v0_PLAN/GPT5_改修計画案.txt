# 改修計画書 — v8.13_anime_phase1g3 (GIFアニメ実装対応)

**対象リポジトリ/ファイル群**

* `index.html` (UI・初期化、ショートカットハンドラ、DOM)
* `system/layer-system.js` (レイヤ管理)
* `system/camera-system.js` / `coordinate-system.js` (座標変換・カメラ)
* `system/event-bus.js` (イベント統合)
* `system/history.js` (Undo/Redo)
* `ui/timeline-ui.js` (表示時間ボタン等)
* `system/gif-exporter.js` (GIF出力)
* `system/drawing-clipboard.js` (CUTコピー/貼付け)
* `system/diagnostics.js` (診断用)

> 実行環境：Chrome（file://可）、PixiJS v8.13（CDN）

---

## 目的 (概要)

GIFアニメ実装中に発現している下記不具合を原因調査・優先順位を付けて段階的に改修する。

* レイヤーパネルで「レイヤー1」と「背景」が二重に描画される
* 描画位置ズレ（実際のレイヤーサムネイルは正常）
* 表示時間ボタンが縦並びで窮屈 → ◀▶アイコンへ、横並びへ変更
* 新規CUT作成で他CUTの内容が消える
* `Ctrl+Shift+N` がプライベートウィンドウを出してしまう（ブラウザの既定と競合）
* `Shift+C` / `Shift+V` でCUTコピー・貼付け、`Shift+N` で空CUT作成
* `Ctrl+Z` / `Ctrl+Y`（Undo/Redo）が正しく動くか、非破壊か確認・未実装なら実装

改修は**既存機能を壊さない最小改修**を原則とし、AIが改修（自動修正）しやすいよう可読性・API境界を厳格化する。

---

## 初期調査での仮説（優先度高）

1. **二重描画**: レイヤ生成/表示時に同じ`PIXI.Container`や`DisplayObject`を`addChild`しているか、同一レイヤの描画ループが2回走っている。`layer-system`と`core-runtime`の初期化順序/二重初期化を疑う。
2. **描画位置ズレ**: `coordinate-system`と`camera-system`で座標系（ワールド / カメラ / レイヤローカル）が一致していない。サムネイルはローカル座標で正しいが、実際描画はカメラ変換を二重適用または未適用している可能性。
3. **新規CUTで他CUTが消える**: CUTごとのレイヤ配列を管理していない、または新規CUT作成時に全体ステージを`clear()`する実装。
4. **ショートカット競合**: `keydown`ハンドラで`event.preventDefault()`を呼ばない/呼ぶ条件が不適切で、ブラウザ既定のショートカット（プライベートウィンドウ等）をトリガーしている。
5. **Undo/Redo不整合**: `system/history.js`が単純なスナップショット実装でなく、破壊的操作（直接state書き換え）を行っているため非破壊性が保てていない。

---

## 推奨方針（アーキテクチャ）

* **明確なAPI境界**を定義：

  * `LayerSystem` API: `createLayer(meta)`, `removeLayer(id)`, `setActiveLayer(id)`, `moveLayer(id, index)`, `renderLayerToTexture(id)`
  * `CutSystem` API: `createCut(blank|clone)`, `getCut(id)`, `switchCut(id)`（CUTはレイヤ配列を保持）
  * `CoordinateSystem` API: `screenToWorld(point)`, `worldToScreen(point)`, `applyCamera(container)`
  * `EventBus` を通じて各システムは疎結合に通信
* **Commandパターン**で操作を非破壊にする（Undo/Redo 実装が楽になる）
* **レンダリング負荷分散**: PixiJSのRendererオプションで`powerPreference: 'high-performance'`、必要箇所を`RenderTexture`にキャッシュしてGPUへオフロード
* **外部ライブラリ活用（CDN挿入）**:

  * ショートカット：`Mousetrap`（軽量・CDN）または自前でキー処理（focus制御あり）
  * カメラ/パン/ズーム：`pixi-viewport`（v4系がv8で動くことを確認の上）
  * Pixi レイヤ制御：`@pixi/layers` / `pixi-layers`（ただし互換性確認）

> ライブラリ導入は最小・段階的に行い**相性を検証**してからマージする。

---

## 優先度と同時並行可能性（推奨順）

### フェーズ A (高優先度、最短で直す)

並列可: (A1) UI/ショートカット改善、(A2) Timeline UI レイアウト修正

* A1: **ショートカット改善**

  * 既存の`keydown`ハンドラを調査。グローバルで`Ctrl/Cmd`系が効かないように、`canvas`またはアプリがフォーカスを持つ間のみ`preventDefault()`する。ブラウザ競合が避けられない場合（例：`Ctrl+N`）、代替`Ctrl+ALT+N`を採用。
  * 新規割当：

    * `Shift+N` → 新規ブランクCUT
    * `Shift+C` → 現在CUT（全レイヤ）をクリップボードにコピー（シリアライズ）
    * `Shift+V` → クリップボードから新規CUTとして貼付け
  * テスト：プライベートウィンドウが出ないこと、全主要ブラウザでキャンバスにフォーカスしているときに操作可能であること。

* A2: **Timeline UI (表示時間ボタン)修正**

  * `ui/timeline-ui.js` の縦レイアウトを横並びに変更。テキストの上下ボタンを◀▶に差し替え。
  * ボタン幅を柔軟化し、アイコンはSVGをインラインか最小SVGスプライトで追加。

### フェーズ B (中優先度、依存：A完了推奨)

* B1: **座標変換の整合化**

  * `coordinate-system.js` と `camera-system.js` を一つの座標APIにまとめる。`screen↔world`の単一実装を導入。
  * 既存描画コードを`screenToWorld`/`worldToScreen`に置換し、二重変換を取り除く。
  * テスト：サムネイルと本キャンバスで同じ座標が描かれること（マウス位置→描画点の一致）。

* B2: **二重描画バグ潰し**

  * `layer-system` の `addChild` / `removeChild` をラップして、同一オブジェクトの重複追加を検出するガードを入れる（開発用に警告ログ、製品では抑制）。
  * 初期化フローを見直し、`init()` が複数回呼ばれていないか確認。

### フェーズ C (低〜中優先度、依存：B完了推奨)

* C1: **CUT管理の堅牢化**

  * `CutSystem` を導入し、CUT固有のレイヤ配列を保持。新規CUT作成時は現在のステートを汚染しないよう浅い参照でなく**コピー**する（レイヤのメタのみのコピー + レイヤ描画は必要に応じて再生成）。
  * 新規CUT作成で既存CUTの描画が消える問題はおそらくここ。

* C2: **Undo/Redo 実装・確認**

  * `system/history.js`をCommandパターンで書き直す（`execute()`, `undo()`, `redo()` を持つコマンド列を管理）。
  * 描画操作（ペン、変形、レイヤ操作、CUT操作）をコマンド化し、Stateの完全スナップショットより軽量で確実なUndo/Redoを実現。
  * レイヤ内容のスナップショットは`PIXI.RenderTexture`でラスタを保存（重い場合はメタ差分+描画再現で代替）。

### フェーズ D (GIF出力最適化)

* GIF出力が重い場合はフレームごとに`renderer.extract.pixels()`や`RenderTexture`書き出しを使うより、`gif.js`等のライブラリと連携してWebWorkerでエンコードする。
* `system/gif-exporter.js` を非同期処理にし、UIをブロックしないようにする。

---

## 開発タスク（具体的ファイル修正候補）

* `index.html`

  * ショートカット初期化部の修正（イベントハンドラを`app.view`またはcanvasに限定）
  * GIFエクスポート時のRendererオプション確認（`preserveDrawingBuffer` の有無）
* `system/layer-system.js`

  * add/removeのガードとAPI明文化
  * レイヤのシリアライズ/デシリアライズ実装（CUT保存用）
* `coordinate-system.js`, `camera-system.js`

  * 単一座標APIに統合。`screenToWorld` / `worldToScreen` をエクスポート
* `ui/timeline-ui.js`

  * DOM構造変更とCSS（横並び、アイコン化）
* `system/history.js`

  * Commandパターンで再実装
* `system/drawing-clipboard.js`

  * CUT単位のシリアライズ（メタ+レイヤ参照）と復元
* `system/gif-exporter.js`

  * 非同期WebWorker方式とRenderTextureキャッシュの併用

---

## テスト計画（必須）

1. レイヤ二重表示が発現しないこと（既存プロジェクトをロードして確認）
2. 描画位置がサムネイルと一致すること（座標テストツールを追加）
3. 新規CUT作成で既存CUTが消えないこと。CUT切替テスト
4. `Shift+N/C/V` が正しく動作し、ブラウザの既定ショートカットを発生させないこと
5. Undo/Redoが非破壊で動作すること（10ステップ以上の操作で確認）
6. GIF出力がUIをブロックしないこと

---

## 開発・レビューのための補助ツール/ログ

* 開発モードで `diagnostics.js` を有効にして、`LayerSystem` の add/remove 呼び出しをトレース
* `EventBus` に`DEBUG`チャネルを追加し、初期化/切替イベントをログ出力

---

## 既知の外部ライブラリ候補（CDN挿入）

* Mousetrap (キー割当): `https://cdnjs.cloudflare.com/ajax/libs/mousetrap/1.6.5/mousetrap.min.js`
* pixi-viewport (カメラ): CDN版（安定性要確認）
* gif.js（エンコード）: `https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.worker.js` 等

---

## 最小パッチ例（ショートカット：index.html内）

```js
// canvasにのみキーバインドを有効化する例（既存ハンドラ置換用）
const canvas = document.querySelector('#app-canvas');
canvas.tabIndex = 0; // フォーカス可能に
canvas.addEventListener('keydown', (e) => {
  if (e.shiftKey && e.code === 'KeyN') {
    e.preventDefault();
    CutSystem.createBlankCut();
  }
  if (e.shiftKey && e.code === 'KeyC') {
    e.preventDefault();
    Clipboard.copyCut(CutSystem.getActiveCut());
  }
  if (e.shiftKey && e.code === 'KeyV') {
    e.preventDefault();
    CutSystem.createFromClipboard();
  }
});
canvas.focus();
```

---

## リスクと注意点

* 外部ライブラリ導入は**相性問題**の可能性あり（特にpixiのプラグイン）。段階的に導入し、各PRにて動作検証を必須とする。
* Undo/RedoでRenderTextureスナップショットを多用するとメモリを大量に消費するため、差分コマンド中心の実装を推奨。
* ファイルの大規模置換は避け、既存APIをラップして互換を保つ形で段階的リファクタを行う。

---

## 次アクション（即時）

1. 開発環境で`index.html`を開いて再現手順の記録（スクリーンショット+簡易ログ）を残す
2. `diagnostics.js`を一時的にデバッグレベル最大にして、二重描画・CUT切替の呼び出し順を収集
3. ショートカットのscopeを`canvas`に限定するパッチを当てて、`Shift+N/C/V` の動作を確認

---

※この計画書は「AIが自動で改修すること」を前提に、可読性・API明確化を重視して作成しました。
必要であれば、この計画をベースにパッチを作成して直接差分を提出します。


ここで重要な点だけ手短にまとめ、現時点での最も負荷の高い5点の根拠をソース参照付きで示します（確認用）：

index.html が UI と初期化・ショートカット周りを保持しているため、ショートカット競合や表示レイアウトの問題はここが起点で起きやすいことを確認しました。
GitHub

system/layer-system.js はレイヤ管理の核（add/removeなど）部分であり、ここで二重追加や初期化の重複が起きると二重描画になる可能性が高いと考えています。
GitHub

ui/timeline-ui.js に表示時間ボタン周りの実装があり、縦並びから横並びへの改修対象であることを確認しました。
GitHub

system/diagnostics.js は診断用に使えるログポイントがあるので、二重描画やCUT切替時の呼出し順のトレースに活用可能です（開発用に一時的に有効化推奨）。
GitHub

system/history.js（Undo/Redo）は存在するものの実装状況を確認してCommandパターン化する必要があるため、非破壊性の保証とUndo/Redoの信頼性向上が必要です。
GitHub

次のステップ（推奨）を即時実行できます：

まず キャンバスに限定したキーイベントハンドラを適用して Shift+N/C/V を割当て、ブラウザ側ショートカットの誤発火を防ぐパッチを当てる（最もユーザ影響が高いので最優先）。

diagnostics.js をデバッグ強化して、レイヤの addChild / CUT切替 の呼び出し履歴を収集する（二重描画とCUT消失の根本原因を特定）。

並列で ui/timeline-ui.js のボタンレイアウトを横並び（◀ ▶）へ変更する軽微パッチを当てる（UI改善は速攻でできる）。


