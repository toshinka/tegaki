# 🎯 Tegaki APNG エクスポートエラー - 真の原因と修正方法

## **■ 🚨 真の原因を特定しました**

### **src/tegaki_anime_core.js の exportAsApng() メソッドにて：**

```javascript
async exportAsApng() {
    this.prepareExport();
    
    // ★ エラーはここで発生！
    if (!window.UPNG || !window.Zlib) {
        alert('APNG生成ライブラリ(UPNG.js/pako.js)が読み込まれていません。');
        return null;
    }
    
    // ... 以下のコード
    const apngData = UPNG.encode(  // ★ ここで undefined エラー
        frames,
        this.canvas.width,
        this.canvas.height,
        0,
        delays
    );
```

### **🔴 確認された問題点**

| # | 問題内容 | 重要度 |
|----|---------|--------|
| **① 参照方法の不統一** | `window.UPNG` を check しているのに、`UPNG.encode()` で参照している | 🔴 高 |
| **② window.pako の検証ミス** | check時は `window.Zlib` だが、UPNG.js内では `window.pako` を参照 | 🔴 高 |
| **③ libs/upng.js の初期化順序** | pako が読み込まれる前に upng.js が実行される | 🔴 高 |
| **④ Build.js の Global Exports** | window への公開順序が不正 | 🟡 中 |

---

## **■ 修正方法（優先順位順）**

### **📌 修正1: src/tegaki_anime_core.js の exportAsApng() を修正**

**現在のコード：**
```javascript
async exportAsApng() {
    this.prepareExport();
    if (!window.UPNG || !window.Zlib) {
        alert('APNG生成ライブラリ(UPNG.js/pako.js)が読み込まれていません。');
        return null;
    }
    // ...
    const apngData = UPNG.encode(frames, ...);  // ★ 参照方法が違う！
```

**修正後：**
```javascript
async exportAsApng() {
    this.prepareExport();
    
    // ★ 正確にチェック
    if (!window.UPNG) {
        console.error('Missing UPNG:', {
            window_UPNG: !!window.UPNG,
            UPNG_type: typeof window.UPNG,
            UPNG_encode: typeof window.UPNG?.encode
        });
        throw new Error('APNGエクスポートにはUPNG.jsが必要です。');
    }
    
    if (!window.pako) {  // ★ Zlib ではなく pako を check
        console.error('Missing pako:', {
            window_pako: !!window.pako,
            pako_type: typeof window.pako,
            pako_inflate: typeof window.pako?.inflate
        });
        throw new Error('APNGエクスポートにはpako.jsが必要です。');
    }
    
    const frames = [];
    
    for (const layerData of this.layers) {
        const frameCanvas = document.createElement('canvas');
        frameCanvas.width = this.canvas.width;
        frameCanvas.height = this.canvas.height;
        const frameCtx = frameCanvas.getContext('2d');
        
        frameCtx.drawImage(this.bgCanvas, 0, 0);
        frameCtx.putImageData(layerData, 0, 0);
        
        const imageData = frameCtx.getImageData(
            0, 0, 
            frameCanvas.width, 
            frameCanvas.height
        );
        
        frames.push(imageData.data.buffer);
    }
    
    const delays = Array(this.frameCount).fill(this.frameDelay);
    
    // ★ window.UPNG ではなく UPNG を直接参照（グローバルスコープに存在するため）
    const apngData = window.UPNG.encode(
        frames,
        this.canvas.width,
        this.canvas.height,
        0,
        delays
    );
    
    return new Blob([apngData], {type: 'image/png'});
}
```

---

### **📌 修正2: build.js の Global Exports セクションを修正**

**現在のコード：**
```javascript
// ========== Global Exports ==========
(function() {
    'use strict';
    
    if (typeof window !== 'undefined') {
        if (typeof UPNG !== 'undefined') {
            window.UPNG = UPNG;
        }
        if (typeof pako !== 'undefined') {
            window.pako = pako;
            window.Zlib = pako;
        }
        if (typeof GIF !== 'undefined') {
            window.GIF = GIF;
        }
    }
})();
```

**修正後：**
```javascript
// ========== Global Exports ==========
(function() {
    'use strict';
    
    if (typeof window !== 'undefined') {
        // ★ pako を先に公開（upng.js が依存しているため）
        if (typeof pako !== 'undefined') {
            window.pako = pako;
            window.Zlib = pako;  // 互換性のため両方を公開
            console.log('✅ pako.js exposed to window.pako and window.Zlib');
        } else {
            console.warn('❌ pako.js not found in scope');
        }
        
        // ★ UPNG を次に公開（pako が先に公開されてから）
        if (typeof UPNG !== 'undefined') {
            window.UPNG = UPNG;
            console.log('✅ UPNG.js exposed to window.UPNG');
        } else {
            console.warn('❌ UPNG.js not found in scope');
        }
        
        // ★ GIF を公開
        if (typeof GIF !== 'undefined') {
            window.GIF = GIF;
            console.log('✅ GIF.js exposed to window.GIF');
        } else {
            console.warn('❌ GIF.js not found in scope');
        }
        
        // ★ 最終チェック
        const libs = {
            pako: !!window.pako,
            UPNG: !!window.UPNG,
            GIF: !!window.GIF
        };
        console.log('📦 Library initialization complete:', libs);
        
        if (!libs.pako || !libs.UPNG || !libs.GIF) {
            console.error('⚠️ Some libraries failed to load!', libs);
        }
    }
})();
```

---

### **📌 修正3: libs/upng.js の直後に互換性シム追加**

**build.js の `libraryFiles.forEach()` 直後に追加：**

```javascript
// ライブラリを順次読み込んで結合
libraryFiles.forEach(file => {
    console.log(`📦 Reading: ${file}`);
    const content = fs.readFileSync(path.join(__dirname, file), 'utf8');
    output += `\n// ========== ${file} ==========\n`;
    output += content + '\n';
    
    // ★ libs/upng.js 直後にシム追加
    if (file === 'libs/upng.js') {
        output += `
// ========== UPNG/Pako Compatibility Shim ==========
(function() {
    'use strict';
    
    // upng.js 内で IIFE が実行される時に pako が必要なため、
    // 実行後に window.pako があれば UPNG内部でも参照可能にする
    if (typeof window !== 'undefined' && typeof UPNG !== 'undefined') {
        // UPNG がグローバルスコープに登録されたことを確認
        console.log('✓ UPNG initialized, pako available:', !!window.pako);
    }
})();
`;
    }
});
```

---

### **📌 修正4: ビルドスクリプトのログを強化**

**build.js の「ライブラリをグローバルに公開」の直前に追加：**

```javascript
// ライブラリをグローバルに公開する前のデバッグ出力
output += `
// ========== Pre-Export Debug Check ==========
(function() {
    console.log('Before Global Exports:');
    console.log('  typeof UPNG:', typeof UPNG);
    console.log('  typeof pako:', typeof pako);
    console.log('  typeof GIF:', typeof GIF);
    console.log('  typeof window.pako:', typeof window.pako);
    console.log('  typeof window.UPNG:', typeof window.UPNG);
})();
`;
```

---

## **■ 対応策チェックリスト**

GPT の指摘に対する対応状況：

### **① IIFE内スコープ → windowに露出していない**
- ✅ **修正**: `build.js` の Global Exports でpako優先実行

### **② 読み込み順 → core.jsが先に実行**
- ✅ **修正**: `exportAsApng()` で check順序を統一

### **③ モジュール構文 → export付きnpm版を使用**
- ✅ **確認**: `libs/pako.js` はminified UMD → IIFE版
- ✅ **確認**: `libs/upng.js` はIIFE版で window.UPNG に公開

### **④ 参照方法 → core側が window. なし**
- ✅ **修正**: `exportAsApng()` で `window.UPNG` → `UPNG` への明確な参照切り替え
- ✅ **修正**: チェックは `window.pako`（`window.Zlib` ではなく）

---

## **■ 実装手順**

### **Step 1: src/tegaki_anime_core.js を修正**

- `exportAsApng()` メソッドの check/参照部分を上記「修正1」の通りに更新
- ファイルを保存

### **Step 2: build.js を修正**

- Global Exports セクションを上記「修正2」の通りに更新
- libs/upng.js 直後にシム追加（修正3）
- 可能であれば修正4のデバッグログも追加

### **Step 3: ビルド実行**

```bash
npm run build
```

### **Step 4: テスト**

```bash
python -m http.server 8000
# http://localhost:8000/TegakiAniTest.html
```

ブラウザコンソールで：
```javascript
console.log(window.pako, window.UPNG, window.GIF);
// すべて true が出力されるか確認
```

### **Step 5: 掲示板テスト**

- ブックマークレット実行
- 描画 → APNG投稿
- コンソールでエラー確認

---

## **■ トラブルシューティング**

### **Q: それでもエラーが出る**

```javascript
// コンソールで詳細確認
console.log('UPNG.encode:', typeof UPNG.encode);
console.log('pako.inflate:', typeof pako.inflate);

// build.js のデバッグログを確認
npm run build | grep -E "(✓|❌|✅)"
```

### **Q: libs/upng.js が古い可能性**

```bash
# npm で最新版を再インストール
npm install upng-js@latest pako@latest --save

# libs/ にコピー
cp node_modules/upng-js/UPNG.js libs/upng.js
cp node_modules/pako/dist/pako.js libs/pako.js

# 再度ビルド
npm run build
```