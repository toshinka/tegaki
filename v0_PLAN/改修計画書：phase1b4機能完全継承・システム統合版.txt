# 改修計画書：phase1b4機能完全継承・システム統合版

## 🚨 現在の問題分析

### 1. 初期化エラー
```
TypeError: Cannot read properties of null (reading 'worldContainer')
```
- **原因**: `cameraSystem` が `null` の状態で `worldContainer` にアクセス
- **発生箇所**: `DrawingApp.initialize()` の826行目
- **根本原因**: システム初期化の順序とタイミング問題

### 2. 機能不具合
- レイヤー新規作成：ショートカット○、アイコン✕
- レイヤー変形確定後の絵の消失
- アクティブレイヤー移動の動作不良

### 3. アーキテクチャ問題
- システム分離による初期化順序の複雑化
- 相互参照の設定タイミング問題
- EventBus実装の不完全性

## 📋 改修方針

### コア方針：**統合型アーキテクチャへの回帰**
- `core-engine.js` 内で全システムを統合実装
- 責任分界を明確化しつつ、初期化を単純化
- phase1b4の機能を100%継承

### ファイル構成
```
core-engine.js (統合版)
├── EventBus (軽量実装)
├── 座標変換API (統一実装)  
├── CameraSystem (統合実装)
├── LayerSystem (統合実装)
├── DrawingEngine (統合実装)
└── ClipboardSystem (統合実装)
```

## 🎯 改修計画

### Phase 1: 初期化エラー修正
**目標**: システムの確実な初期化

#### 1.1 初期化順序の単純化
- [ ] `core-engine.js` 内でのシーケンシャル初期化
- [ ] 外部ファイル読み込み依存の除去
- [ ] 同期初期化による確実性確保

#### 1.2 参照設定の確実化
```javascript
// ❌ 問題のあるパターン
this.cameraSystem = null; // 後で設定
this.cameraSystem.worldContainer; // null参照エラー

// ✅ 修正パターン  
this.setupCameraSystem(); // 即座に初期化
this.cameraSystem.worldContainer; // 確実に存在
```

### Phase 2: API統一とミス防止
**目標**: ミスしやすい箇所の標準化

#### 2.1 座標系API統一
```javascript
// 統一API設計
class CoordinateSystem {
    // input: screen, returns: canvas (canonical)
    screenToCanvas(screenPoint) { /* 厳格実装 */ }
    
    // input: canvas, returns: screen  
    canvasToScreen(canvasPoint) { /* 厳格実装 */ }
}
```

#### 2.2 ミスしやすい箇所のガイド
- **座標変換**: 必ず型と単位を明記
- **変形確定**: パスデータの保護を最優先
- **イベント処理**: preventDefault()の確実な実行
- **リソース管理**: Graphics.destroy()の確実な実行

### Phase 3: 機能完全継承
**目標**: phase1b4の全機能復元

#### 3.1 UI操作の完全継承
- [ ] レイヤー作成：ショートカット + アイコン
- [ ] レイヤー移動：V+ドラッグ + V+方向キー
- [ ] 変形操作：スライダー + キーボード
- [ ] コピペ：Ctrl+C/V

#### 3.2 非破壊変形の完全実装
- [ ] `confirmLayerTransform()` の安全実装
- [ ] パスデータの完全保護
- [ ] Graphics再生成の堅牢性確保

## 🔧 実装戦略

### 戦略1: 段階的統合
1. **基盤実装**: EventBus + 座標API
2. **コア実装**: Camera + Layer + Drawing
3. **機能実装**: Clipboard + UI統合
4. **検証実装**: 全機能テスト

### 戦略2: エラーハンドリング強化
```javascript
// 堅牢性パターン
try {
    const result = riskyOperation();
    if (!result) {
        console.warn('Operation failed gracefully');
        return false;
    }
    return result;
} catch (error) {
    console.error('Critical error:', error);
    // 状態復旧処理
    return false;
}
```

### 戦略3: デバッグ支援
- システム状態の可視化機能
- 初期化プロセスの詳細ログ
- エラー発生時の状態保存

## ⚠️ 重要注意事項

### 座標系の取り扱い
```javascript
// ❌ 危険：座標系が不明
function drawPoint(x, y) { ... }

// ✅ 安全：座標系を明記
function drawPointInCanvasCoords(canvasX, canvasY) { ... }
function drawPointInScreenCoords(screenX, screenY) { ... }
```

### 変形処理の取り扱い
```javascript
// ❌ 危険：破壊的変更
path.points.forEach(point => {
    point.x = matrix.apply(point).x;
    point.y = matrix.apply(point).y;
});

// ✅ 安全：非破壊変更  
const transformedPoints = path.points.map(point => 
    matrix.apply(point)
);
```

### リソース管理の取り扱い
```javascript
// ❌ 危険：リソースリーク
graphics.removeChildren();

// ✅ 安全：完全クリーンアップ
graphics.removeChildren().forEach(child => {
    if (child.destroy) child.destroy();
});
```

## 📈 成功指標

### 必須達成項目
- [ ] 初期化エラー 0件
- [ ] レイヤー作成：アイコン動作 ✅
- [ ] レイヤー変形確定後：絵の保持 ✅
- [ ] コピペ：完全動作 ✅
- [ ] 全ショートカットキー：動作 ✅

### 品質指標
- [ ] コード可読性：関数名・変数名の明確化
- [ ] エラーハンドリング：全関数でtry-catch実装
- [ ] ログ出力：デバッグ情報の充実
- [ ] パフォーマンス：phase1b4同等以上

## 🚀 実装開始

### Step 1: core-engine.js統合版の実装
- 全システムの統合実装
- 初期化順序の確定
- 基本機能の動作確認

### Step 2: 機能継承の完全実装  
- UI操作の完全継承
- イベントハンドリングの修正
- エラーケースの対応

### Step 3: テスト・検証
- 全機能の動作テスト
- エラーケースの検証
- パフォーマンス測定

---

**重要**: この計画書に従って、確実に1つずつ問題を解決していきます。特に初期化エラーの解決を最優先とし、その後段階的に機能を復元していきます。