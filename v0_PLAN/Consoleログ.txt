config.js:537 ✅ config.js (キーマッピング完全一元管理版) loaded
config.js:538    🎯 アクション中心設計: すべてのショートカットをTEGAKI_KEYMAPで管理
config.js:539    🎯 コンテキスト対応: vMode, Ctrl, Shift, Alt を柔軟に処理
config.js:540    🎯 カメラ反転 vs レイヤー反転: Vモードで自動切り替え
config.js:541    🎯 H: キャンバス水平反転 / V+H: レイヤー水平反転
config.js:542    🎯 Shift+H: キャンバス垂直反転 / V+Shift+H: レイヤー垂直反転
config.js:543    🎯 レガシー互換: 既存コードとの後方互換性を維持
config.js:544    🎯 デバッグ支援: window.TEGAKI_KEYMAP.debugShowMapping() でマッピング一覧表示
config.js:545    🎯 UI準備完了: getUIConfigData() で設定画面用データ取得可能
coordinate-system.js:32 🧭 CoordinateSystem: システム統合改修版 初期化
coordinate-system.js:730 ✅ coordinate-system.js loaded (システム統合改修版)
coordinate-system.js:731 🔧 改修完了項目:
coordinate-system.js:732   🆕 applyLayerTransform(): 統一レイヤー変形API
coordinate-system.js:733   🆕 normalizeTransform(): 変形データ正規化
coordinate-system.js:734   🆕 combineTransforms(): 変形合成
coordinate-system.js:735   🆕 screenToWorld/worldToScreen(): キャッシュ対応座標変換
coordinate-system.js:736   🆕 localToWorld/worldToLocal(): レイヤー座標変換
coordinate-system.js:737   🆕 getLayerBounds(): 統一境界取得
coordinate-system.js:738   🆕 distance/angle/normalizeAngle(): 数学関数統合
coordinate-system.js:739   🆕 normalizeVector/dotProduct/crossProduct(): ベクトル計算
coordinate-system.js:740   🆕 diagnoseReferences(): システム統合診断
coordinate-system.js:741   🆕 runTransformTests(): 座標変換テスト
coordinate-system.js:742   🆕 runPerformanceTest(): パフォーマンス測定
coordinate-system.js:743   🔧 EventBus完全統合・キャッシュシステム
coordinate-system.js:744   🔧 LayerSystem/CameraSystem/AnimationSystem参照統合
coordinate-system.js:745   🔧 座標系混在問題・API断片化解消
coordinate-system.js:746   ✅ PixiJS v8.13 完全対応
coordinate-system.js:747   ✅ システム間連携強化
event-bus.js:143 ✅ system/event-bus.js Phase 2: 優先度機能追加版 loaded
state-manager.js:291 ✅ state-manager.js (Export Manager対応版) loaded
camera-system.js:654 ✅ camera-system.js (キーバインディング変更対応版) loaded successfully
camera-system.js:655    - ✅ LayerSystemとの連携強化・キー処理重複回避
camera-system.js:656    - ✅ 素の方向キー処理をLayerSystemに委譲
camera-system.js:657    - ✅ Space + 方向キー: カメラ操作専用に限定
camera-system.js:658    - ✅ V + H反転処理の協調動作
camera-system.js:659    - 🔧 キー衝突の完全回避・責務分離明確化
camera-system.js:660    - EventBus統合・API統一完了
drawing-clipboard.js:603 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
drawing-clipboard.js:604    - ✅ CTRL+V behavior: overwrite active layer
drawing-clipboard.js:605    - ✅ Commit events: paste:commit, operation:commit
drawing-clipboard.js:606    - ✅ Thumbnail auto-update on paste
export-manager.js:95 ✅ export-manager.js loaded
png-exporter.js:47 ✅ png-exporter.js loaded
gif-exporter.js:199 ✅ gif-exporter.js (統合版) loaded
export-popup.js:259 ✅ export-popup.js loaded
ui-panels.js:496 ✅ ui-panels.js ExportPopup参照修正版 loaded
core-runtime.js:530 ✅ core-runtime.js エクスポート初期化強化版 loaded
core-runtime.js:531   ✅ ExportSystem確実初期化機能追加
core-runtime.js:532   ✅ 依存性明確化とエラーハンドリング
core-runtime.js:533   ✅ 既存機能完全維持
coordinate-system.js:63 🔗 CoordinateSystem EventBus integration configured
coordinate-system.js:47 ✅ CoordinateSystem initialized with canvas: 344x135
coordinate-system.js:757 🔄 CoordinateSystem auto-initialized
camera-system.js:50 CameraSystem: Initializing...
camera-system.js:76 CameraSystem: Creating containers...
camera-system.js:101 ✅ CameraSystem containers created
camera-system.js:194 ✅ CameraSystem events setup completed
camera-system.js:71 ✅ CameraSystem initialized (キーバインディング変更対応版)
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
coordinate-system.js:75 🔗 CameraSystem reference set in CoordinateSystem
coordinate-system.js:70 🔗 LayerSystem reference set in CoordinateSystem
coordinate-system.js:80 🔗 AnimationSystem reference set in CoordinateSystem
core-runtime.js:44 === CoreRuntime リサイズ即時反映版 初期化開始 ===
core-runtime.js:109 ✅ CUT作成: CUT1 (344x135)
core-runtime.js:137 🔄 CUT切替: CUT1
core-runtime.js:58 ✅ CoreRuntime 初期化完了
core-runtime.js:517 ✅ ExportSystem initialized
index.html:564 ✅ ExportSystem初期化成功
 console.log('=== ExportSystem診断 ===');
console.log('TEGAKI_EXPORT_MANAGER:', window.TEGAKI_EXPORT_MANAGER);
console.log('TEGAKI_EXPORT_POPUP:', window.TEGAKI_EXPORT_POPUP);
console.log('exportPopup (old ref):', window.exportPopup);
console.log('animationSystem:', window.animationSystem);
VM240:1 === ExportSystem診断 ===
VM240:2 TEGAKI_EXPORT_MANAGER: ExportManager {app: ju, layerSystem: LayerSystem, animationSystem: AnimationSystem, cameraSystem: CameraSystem, exporters: {…}, …}
VM240:3 TEGAKI_EXPORT_POPUP: ExportPopup {manager: ExportManager, selectedFormat: 'png'}
VM240:4 exportPopup (old ref): undefined
VM240:5 animationSystem: AnimationSystem {animationData: {…}, layerSystem: LayerSystem, cameraSystem: CameraSystem, app: ju, stage: Z, …}
undefined
// ===================================================================
// ブラウザのコンソールで以下を実行してエクスポートシステムを診断
// ===================================================================

// 1. ExportSystemの状態確認
console.log('=== ExportSystem診断 ===');
console.log('TEGAKI_EXPORT_MANAGER:', window.TEGAKI_EXPORT_MANAGER);
console.log('TEGAKI_EXPORT_POPUP:', window.TEGAKI_EXPORT_POPUP);
console.log('exportPopup (old ref):', window.exportPopup);
console.log('animationSystem:', window.animationSystem);

// 2. ExportManagerの登録状況
if (window.TEGAKI_EXPORT_MANAGER) {
    console.log('Registered exporters:', Object.keys(window.TEGAKI_EXPORT_MANAGER.exporters));
}

// 3. ボタンの存在確認
const exportBtn = document.getElementById('export-tool');
console.log('export-tool button:', exportBtn);
console.log('export-popup element:', document.getElementById('export-popup'));

// 4. 手動でポップアップ表示テスト
if (window.TEGAKI_EXPORT_POPUP) {
    console.log('✅ 手動テスト: window.TEGAKI_EXPORT_POPUP.show() を実行可能');
    // window.TEGAKI_EXPORT_POPUP.show(); // コメント解除で実行
} else {
    console.error('❌ TEGAKI_EXPORT_POPUP が存在しません');
}

// 5. イベントリスナーの確認
console.log('EventListeners on export-tool:', getEventListeners(exportBtn));

console.log('=== 診断完了 ===');
VM244:6 === ExportSystem診断 ===
VM244:7 TEGAKI_EXPORT_MANAGER: ExportManager {app: ju, layerSystem: LayerSystem, animationSystem: AnimationSystem, cameraSystem: CameraSystem, exporters: {…}, …}animationSystem: AnimationSystem {animationData: {…}, layerSystem: LayerSystem, cameraSystem: CameraSystem, app: ju, stage: Z, …}app: ju {stage: Z, renderer: kv, queueResize: ƒ, _cancelResize: ƒ, resize: ƒ, …}cameraSystem: CameraSystem {app: {…}, config: {…}, eventBus: EventBus, isDragging: false, isScaleRotateDragging: false, …}currentExport: nullexporters: {png: PNGExporter, gif: GIFExporter}layerSystem: LayerSystem {app: ju, config: {…}, eventBus: EventBus, currentCutContainer: Z, activeLayerIndex: 1, …}[[Prototype]]: Object
VM244:8 TEGAKI_EXPORT_POPUP: ExportPopup {manager: ExportManager, selectedFormat: 'png'}
VM244:9 exportPopup (old ref): undefined
VM244:10 animationSystem: AnimationSystem {animationData: {…}, layerSystem: LayerSystem, cameraSystem: CameraSystem, app: ju, stage: Z, …}
VM244:14 Registered exporters: (2) ['png', 'gif']
VM244:19 export-tool button: <div class=​"tool-button" id=​"export-tool" title=​"画像・アニメ出力">​…​</div>​flex
VM244:20 export-popup element: <div class=​"popup-panel" id=​"export-popup" style=​"left:​ 60px;​ top:​ 200px;​ min-width:​ 420px;​">​…​</div>​
VM244:24 ✅ 手動テスト: window.TEGAKI_EXPORT_POPUP.show() を実行可能
VM244:31 EventListeners on export-tool: {click: Array(1)}
VM244:33 === 診断完了 ===
undefined
