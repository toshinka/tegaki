========================================
エクスポート機能拡張 — 問題切り分けと改修計画書（修正版）
作成日: 2025-10-07
対象: PixiJS v8.13 お絵かきツール（現行ブランチ: v8.13_History10f に基づく）
参照: エクスポート機能拡張 改修計画書 (改訂版).txt, Consoleログ.txt
      (参照ファイル確認済み). 
      改訂計画書の元実装とロードログは確認済み。:contentReference[oaicite:2]{index=2} :contentReference[oaicite:3]{index=3}
========================================

1) 現象（ユーザー報告）
----------------------------------------
- 「エクスポートシステムが初期化されません」
- エクスポートポップアップからエクスポート処理が発火しない

2) まず確認した事実（ログ / 計画書より）
----------------------------------------
- 関連スクリプトはロード済み（ログに "export-manager.js loaded", "export-popup.js loaded" 等あり）。しかしロード＝インスタンス化ではない。:contentReference[oaicite:4]{index=4}
- 改修計画書は ExportManager/Exporter/ExportPopup を定義しているが、ExportPopup.setupUI が「省略」となっており、DOM の生成/確実な要素確保や初期化フローが不明。:contentReference[oaicite:5]{index=5}
- ExportPopup 内の updateProgress 内で document.querySelector('.progress-bar::after') のように無効／間違ったセレクタを参照している箇所がある（疑い）。これでは進捗表示が動作しない。:contentReference[oaicite:6]{index=6}

3) 推定される主因（優先度順）
----------------------------------------
A. ExportManager と各 Exporter は定義されているが「インスタンス化（初期化）」が行われていない／呼ばれていない。
   - スクリプト読み込みだけで new ExportManager(...) をしていない可能性が高い。
   - 結果として ExportPopup に渡す manager が undefined、または popup が DOM に存在していないのでイベント未登録。

B. ExportPopup の UI が DOM に存在しない（setupUI 未実装 or index.html に HTML を追加していない）。
   - setupEventListeners が要素取得に失敗し、クリックハンドラが登録されない。

C. 不正確な DOM セレクタ／実装ミス（例: '.progress-bar::after' の参照）は動作不良を招く（進捗更新が何も変化しない）。

D. 初期化の順序（EventBus / app / LayerSystem 等の依存関係）により、インスタンス化が「見かけ上行われていない」ように見えるケース。

4) 改修方針（制約）
----------------------------------------
- PixiJS v8.13 環境下での動作を最優先。
- ESモジュール不使用、file://での直接開き動作を意識。
- UIは最小・機能重視（装飾や演出は控える）。
- コンソールログは最小限（エラー時のみ明確に出す）。
- フェイルセーフで曖昧に動かすのは避け、依存性不足なら明確なエラーメッセージを出す。

5) 具体的改修（差分パッチ／挿入コード） — 必須箇所
----------------------------------------
- 要点:
  1) export-manager を確実にインスタンス化して window に露出
  2) 各 exporter を登録
  3) ExportPopup の setupUI を必ず実装して DOM 要素を生成（index.html に依存せず安全に動く）
  4) ExportPopup の updateProgress のセレクタ修正
  5) 初期化時に必要依存（window.app 等）が無ければ明確にエラーを出す（自動待ちや勝手なフェイルバックはしない）

- 5.1 core-runtime.js（DOMContentLoaded 内・初期化ブロックに以下を追加）
  - 既存のDOMContentLoaded 部分に追記する想定です（file:// 環境で追加）。
  - **注意**: 既に同等の初期化が実装されているか確認し、重複しないように統合してください。

  挿入コード（core-runtime.js の DOMContentLoaded の最後付近に追加）:
  --------------------------------------------------------------------
  (function initExportSystem() {
    try {
      // 明示的依存チェック（欠落時は明確にエラー出力）
      if (!window.app || !window.LayerSystem || !window.AnimationSystem || !window.CameraSystem) {
        console.error('[ExportInit] missing dependency: app/LayerSystem/AnimationSystem/CameraSystem');
        // 依存不足を EventBus に通知（存在すれば）
        if (window.TegakiEventBus && typeof window.TegakiEventBus.emit === 'function') {
          window.TegakiEventBus.emit('export:init:failed', { reason: 'missing-deps' });
        }
        return;
      }

      // ExportManager のインスタンス化（グローバル配置）
      if (!window.TEGAKI_EXPORT_MANAGER) {
        window.TEGAKI_EXPORT_MANAGER = new window.ExportManager(
          window.app,
          window.LayerSystem,
          window.AnimationSystem,
          window.CameraSystem
        );
      }

      const mgr = window.TEGAKI_EXPORT_MANAGER;

      // エクスポーター登録（存在チェックを行う）
      if (window.PNGExporter) mgr.registerExporter('png', new window.PNGExporter(mgr));
      if (window.GIFExporter) mgr.registerExporter('gif', new window.GIFExporter(mgr));
      if (window.APNGExporter) mgr.registerExporter('apng', new window.APNGExporter(mgr));
      if (window.WEBPExporter) mgr.registerExporter('webp', new window.WEBPExporter(mgr));

      // ExportPopup の生成（ExportManager を渡す）
      if (!window.TEGAKI_EXPORT_POPUP) {
        window.TEGAKI_EXPORT_POPUP = new window.ExportPopup(mgr);
      }

      // UI を開くための基本ハンドラ（既存UIにボタン id="btn-open-export" があれば接続）
      const openBtn = document.getElementById('btn-open-export');
      if (openBtn) {
        openBtn.addEventListener('click', () => window.TEGAKI_EXPORT_POPUP.show());
      } else {
        // ショートカットキー（例: E）登録は既存のキーマップ経由で行うことを推奨
        if (window.TEGAKI_KEYMAP && typeof window.TEGAKI_KEYMAP.bind === 'function') {
          window.TEGAKI_KEYMAP.bind('KeyE', () => window.TEGAKI_EXPORT_POPUP.show());
        }
      }

      // 初期化完了イベント
      if (window.TegakiEventBus && typeof window.TegakiEventBus.emit === 'function') {
        window.TegakiEventBus.emit('export:manager:initialized', { timestamp: Date.now() });
      }
      // 最小限の情報ログ
      console.info('[ExportInit] ExportManager initialized');
    } catch (e) {
      console.error('[ExportInit] unexpected error:', e);
    }
  })();
  --------------------------------------------------------------------

- 5.2 ui/export-popup.js（必須修正）
  - setupUI が省略されているため、**確実に DOM を生成**する実装を書きます。
  - また updateProgress が無効なセレクタを使っている点を修正します。

  置換／追加するメソッド（ExportPopup 内）:
  --------------------------------------------------------------------
  // setupUI: DOM が未定義なら生成（軽量・最小UI）
  setupUI() {
    let popup = document.getElementById('export-popup');
    if (!popup) {
      popup = document.createElement('div');
      popup.id = 'export-popup';
      popup.className = 'popup-panel';
      popup.innerHTML = ''
        + '<div class="popup-inner" style="padding:12px;max-width:360px;">'
        + '  <div class="formats" style="margin-bottom:8px;">'
        + '    <button class="format-btn selected" data-format="png">PNG</button>'
        + '    <button class="format-btn" data-format="gif">GIF</button>'
        + '    <button class="format-btn" data-format="apng">APNG</button>'
        + '    <button class="format-btn" data-format="webp">WEBP</button>'
        + '  </div>'
        + '  <div id="export-options" style="margin-bottom:8px;"></div>'
        + '  <div id="export-progress" style="display:none;margin-bottom:8px;">'
        + '    <div class="progress-text">0%</div>'
        + '    <div class="progress-bar" style="background:#eee;height:8px;border-radius:4px;overflow:hidden;">'
        + '      <div class="progress-fill" style="width:0%;height:100%;"></div>'
        + '    </div>'
        + '  </div>'
        + '  <div class="popup-actions" style="display:flex;gap:8px;justify-content:flex-end;">'
        + '    <button id="export-execute">Export</button>'
        + '    <button id="export-cancel">Cancel</button>'
        + '  </div>'
        + '</div>';
      document.body.appendChild(popup);
    }
    // フォーマットボタンは setupEventListeners でも拾えるが、ここで選択初期化だけ確保
    this.updateOptionsUI(this.selectedFormat);
  }

  // updateProgress: 無効なセレクタ '.progress-bar::after' を使っていたため修正
  updateProgress(data) {
    const progressFill = document.querySelector('#export-progress .progress-fill');
    const progressText = document.querySelector('#export-progress .progress-text');

    if (data && data.current && data.total) {
      const percent = Math.round((data.current / data.total) * 100);
      if (progressFill) progressFill.style.width = `${percent}%`;
      if (progressText) progressText.textContent = `${percent}%`;
    } else if (typeof data.progress === 'number') {
      // 単一進捗数値が来た場合（拡張対応）
      const p = Math.round(data.progress * 100);
      if (progressFill) progressFill.style.width = `${p}%`;
      if (progressText) progressText.textContent = `${p}%`;
    }
  }

  // setupEventListeners: EventBus の存在確認を厳密に行う
  setupEventListeners() {
    // format buttons: イベントデリゲートで堅牢に
    document.addEventListener('click', (ev) => {
      const btn = ev.target;
      if (btn && btn.classList && btn.classList.contains('format-btn')) {
        if (btn.classList.contains('disabled')) return;
        this.selectFormat(btn.dataset.format);
      }
      if (btn && btn.id === 'export-execute') {
        ev.preventDefault();
        this.executeExport();
      }
      if (btn && btn.id === 'export-cancel') {
        ev.preventDefault();
        this.hide();
      }
    });

    // イベントバス登録（存在チェックしてから）
    if (window.TegakiEventBus && typeof window.TegakiEventBus.on === 'function') {
      window.TegakiEventBus.on('export:progress', (data) => {
        this.updateProgress(data);
      });
      window.TegakiEventBus.on('export:completed', () => {
        this.hide();
      });
      window.TegakiEventBus.on('export:aborted', () => {
        // 取消時 UI 復帰
        const progressEl = document.getElementById('export-progress');
        if (progressEl) progressEl.style.display = 'none';
      });
    }
  }
  --------------------------------------------------------------------

  - 補足: ExportPopup.constructor の中で setupUI() → setupEventListeners() の順で呼ぶこと。
    （既存コードはその順になっているが、setupUI が省略されていたため要注意）

- 5.3 小さなバグ修正（ExportManager.renderToCanvas の呼び出し安全性）
  - renderToCanvas が this.layerSystem.layersContainer を直接参照しているため layerSystem が undefined の場合に throw する。
  - 既に init コードで依存チェックを入れているため問題は小さいが、念のため renderToCanvas の冒頭で明示的チェックを行うことを推奨。

  例（renderToCanvas の先頭に追加）:
  --------------------------------------------------------------------
    renderToCanvas(options = {}) {
      if (!this.app || !this.layerSystem || !this.layerSystem.layersContainer) {
        throw new Error('ExportManager.renderToCanvas: missing app or layerSystem.layersContainer');
      }
      // ... 既存処理 ...
    }
  --------------------------------------------------------------------

6) フロー（誰が何を行うか）
----------------------------------------
- 起動順序（推奨）:
  1. system/event-bus.js を最初にロード
  2. core 系（app 初期化）をロードし window.app と各 System を確定
  3. export-manager.js / exporters/*.js をロード（定義のみ）
  4. export-popup.js をロード（定義のみ）
  5. DOMContentLoaded 内で initExportSystem() を実行し、ExportManager を new -> exporter登録 -> ExportPopup を new
  6. ユーザーが UI（既存ボタンかショートカット）で exportPopup.show() を呼び出す
  7. ExportPopup.executeExport -> ExportManager.export -> exporter.export 実行 -> ファイル出力

7) テスト手順（改修後の検証）
----------------------------------------
1) ブラウザで index.html を file:// で開く
2) コンソールに "[ExportInit] ExportManager initialized" が出ているか確認
   - 出ていない場合、console.error を読み原因（missing dependency 等）に従って修正
3) export ボタン（btn-open-export が存在するならそれ）を押すか、KeyE を押してポップアップが表示されるか確認
4) ポップアップで PNG を選び Export を押す -> ファイルがダウンロードされるか確認
5) GIF（既存ロジック）も同様に確認
6) 進捗バーが動くか確認（GIF / APNG の長尺フレーム処理で確認）

8) べクターペン注意点（運用ルール）
----------------------------------------
- 出力時にレイヤーやベクタ情報を DOM／Blob に含めない（PNG, GIF はラスタ化出力なので問題なし）。
- データの所有権・編集権限は LayerSystem 側で一元管理し、ExportManager は読み取り専用で snapshot を取るのみ。
- ExportManager は書き換え機能を持たせない（安全のため）。

9) 備考（確認済みログ）
----------------------------------------
- ロードログに export-manager.js / png-exporter.js / gif-exporter.js / export-popup.js が "loaded" と記録されているが、インスタンス化ログは無かったため「ロードのみ」で止まっていたことを意味する可能性が高い。:contentReference[oaicite:7]{index=7}
- ExportPopup.setupUI が未実装（計画書に「省略」と明記）だったため、DOM が無いケースに備え完全自立型の setupUI を実装することを強く推奨。:contentReference[oaicite:8]{index=8}

10) 追加的改善（将来的・オプション）
----------------------------------------
- ExportManager に簡易的な状態監視 API（isReady / status）を追加し、UI から確実に状態を参照できるようにする。
- テスト用に（デバッグビルド）最小限の console.log を残すが、プロダクションでは非表示化する設定を用意する。

11) 変更ファイル一覧（まとめ）
----------------------------------------
- core-runtime.js ・・・ 初期化追加（initExportSystem）
- ui/export-popup.js ・・・ setupUI 実装、updateProgress 修正、setupEventListeners 改良
- system/export-manager.js ・・・ renderToCanvas 冒頭チェック（推奨）
- index.html（ある場合）・・・ btn-open-export（任意）追加、script 読込順確認（event-bus -> core -> export-manager -> exporters -> export-popup -> core-runtime init）

========================================
END OF DOCUMENT
========================================
