改修計画書（core-engine.js 分割）
1. 分割の目的

core-engine.js の肥大化を解消し、関心ごとに応じたモジュール化を行う。

今後の アニメーション化・GIF出力・二画面UI 等の拡張に耐えられるコード構造にする。

AIによる改修効率を重視し、役割ごとに分離した読みやすいAPI構造を提供する。

2. 新設ファイルと役割
📌 system/camera-system.js

役割: 座標変換・ズーム・パン・回転等の「カメラ操作」専用モジュール。

責務分離: coordinate-system.js は数学的変換を保持し、camera-system.js は「ユーザ入力やビュー制御」と「PixiJSステージ適用」を担当。

ガイドライン:

APIは 画面座標⇔論理座標 の一貫性を保証する。

PixiJS の stage.scale / stage.position の直接操作は必ずここを経由。

例:

CameraSystem.setZoom(level);
CameraSystem.pan(dx, dy);
CameraSystem.toWorldCoords(screenX, screenY);
CameraSystem.toScreenCoords(worldX, worldY);

📌 system/layer-system.js

役割: レイヤー管理（生成・削除・並び替え・回転・反転・透明度・表示/非表示）。

責務分離: 描画は PixiJS DisplayObject に委譲、レイヤーの「集合管理とAPI」を本モジュールに統一。

アニメ化視点: レイヤーごとに時間軸操作が可能な設計を前提。

ガイドライン:

レイヤーは 一意のID で管理（layerId）。

LayerSystem から直接 PixiJS Container を取得できるが、基本は公開API利用。

例:

LayerSystem.createLayer("background");
LayerSystem.moveLayer(layerId, {dx: 10, dy: 20});
LayerSystem.rotateLayer(layerId, 45);
LayerSystem.setVisibility(layerId, true);
LayerSystem.deleteLayer(layerId);

📌 system/drawing-clipboard.js

役割: コピー・ペースト・切り取り・履歴用の一時格納領域。

責務分離: LayerSystem に直接触らず、内部でクリップデータを保持し操作。

ガイドライン:

データ構造は PixiJS オブジェクトのシリアライズを前提にする（ただし当面は参照コピー可）。

将来Undo/Redoと統合予定 → APIは単純明快に。

例:

DrawingClipboard.copy(selection);
DrawingClipboard.cut(selection);
DrawingClipboard.paste(targetLayerId, position);
DrawingClipboard.clear();

3. 共通設計指針
EventBus

すべての新モジュールは EventBusを介して疎結合に通信。

例:

camera:changed

layer:created, layer:updated, layer:deleted

clipboard:changed

Config参照

config.js の値は直接参照せず、ConfigAccessor（ヘルパー）関数を用意する。

モジュールごとにConfigをバラバラに読まない。

例:

import { getConfig } from "./config.js";
const defaultZoom = getConfig("camera.defaultZoom");

命名ルール

APIは SystemName.動詞+対象 の一貫形式。

内部関数は _ プレフィクスで非公開を明示。

PixiJS v8.13 固有のAPIに依存する場合は コメントで明示。

禁止事項

core-engine.js に新しい処理を追加しない。
→ 必ず system/ の該当モジュールに切り出す。

座標系の直参照・PixiJS Containerへの直接操作は禁止。
→ 必ず CameraSystem / LayerSystem 経由。

4. 想定リスクと回避策

座標変換の不一致 → CameraSystemとCoordinateSystemの責務境界を文書化。

レイヤーAPI断片化 → すべて LayerSystem に統合し、直接PixiJS操作禁止。

EventBusの未統合 → 先にイベント命名規則を定義。

PixiJSバージョン混在 → すべて core-runtime.js にて明記し、コメントで固定バージョンを表記。

5. 今後の拡張を見据えた提案（追加アイディア）

Undo/Redoシステム: DrawingClipboard を基盤に履歴管理モジュール化。

レイヤーアニメーション化: LayerSystem にタイムライン属性を持たせ、将来 AnimationSystem に分離。

二画面分割対応: CameraSystemを複数インスタンス化可能な設計に。


改修計画：分割後の core-engine.js の役割と新3ファイル統合ガイド
1. core-engine.js の役割（分割後）

core-engine.js は エンジン本体ではなく、各システムをまとめて初期化・接続する「司令塔」 になります。

役割定義

初期化

PixiJS アプリケーションの作成

各 System モジュールの初期化呼び出し

Config 読み込みと初期値反映

EventBus のグローバル登録

システム間の統合

CameraSystem と CoordinateSystem の連携（ズームや座標変換）

LayerSystem と DrawingClipboard の連携（コピー/貼り付け先レイヤー制御）

各システム間のイベント中継

UI との接着

ui-panels.js やショートカット入力からの呼び出しを各 System に振り分ける

直接処理せず、必ず該当 System API を経由する

監督者的制御

「PixiJS依存処理を1か所に留める」ためのゲート役

バージョン固定（PixiJS v8.13）をコメント付きで保持

2. 新3ファイルの統合方法
📌 CameraSystem

core-engine.js からは 「カメラ関連イベントを一元管理」 するだけ。

統合ガイド:

import { CameraSystem } from "./system/camera-system.js";
CameraSystem.init(app.stage, EventBus);

EventBus.on("ui:zoom", level => CameraSystem.setZoom(level));
EventBus.on("ui:pan", ({dx, dy}) => CameraSystem.pan(dx, dy));

📌 LayerSystem

レイヤーは PixiJS Container を持つが、直接触らず必ず LayerSystem を介す。

統合ガイド:

import { LayerSystem } from "./system/layer-system.js";
LayerSystem.init(app.stage, EventBus);

EventBus.on("ui:create-layer", name => LayerSystem.createLayer(name));
EventBus.on("clipboard:paste", data => LayerSystem.insertClipboard(data));

📌 DrawingClipboard

単独では動作せず、LayerSystem への「出し入れ窓口」として働く。

統合ガイド:

import { DrawingClipboard } from "./system/drawing-clipboard.js";
DrawingClipboard.init(EventBus);

EventBus.on("ui:copy", sel => DrawingClipboard.copy(sel));
EventBus.on("ui:paste", ({targetLayerId, pos}) => {
  const data = DrawingClipboard.get();
  LayerSystem.paste(targetLayerId, data, pos);
});

3. core-engine.js の構造イメージ
// core-engine.js

// ==== 基本依存関係 ====
import { EventBus } from "./event-bus.js";
import { getConfig } from "./config.js";

// ==== System ====
import { CameraSystem } from "./system/camera-system.js";
import { LayerSystem } from "./system/layer-system.js";
import { DrawingClipboard } from "./system/drawing-clipboard.js";

// ==== エンジン初期化 ====
function initEngine(app) {
  // Config 読み込み
  const cfg = getConfig();

  // 各 System 初期化
  CameraSystem.init(app.stage, EventBus, cfg.camera);
  LayerSystem.init(app.stage, EventBus, cfg.layer);
  DrawingClipboard.init(EventBus);

  // UIとシステムを結ぶ
  bindUIEvents();
}

// ==== UI連携 ====
function bindUIEvents() {
  EventBus.on("ui:zoom", z => CameraSystem.setZoom(z));
  EventBus.on("ui:create-layer", n => LayerSystem.createLayer(n));
  EventBus.on("ui:copy", sel => DrawingClipboard.copy(sel));
  // ... etc
}

export { initEngine };

4. ガイドラインまとめ

core-engine.js

PixiJS と UI の 初期化・調停役

直接ロジックを書かず、各 System に丸投げ

EventBus 経由でのみ制御

CameraSystem

画面⇔ワールド座標変換、ズーム/パン/回転の唯一の窓口

LayerSystem

レイヤー（PixiJS Container群）の唯一の管理者

並び替え・削除・移動・変形もここ

DrawingClipboard

一時保存とレイヤー連携のみ

Undo/Redo 拡張もここから

5. リスク回避ポイント

PixiJSオブジェクトへの直接操作は禁止
必ず System API を通す。

EventBus を必ず使う
→ 各システムは疎結合を維持。

core-engine.js の役割を増やさない
あくまで「監督」と「中継」のみ。

👉 まとめると：
分割後の core-engine.js は「PixiJSとUIを統合するだけのオーケストラ指揮者」 にし、
3つの System ファイルは 専門職人（カメラ・レイヤー・クリップボード） として完全委任する構造が理想です。

分割手順設計（core-engine.js → system/）
0. 事前準備

system/ フォルダを作成（camera-system.js, layer-system.js, drawing-clipboard.js を配置予定）。

既存の core-engine.js はすぐ削らず、段階的に移す。

ルール: PixiJS の直接操作は System に移し、core-engine.js は中継役に留める。

1. 関数分類とタグ付け

まず core-engine.js 内の処理を読み取り、以下のカテゴリにタグ付けする：

Camera系

座標変換

ズーム／パン／回転処理

PixiJS stage.scale, stage.position の制御

Layer系

レイヤー作成・削除

レイヤー並び替え

移動／回転／反転／表示非表示

PixiJS Container 管理

Clipboard系

コピー／ペースト／切り取り

一時データ保持

Undo/Redo の土台

残留系 (Engine本体)

PixiJS アプリ生成

Config読み込み

EventBus生成

UIイベントのバインド

2. CameraSystem 分割手順

core-engine.js 内の座標変換関数 (toWorldCoords, toScreenCoords など) を抽出。

ズーム・パン操作関数を抽出。

PixiJS の stage.scale, stage.position を直接操作している部分を削除し、CameraSystem に移動。

camera-system.js に CameraSystem オブジェクトとしてまとめる。

core-engine.js では CameraSystem の初期化 (CameraSystem.init(stage, EventBus)) のみを残す。

3. LayerSystem 分割手順

レイヤー管理関連コード（createLayer, deleteLayer, moveLayer, rotateLayer, setVisibility など）を抽出。

PixiJS Container を新規生成する処理を LayerSystem に移動。

レイヤーIDの一意管理ロジックを追加（Map or Objectで管理）。

layer-system.js に LayerSystem オブジェクトとしてまとめる。

core-engine.js では EventBus 経由で呼び出すだけにする。

4. DrawingClipboard 分割手順

コピー／ペースト／切り取り処理を抽出。

PixiJS オブジェクト参照やシリアライズ処理がある場合は最小限で移行。

内部に _clipboardData を保持するように設計。

drawing-clipboard.js に DrawingClipboard オブジェクトを定義。

core-engine.js 側は EventBus のイベントで呼び出すのみ。

5. core-engine.js の整理

削除: 上記の処理群を削除し、代わりに System.init() の呼び出しを追加。

残す:

PixiJS アプリの生成

Config読み込み

EventBus初期化

UIとSystemの橋渡し（EventBus.on(...) → System.API 呼び出し）

6. 移行後の検証ポイント

座標変換の一貫性

CameraSystem と CoordinateSystem の整合性を確認。

レイヤー管理の統一性

UIや他のコードが直接 PixiJS Container に触っていないかチェック。

EventBusイベント名の統一性

"camera:changed", "layer:created", "clipboard:changed" など規則的に命名。

PixiJS バージョン依存の確認

v8.13 固有の書き方は core-runtime.js に集約。

7. 最終手順の流れまとめ

system/ フォルダを作成。

core-engine.js の処理を Camera / Layer / Clipboard に分類。

各 System ファイルを作成し、該当処理を移動。

core-engine.js を最小限の「初期化＋橋渡し」の形にリファクタ。

EventBusでUIイベントを各Systemに接続。

テスト（ズーム、レイヤー操作、コピー貼り付け）で動作確認。









