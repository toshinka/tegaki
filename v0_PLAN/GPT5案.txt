===============================
ブラウザお絵かきツール 改修計画書
===============================
対象: v8.13_History14 ブランチ
目的: 出力機能を GIF 中心から APNG + WebP 中心へ移行し、互換性を確保する。

--------------------------------
# 改修背景
- ふたば☆ちゃんねるでの手描き動画投稿は APNG でのみ作動する。
- GIF はサムネイルで動作するが、投稿時の本体動画用途には不適合。
- めぶきチャンネル等、新環境も見据え APNG + WebP 路線にシフトするのが合理的。
- GIF 出力機能は後方互換用に残すが、メインは APNG/WebP とする。

--------------------------------
# 実行環境制約
- PixiJS v8.13（CDN読み込み）
- ES2023 / モジュール未使用
- 実行: Chrome 最新 / file:// 直開き可能
- 禁止事項: Canvas2Dの乱用, TypeScript, Vite, ESM, bundler, Babel
- ベクターペン主体で、ラスターペンは最終段階まで未使用
- フォーカス: 可読性・改修容易性・AIによる自動改修支援

--------------------------------
# 全体方針
1. system/exporters 以下に「apng-exporter.js」「webp-exporter.js」を整備
   - GIF エクスポーターと同様に Blob を返す API とする
   - API 定義は統一: `exportAsBlob(frames, options) -> Promise<Blob>`

2. core-engine / export-manager 側でエクスポート選択肢を拡張
   - format: 'gif' | 'apng' | 'webp' で切り替え可能にする
   - Blob を返し、UI 層が URL.createObjectURL(blob) で `<img>` に渡せるようにする

3. UI 層の改修
   - export-popup.js: フォーマット選択肢に APNG / WebP を追加
   - timeline-thumbnail-utils.js: Blob URL を `<img>` に設定し、右クリック保存で元フォーマット保持可能にする

4. ライブラリ利用方針
   - GIF 同様、外部ライブラリを最小限に。
   - 候補:
     - APNG: "UPNG.js" （軽量 APNG エンコーダ、ESM不要）
     - WebP: "libwebpjs" または "webp-encoder" 系の軽量実装
   - いずれも ES2023 グローバルスコープで動作可能なビルドを利用

5. クリップボード機能
   - GIF 直接コピーは困難であるため、APNG/WebP を Blob として生成後
     `navigator.clipboard.write([ new ClipboardItem({ "image/png": fallbackFrame }) ])`
     のように静止PNGコピーを提供（静止画コピーのみ保証）
   - 本体アニメは Blob URL + ダウンロードボタン提供

--------------------------------
# 改修ファイルと作業内容
1. system/exporters/apng-exporter.js
   - 新規作成
   - 役割: frames 配列を APNG にまとめ、Blob(type:"image/apng") を返す
   - 内部: UPNG.js 利用可
   - API: `exportAsBlob(frames, options)`

2. system/exporters/webp-exporter.js
   - 新規作成
   - 役割: frames 配列を animated WebP にまとめ、Blob(type:"image/webp") を返す
   - API: `exportAsBlob(frames, options)`

3. system/export-manager.js
   - エクスポート選択肢に 'apng', 'webp' を追加
   - フォーマット別に該当 exporter を呼ぶ分岐を追加
   - 既存 GIF ルートは維持

4. ui/export-popup.js
   - 出力形式選択UIに APNG / WebP を追加
   - 出力後は Blob URL を生成しサムネイル用に渡す

5. ui/timeline-thumbnail-utils.js
   - `createThumbnailImageFromBlob(blob, filename)` ユーティリティを共通化
   - `<img src=objectURL>` 方式でアニメファイルを保持し、右クリック保存が元フォーマットで動作するようにする
   - ダウンロードボタンを追加可能にする

6. core-engine.js / core-runtime.js
   - export-manager の新APIを呼び出す側を改修
   - Blob を Promise で受け取り、UI に渡す

--------------------------------
# API 定義（統一仕様）
```js
// 全エクスポーター共通
async function exportAsBlob(frames, options) -> Promise<Blob>

// options 例
{
  fps: 12,
  quality: 0.9,
  transparent: true,
  filename: 'output.apng' // or .webp
}


将来展望

GIF: 後方互換用として残し、積極利用は推奨しない

APNG: ふたば投稿向けの標準出力形式

WebP: 汎用的・軽量な次世代フォーマットとして採用

クリップボードコピー: 静止PNGを保証、アニメは Blob URL ダウンロード利用

改修優先度

apng-exporter.js 実装

webp-exporter.js 実装

export-manager.js 拡張

export-popup.js + thumbnail-utils.js のUI拡張

テスト:

ふたば投稿でAPNGが正しく動くか確認

Chrome/Edge/SafariでAPNG/WebP保存が可能か確認

file:// 環境でもBlob URL表示が可能か確認


