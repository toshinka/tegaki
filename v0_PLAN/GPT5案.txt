ファイル: export-manager.js
概要:
  - PNG として要求された場合に自動的に APNG に切り替えるロジックあり。
  - generatePreview(format) は exporter.generateBlob を呼ぶ前提になっている（generateBlob が存在する exporter が必須）。
  - canvas 抽出・ダウンロード・クリップボード系は集中管理されている（良い）。

確認された問題点:
  1) generatePreview() は "exporter.generateBlob" を期待するが、UI側で別名のメソッドを呼んでいる（例: generateGifBlob）。
  2) renderToCanvas() の PIXI.render の呼び方は v8 でも使えるが、API 呼び出しで target を渡す形は微妙（現状動いていれば無視可）。ただし v8 の仕様に合わせた明示的な呼び方に整えると安全。
  3) export-manager は APNG や GIF エクスポーターが正しく登録され、グローバルライブラリ（UPNG, GIF.js）等がロードされている事を前提としている。外部ロード失敗時のハンドリングが弱い。

修正方針（優先度: 中→低）
  - (必須) exporter の公開 API を統一する: 全てのアニメ系エクスポーターは
      - async generateBlob(options) を実装する（プレビュー用）
      - async export(options) を実装する（ダウンロード用）
    とし、export-manager はこれだけを呼び出すようにする。
  - (推奨) renderToCanvas の呼び方を PIXI v8 推奨形式に合わせて明記し、例外は捕捉して人にわかるエラーメッセージを投げる。
  - (必須) generatePreview() のエラーメッセージを詳細化（missing lib / missing exporter / animationSystem unavailable など）。
  - (推奨) 外部依存（UPNG, GIF.js, gif.worker）未ロード時は UI にわかりやすく通知し、フェールバック方針を明示する（"APNG 未ロード" 等）。

参考差分（抜粋）:
  // export-manager.js: generatePreview の例外メッセージ化
  - const exporter = this.exporters[targetFormat];
  - if (!exporter || !exporter.generateBlob) { throw new Error('Preview not supported for format: ' + targetFormat); }
  + const exporter = this.exporters[targetFormat];
  + if (!exporter) { throw new Error('Preview failed: exporter not registered for format: ' + targetFormat); }
  + if (typeof exporter.generateBlob !== 'function') {
  +   throw new Error('Preview failed: exporter "' + targetFormat + '" does not implement generateBlob(options).');
  + }

テスト項目:
  - exportManager.registerExporter('gif', new GIFExporter(exportManager)); 等で登録→ exportManager.generatePreview('gif') が Blob を返すこと。
  - 外部 lib 未ロード時は generatePreview がわかりやすい例外を投げること。
---

ファイル: system/exporters/png-exporter.js
概要:
  - 単一フレーム PNG を生成する generateBlob を持つ（プレビュー対応あり）。実装は概ね良好。

確認された問題点:
  - 特になし（ただし API 名は他のエクスポーターと合わせるべき）。

修正方針:
  - 変更不要。ただし generateBlob の返り値が Blob であることを保証する（既に保証）。コメントで API を明記すること。

--- 

ファイル: system/exporters/apng-exporter.js
概要:
  - APNG 用の generateBlob/export を提供。
  - 内部で UPNG.encode を使って APNG を生成している。
  - レイヤー状態のスナップショット取得・復元を行い、各 CUT をレンダリングして frames と delays を作っている。

確認された問題点（優先度 高→中）:
  1) **遅延時間（delay）単位の誤り疑い**:
     - コード内で `const duration = cut.duration || (1000 / settings.fps); delays.push(Math.round(duration * 1000));`
     - もし cut.duration が（秒）単位であれば `*1000` は正しい（秒→ms）。だが `cut.duration` が既にミリ秒（ms）なら二重掛けになる。
     - ドキュメント・データ構造が不明なため、**必ず cut.duration の単位を仕様として明示化する必要**がある。推奨は「cut.duration は秒（浮動小数）で管理」か「ミリ秒で管理」のどちらかに統一。
  2) **UPNG がロードされていないと _checkUPNGAvailability() が例外を投げる**。UI 側で捕捉されていないと「発火しない」症状になる。
  3) **frames 配列に push しているデータの形式確認**:
     - frames に `imageData.data.buffer` を push しているが、UPNG.encode に渡す frames の仕様（RGBA Uint8Array または ArrayBuffer）を満たしているか確認が必要（概ね OK だが API に依存）。
  4) レンダリング時に `this.manager.animationSystem.applyCutToLayers(i); await this._waitFrame();` としているが、applyCutToLayers が同期で DOM 更新（PIXI の表示更新）を受けるには requestAnimationFrame のタイミングが必要。_waitFrame は requestAnimationFrame + setTimeout だが、確実性のためは `await new Promise(r => requestAnimationFrame(r));` のほうが確実。

修正方針:
  - (必須) `cut.duration` の単位を明文化/統一する。既存データに合わせて修正。推奨：**cut.duration は秒（小数）で保管** → APNG 整形時に `Math.round(cut.duration * 1000)` で ms に変換。
  - (必須) `_checkUPNGAvailability()` の例外は上位（ExportPopup など）でキャッチされユーザーへメッセージ表示する。たとえば "APNG ライブラリが読み込まれていません"。
  - (推奨) フレームの取得を `const rgbaBuf = new Uint8Array(imageData.data.buffer); frames.push(rgbaBuf);` のように明示しておく。
  - (推奨) _waitFrame を `await new Promise(r => requestAnimationFrame(r));` に変更。
  - (推奨) UPNG.encode の delay 単位を明記（ms で渡す）と注釈を付ける。

参考差分（抜粋）:
  - // duration 関連直し
  - const duration = (typeof cut.duration === 'number') ? cut.duration : (1 / settings.fps);
  - // cut.duration は「秒」仕様を前提 → ms に変換
  - delays.push(Math.round(duration * 1000)); // ms 単位
  - // フレーム push を明示
  - const rgbaBuf = new Uint8Array(imageData.data.buffer);
  - frames.push(rgbaBuf.buffer);

テスト項目:
  - cut.duration が秒（例: 0.1）でエクスポートして期待通りのフレーム遅延となること。
  - UPNG 未ロード時に明確なエラーを投げ UI が表示すること。
  - 生成 Blob が PNG タイプで APNG ビューアで再生されること。

---

ファイル: system/exporters/gif-exporter.js
概要:
  - GIF 生成は gif.js を使い、Worker を CDN から fetch して Blob URL を作る実装。
  - generateBlob と export を提供（generateBlob が generateBlob 統一 API として存在する）。

確認された問題点（優先度 高→中）:
  1) **quick-export-ui や他 UI が gifExporter.generateGifBlob() のような「別名」を期待している**（存在しないメソッド名）。つまり UI と exporter の API 名が不整合になっている。これが「ボタンを押しても発火しない」第一の原因。
  2) **file:// 環境（ローカル HTML 直開き）では fetch('https://cdn.jsdelivr.../gif.worker.js') がブロックされる / CSP・CORS で失敗することが多い**。現在の createWorkerBlobURL は外部 fetch に依存しているため、ローカルでの動作不安定。
  3) gif.js 本体（GIF コンストラクタ）およびその worker の存在チェックが弱い → 未ロード時に例外を投げ UI は黙る。

修正方針:
  - (必須) **API を統一**：exporter は `generateBlob(options)` を実装（既にある）→ UI は `exportManager.generatePreview('gif')` または `exporter.generateBlob()` を使うように修正。`generateGifBlob()` を呼んでいる箇所は全部 `generateBlob()` に差し替え。
  - (必須) createWorkerBlobURL は file:// 環境を検出してローカルの同梱 worker スクリプトを優先して使うルールを入れる。つまり
      1. まず `if (typeof GIF === 'undefined') throw` を行いチェック
      2. try fetch CDN; catch → fallback to `window.GIFWorkerBlob` (もし同梱されている場合) or throw user-friendly error instructing to open via http(s) server.
  - (推奨) gif.js と worker をプロジェクトに同梱し、相対パス（./vendor/gif.worker.js, ./vendor/gif.js）から読み込むようにして file:// でも動作するようにする。CDN は “オプション” に。
  - (推奨) createWorkerBlobURL の失敗時に UI に意味のあるメッセージを返す。

参考差分（抜粋）:
  - // quick-export-ui 側の呼び出しを修正する（後述）
  - // gif-exporter: createWorkerBlobURL に fallback を追加
  - async createWorkerBlobURL() {
  -   // 1) 同梱ローカルを優先
  -   try {
  -     const localResp = await fetch('./vendor/gif.worker.js');
  -     if (localResp.ok) { const localCode = await localResp.text(); return URL.createObjectURL(new Blob([localCode], {type:'application/javascript'})); }
  -   } catch(e){ /* ignore */ }
  -   // 2) CDN を試す
  -   try { ... fetch CDN ... }
  -   catch(err) {
  -     throw new Error('Worker script fetch failed. Running from file:// may block external fetch. Include ./vendor/gif.worker.js locally or run via http(s) server.');
  -   }
  - }

テスト項目:
  - local vendor ファイルを置いた状態で file:// で GIF エクスポート（preview）できること。
  - quick-export-ui の呼び出しが generateBlob に変更後、UI が発火すること。
  - Worker 取得に失敗した際に UI に説明的エラーが出ること。

---

ファイル: system/quick-export-ui.js
概要:
  - Quick Export UI（小型ポップアップ）。ショートカット Ctrl+E 等。
  - APNG / GIF / WebP をボタンで呼び出すが、APNG と WebP は未実装（暫定で GIF を代替に使用する実装がある）。

確認された問題点（優先度 高）:
  1) `handleExport` 内で `this.exportManager.exporters.gif.generateGifBlob()` を呼んでいる。`gif-exporter.js` は `generateBlob()` を実装しており `generateGifBlob` という名前は存在しない。→ **UI からの呼出が失敗している（例外が出てcatch に入る）**。これが「ボタン押しても発火しない」大きな原因。
  2) APNG ボタンの暫定フォールバックも同じ generateGifBlob 呼び出しになっているため APNG プレビューが発火しない。
  3) file:// 環境で File System API が使えない（ブラウザによる）場合はダウンロードにフォールバックするが、GIF 作成以前に createWorkerBlobURL/fetch で失敗している可能性が高い。
  4) `handleExport` は UI レベルで try/catch しているが、例外メッセージを status に出すだけで詳細ログが console.error されるのみ。ユーザーには「外部ライブラリ未ロード」「Worker fetch が失敗」「API 名不一致」などの具体的指示が必要。

修正方針（優先度: 高）:
  - (必須) `generateGifBlob()` 呼び出しを `generateBlob()`（引数 options あり）に変更する:
      - `const gifResult = await this.exportManager.exporters.gif.generateBlob();`
  - (必須) APNG ボタンは **exportManager.generatePreview('png')** か **exportManager.generatePreview('apng')** を使う方が一貫して安全。
      - 例: `const result = await this.exportManager.generatePreview('png');`（export-manager が png->apng 自動判定するため）
  - (必須) quickly detect file:// and if yes show a visible tooltip: "ローカル開発時は ./vendor/gif.worker.js 等を同梱するか、http(s) サーバーで開いてください"。
  - (推奨) handleExport の各分岐で使う API を export-manager 経由に集約（UI は exporter internals に依存しない）：
      - `const preview = await this.exportManager.generatePreview(format, options)`
      - or `await this.exportManager.export(format, options)`
    こうすれば UI と exporter の API 不整合を起こさない。

具体差分（抜粋）:
  - // 旧（問題）
  - const gifResult = await this.exportManager.exporters.gif.generateGifBlob();
  - // 新（修正）
  - const gifExporter = this.exportManager.exporters.gif;
  - if (!gifExporter || typeof gifExporter.generateBlob !== 'function') throw new Error('GIF exporter not available');
  - const gifBlob = await gifExporter.generateBlob();
  - blob = gifBlob;

  - // APNG ボタン処理（推奨）
  - // 旧: const tempResult = await this.exportManager.exporters.gif.generateGifBlob();
  - // 新:
  - const preview = await this.exportManager.generatePreview('png'); // exportManager will auto-select apng when needed
  - blob = preview.blob;

テスト項目:
  - quick-export-ui の GIF/APNG ボタンを押すと exportManager 経由で generateBlob/generatePreview が呼ばれ、 status に成功/失敗が表示されること。
  - file:// で起動した場合、ユーザー向けの説明が表示されること。

---

ファイル: ui/export-popup.js
概要:
  - ExportPopup は ExportManager.generatePreview / export を使ってプレビュー・ダウンロードを制御する（良い）。
  - プレビュー UI（img）に Blob URL を set して表示する。

確認された問題点:
  1) ExportPopup.executePreview は `this.manager.generatePreview(this.selectedFormat, {})` を呼ぶ。export-manager.generatePreview は exporter.generateBlob がある前提で OK。
  2) ただし export-popup 側で発生した例外（UPNG 未ロード, gif.worker fetch error, animationSystem エラー 等）をユーザーにわかりやすく伝える仕組みはあるが、例外メッセージの内容によりユーザーには「発火しない」ように見える場合がある（短いメッセージ or 瞬間的に消えるなど）。
  3) preview の MIME タイプが `image/png`（APNG）/`image/gif` であることを確認して img に set しているが、ブラウザによっては apng 再生に対応していない場合がある（この点はユーザー環境依存）。

修正方針（優先度: 中）:
  - (必須) 例外の具体メッセージをユーザー向けに整形する。例: "APNG を生成するためのライブラリが読み込まれていません (UPNG.js)。index.html に <script src='./vendor/upng.js'></script> を追加してください。"
  - (推奨) APNG が表示されない場合の代替（GIF への自動フォールバック）を UI に提示するか、ユーザーに明示する。
  - (推奨) プレビュー時に `URL.createObjectURL` した blob.type を `console.debug` に出す（デバッグ用・本番は抑制）。

テスト項目:
  - APNG 未ロード時に ExportPopup.executePreview が具体的な指示メッセージ（上記）を表示すること。
  - ブラウザで APNG をサポートしているかを判定するユーティリティ（簡易）を入れてメッセージを出すか検討。

---

共通の「外部リソース（ライブラリ）管理」提案（必須対応推奨）
  - 現在 CDN に依存している箇所があり、file:// でのローカル直開き前提では失敗することがある。
  - 対策:
    1) `vendor/` ディレクトリを作り、必要な外部スクリプト（upng.js, gif.js, gif.worker.js 等）をプロジェクト内に同梱する。
    2) index.html でまずローカルの vendor を試す。見つからなければ CDN にフォールバック（ただし file:// 環境は CDN を試せないのでユーザーに HTTP で開くよう促す）。
    3) 各 exporter 内で外部ライブラリの存在チェック（typeof UPNG !== 'undefined' など）を行い、未存在なら throw するが、エラーメッセージは UI 向けにわかりやすくする。

短期優先度作業一覧（実行順、担当: Claude）
  1) quick-export-ui.js の `generateGifBlob()` 呼び出しを `generateBlob()` に置換（全呼び出し箇所）。【重要・高】
  2) Exporter（gif）側で createWorkerBlobURL にローカル vendor フォールバックを追加。【高】
  3) export-manager.generatePreview の例外メッセージを明確化し、exporter.generateBlob がない場合はわかりやすく投げる。【中】
  4) apng-exporter の cut.duration 単位を明示化（仕様を決め、必要なら変換）。_waitFrame を requestAnimationFrame に変更。【中】
  5) index.html に vendor フォルダ参照の README セクションを追加（ローカル実行時の注意）。【中】
  6) export-popup の例外メッセージをユーザー指示付きに変更（UPNG 未ロードや worker fetch など）。【中】

レビュー & テストチェックリスト
  - [ ] quick-export-ui のボタンを押して Blob を取得できる（GIF/APNG 含む）。
  - [ ] APNG が生成される場合、exportManager._shouldUseAPNG() により png 指定でも apng が選ばれること。
  - [ ] file:// で問題が起きるケースについて、UI が「vendor を配置 or http(s) で開く」旨を表示すること。
  - [ ] 例外メッセージはユーザー向けに変更済み（技術文は console に、ユーザー向けは UI に）。
  - [ ] 全 exporter が `generateBlob` を提供していること。

コード修正（具体的抜粋例）
  - quick-export-ui.js (handleExport の該当部分)
    // 変更前（問題）
    // const gifResult = await this.exportManager.exporters.gif.generateGifBlob();
    // 変更後（修正）
    const gifExporter = this.exportManager.exporters.gif;
    if (!gifExporter || typeof gifExporter.generateBlob !== 'function') {
      throw new Error('GIF exporter not available (generateBlob missing).');
    }
    const gifBlob = await gifExporter.generateBlob();
    blob = gifBlob;
    filename = `animation_${this.getTimestamp()}.gif`;

  - export-manager.js (generatePreview より詳細なエラーメッセージ)
    // 変更前
    // if (!exporter || !exporter.generateBlob) { throw new Error('Preview not supported for format: ' + targetFormat); }
    // 変更後
    if (!exporter) {
      throw new Error('Preview failed: exporter not registered for format: ' + targetFormat);
    }
    if (typeof exporter.generateBlob !== 'function') {
      throw new Error('Preview failed: exporter "' + targetFormat + '" must implement generateBlob(options).');
    }

  - gif-exporter.js (createWorkerBlobURL にローカルフォールバック)
    async createWorkerBlobURL() {
      // Try local vendor first (so file:// works)
      try {
        const localResp = await fetch('./vendor/gif.worker.js');
        if (localResp.ok) {
          const localCode = await localResp.text();
          return URL.createObjectURL(new Blob([localCode], { type: 'application/javascript' }));
        }
      } catch (e) {
        // ignore; fallthrough to CDN
      }
      // CDN fallback
      try {
        const response = await fetch('https://cdn.jsdelivr.net/npm/gif.js@0.2.0/dist/gif.worker.js');
        const workerCode = await response.text();
        const blob = new Blob([workerCode], { type: 'application/javascript' });
        return URL.createObjectURL(blob);
      } catch (error) {
        throw new Error('Worker script fetch failed. If running locally (file://), place gif.worker.js into ./vendor/ and try again, or run via http(s) server. Original error: ' + error.message);
      }
    }

注意事項（運用上の指示）
  - ローカル直開き（file://）を想定しているため、外部 CDN に依存する worker やライブラリはプロジェクト内に同梱する運用を推奨する。
  - cut.duration の単位をプロジェクト全体で統一する（お勧め：秒で管理）。変更する場合は history / animation data 互換性に注意。
  - APNG のプレビュー可否はブラウザ依存（古いブラウザは APNG を再生できない）。その場合は GIF フォールバックを UI で案内する。

付録: デバッグ時のチェック手順（順序）
  1) ブラウザ開発者ツールの Console を確認。missing function / undefined などのエラーを特定。
  2) quick-export-ui でエラーが出ている場合は、console エラーの関数名（例: generateGifBlob is not a function）を修正。
  3) gif.worker fetch エラーが出ている場合は、ネットワークタブで 404/blocked を確認。file:// の場合は vendor 同梱を試す。
  4) APNG 生成失敗時は `_checkUPNGAvailability()` の例外を捕捉しているか確認。index.html に UPNG の読み込みがあるかを確認。
  5) export-popup で preview が空白な場合は result.blob.type を確認して mime を調べる（img タグがその mime をサポートしているか）。

まとめ（要点）
  - 最短で動かすにはまず **quick-export-ui.js の generateGifBlob 呼び出し→generateBlob に修正**すること（これだけでボタンが発火する可能性が高い）。
  - 併せて **gif-exporter の worker fetch のローカル fallback を追加**し、ローカル直開きを安定化すること。
  - APNG が動かない場合は **UPNG.js のロード確認**（未ロードなら index.html に同梱 or CDN を追加）と **cut.duration の単位統一**を行う。
  - UI は内部実装に依存せず export-manager の公開 API（generatePreview / export）を使う設計に寄せるのが安全で拡張性が高い。

--- end of file ---
