現状の問題点

タイムラインのサムネイルが反映されない

各CUTの「代表画像」となるべきものが正しく生成・更新されていない。

現状はレイヤーとCUTの関係が曖昧で、サムネイル更新処理が破綻している。

CUT間でレイヤーが共有されてしまう

CUT1 Layer1 に描いた絵が CUT2 Layer1 にも反映される。

レイヤー実体が共有されている可能性が高い（参照コピーになっている）。

提案する新しいモデル（CUTフォルダ方式）
データ構造
ProjectRoot
 ├─ CUT1 (Container)
 │   ├─ 背景Layer (Graphics or Sprite Container)
 │   ├─ Layer1
 │   └─ Layer2
 ├─ CUT2 (Container)
 │   ├─ 背景Layer
 │   ├─ Layer1
 │   └─ Layer2
 ...


各CUTを Pixi.Container (または自前のCutクラス) でラップ。

CUT内部にレイヤー群を持つため、「CUTを切り替える＝Containerの切り替え」として自然に扱える。

サムネイルは「CUTコンテナ全体をレンダリング → 背景＋Layer1など合成 → canvas化」すればよい。

実装難易度について

AIから見て難易度は下がります。理由：

今までの「CUT×Layerの2次元マトリクス管理」は複雑で参照ミスが起きやすい。

「CUTを単なるフォルダ(Container)としてレイヤーを保持」する方がPixiJSの仕組みに沿っている。

サムネイル生成も renderer.render(cutContainer) で済むので、管理が直感的。

さらにこの仕組みを「レイヤーフォルダ」にも流用できるため、拡張性が高い。




改修計画書（ドラフト）
1. データ構造整理

現行:
CUTとレイヤーを独立に管理し、インデックス参照で紐づけしている。

改修後:

CUT = Container

CUT.children = [背景Layer, Layer1, Layer2…]

各CUTごとに独立したレイヤーインスタンスを持つ。

現在のレイヤー操作UIは、選択中CUT内のレイヤー配列を対象にする。

2. レイヤー操作

新規レイヤー追加 → currentCut.addChild(newLayer)

レイヤー削除 → currentCut.removeChild(targetLayer)

表示順変更 → currentCut.setChildIndex(layer, newIndex)

3. CUT操作

新規CUT追加 → new PIXI.Container() を生成、初期レイヤーを複製（空orテンプレ）。

CUT切り替え → stage.removeChild(oldCut); stage.addChild(newCut);

コピー → Containerごとcloneする仕組みを用意。

4. サムネイル生成

サムネイルは各CUT単位で生成する。

方法：

const renderTexture = PIXI.RenderTexture.create({ width, height });
renderer.render(cutContainer, { renderTexture });
const sprite = new PIXI.Sprite(renderTexture);
// canvas.toDataURL() でUIサムネイル化


サムネイル更新タイミング：

レイヤー変更後

CUT切り替え時（必要なら）

5. 既存システムとの接続

timeline-ui.js

CUT単位でサムネイルを持つよう改修。

レイヤーUIは「選択中CUTの子供」だけを対象にする。

layer-system.js

グローバル配列管理をやめ、CUT内レイヤー配列にアクセスするよう変更。

gif-exporter.js

各CUTを順番に描画してフレーム化。

6. 拡張計画

レイヤーフォルダも Container化 して階層管理を統一。

UIで「フォルダ」を作成 → Containerを作るだけ。

改修ステップ

最低限のCUTフォルダ導入

CUTをContainer化して切替可能に。

レイヤーをその子として保持。

タイムライン改修

各CUTサムネイルをレンダリングして表示。

レイヤーUIとの接続

選択CUT内でのレイヤー操作を保証。

GIF出力の修正

CUTごとにフレーム化。

レイヤーフォルダ化拡張

CUT方式をレイヤーフォルダに流用。

✅ まとめると：
CUTをContainerとして扱う方式はPixiJSの構造に沿っており、実装難易度は確実に下がります。サムネイルやレイヤーの独立性問題も解決でき、後のフォルダ機能にも流用可能です。