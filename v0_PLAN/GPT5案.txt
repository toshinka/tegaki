現状の問題点の共通項

レイヤー作成／カット作成の履歴管理が不安定

1操作でHistoryに2カウントされる

Undoするときに効かない／二度押しでようやく消える

新規レイヤー作成後の最初のペン描画で挙動がおかしい

「操作登録のトランザクション境界」が不明確

→ つまり「どのシステムが履歴を持つか」「どのタイミングで履歴に記録するか」が曖昧になっている。

所有権の見直しポイント

Historyは「操作単位」で持つべき
→ LayerSystem, AnimationSystem など各サブシステムがバラバラに履歴を push すると多重登録が起こる。

状態の実データを一元管理する場所が必要

state-manager.js が既にあるけれど、中途半端に責務が散っているように見える。

Undo/Redoのためには「全ての変更対象オブジェクト」が一元的に参照される必要がある。

Commandパターンの徹底化

command-base.js や layer-commands.js があるが、今は半分だけ導入されていて「直接状態変更」＋「履歴push」が混ざっている。

改修の選択肢
A. 現行ファイル構造を維持しつつ修正

layer-commands.js, animation-system.js などから 直接 History に push しないようにする。

すべての操作は必ず CommandBase を継承したクラス経由で行い、History に登録。

state-manager.js を「唯一のデータ所有者」に寄せて、layer-system.js や animation-system.js はあくまで 表示や補助ロジックに専念。

メリット:

既存のファイル構造は保てる → Claude が今後も改修しやすい

修正範囲が限定的

デメリット:

state-manager.js が肥大化しやすい

過去に直書きしている部分を全てCommand経由に書き直す必要あり

B. ファイル統合・再設計（History中心に再編）

history.js を中心に据え、以下の役割を分割

state-manager.js → 単なるデータストア（documentモデル）

command-*.js → 操作単位のクラス群

history.js → Commandを記録してUndo/Redo

layer-system.js などのサブシステムは 絶対に状態を持たず、必ず state-manager 経由で更新

メリット:

Undo/Redoが一貫して堅牢になる

所有権が明確になり、「誰がデータを持つか」が迷子にならない

拡張（例えば「Redo後に新しい操作したら枝分かれを管理する」など）がしやすい

デメリット:

構造を大きく見直すため、Claudeへの依頼時に手間が増える

開発途中のコード量が増えているので、一度リファクタリング期間が必要

GPT視点でのおすすめ

B案（History中心への再設計）を軽く導入する形が良いと思います。
→ 完全に再設計すると大掛かりなので、まずは **「全操作をCommand経由に通す」**ルールを徹底。
→ その後、必要に応じてstate-managerを「唯一の所有者」として整理。

次のステップ提案

どこでHistoryにpushしているかを調査（layer-commands.js、animation-system.js など）

Commandパターンの一本化ルールを決める

「状態更新は必ずCommand経由」

「Commandは必ずHistoryにpushされる」

その上で、state-manager.jsを「単なる状態保持のストア」として整理していく