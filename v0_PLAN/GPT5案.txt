概要（目的）

不具合：

V（レイヤー移動モード）を 入れることはできるが解除できない（ポップアップが消えない／再度 V 押しで解除されない）

ショートカット P（ペン） と E（消しゴム）が 消えている → 復活させる

方針：

既存機能を壊さない（必要最小限の修正）

モード切替・UI 表示は 単一の状態管理（LayerSystem または EventBus） に集約

Global な KeybindManager（軽量）を導入してショートカットを一元化

レイヤーの移動/回転/反転は LayerSystem に集約

コードは ES モジュール（import）を使わない前提（<script>で読み込む従来構成）

PixiJS v8.13 系の CDN を想定（8.13.1 / 8.13.2 推奨）で互換性確認済み。 
GitHub
+1

修正の要点（高レベル）

V キーのトグル不具合修正

原因想定：V 押下で「移動モードに入る」処理はあるが、解除処理（state=false）や popup.close()、およびドラッグハンドラの解除が分散しており、再度押しても解除されない（イベントリスナ重複／状態参照不整合）。

対策：LayerSystem.toggleMoveMode() を実装 / 修正してenter/exit を必ず双方向で完結させる。ポップアップの show/hide、ドラッグリスナの add/remove、マウスカーソル変更などをここに集約する。

P/E のショートカット復活

原因想定：古い Keymap が削除 or UI 側でハードコード解除された可能性。

対策：KeybindManager を（core-runtime.js か ui-panels.js の起動シーケンス内に）実装し、P→tool:pen、E→tool:eraser を必ず定義。ツール切替イベントは EventBus 経由で伝搬。

EventBus / API 統合

現状想定：EventBus が断片化（複数ファイルで個別に new EventTarget／custom emitter）しているため、モード状態/ツール状態の一貫性が取れない。

対策：core-runtime.js に**単一の global EventBus（小さな実装）**を置き、LayerSystem・UI・CameraSystem・KeybindManager がこれを参照する形に変更（参照渡し。window.AppEventBus などグローバル名を推奨）。モジュール化は行わない（ESM禁止のため）。

座標変換・レイヤー API の点検

座標系（スクリーン <-> 世界 <-> レイヤーローカル）が混在していると、移動時に位置ズレが発生する。coordinate-system.js の API を明文化して toWorld, toScreen, toLocal を用意し、全てのシステムが同 API を使うよう指導。

Layer API は LayerSystem に集約（layer.move(dx,dy)・layer.setPosition(x,y)・layer.rotate(angle)・layer.flip(axis) など）。外部からはこれ以外触らせない（カプセル化）。

コーディング規律

禁止事項順守（no import, no ESM, no bundler）

console.log は最小（console.debug を dev 用に残す）

命名規約、API ドキュメント（簡易）を付与

具体的な改修手順（工程・優先度付き）

工程は最小破壊で実施。すぐ動かせる順で記載。

1. リファクタリング・準備（30〜60分想定）

（a）core-runtime.js にグローバル EventBus を追加（window.AppEventBus = new EventTarget() のような軽量実装）。

（b）core-runtime.js の起動順（init）を確認して system/* を EventBus に接続させる。

（c）ui-panels.js に軽量 KeybindManager を追加（下記コード参照）。この段で P/E/V のデフォルトバインドを登録。

2. V トグル修正（最優先）

変更箇所：ui-panels.js（ポップアップ表示）、system/layer-system.js（実装の主要部分）、core-engine.js（古いキーハンドラがあれば削除または無効化）

実装：

LayerSystem に状態プロパティ movingLayerMode = false を追加

enterMoveMode(layerId) と exitMoveMode() を実装（必ず removeEventListener を呼ぶ）

toggleMoveMode() は enter と exit を確実に呼び分ける

ポップアップは UI 側で showMovePopup() / hideMovePopup() を EventBus 経由で受ける

テスト：

V 押下：ポップアップ表示、ドラッグでレイヤー移動可能

再度 V 押下：ポップアップ消える、ドラッグ無効、mousemove リスナが解除される（メモリリーク対策）

3. P/E ショートカット復活（並行実装可）

変更箇所：ui-panels.js（ツールUI）、core-runtime.js（初期登録）

実装：

KeybindManager.register('KeyP', ()=>EventBus.dispatch('tool:select','pen')) 等

ToolManager（既存がなければ軽量）で currentTool を管理し、描画イベントで if (currentTool === 'eraser') ...

テスト：P/E を押して描画モードが切り替わる（ツール名の小さな表示／コンソールで確認）

4. 座標系と Layer API 点検・修正

変更箇所：coordinate-system.js（最優先で API 明文化）、system/layer-system.js（利用側）

実装：

coordinateSystem に厳密な関数群：

toWorld(screenX, screenY, camera)

toScreen(worldX, worldY, camera)

toLocal(worldX, worldY, layer)

LayerSystem はこれらで常に変換する（直接 event.clientX を使わない）

テスト：ズーム/パンがある状態でもドラッグ移動が正しく動く

5. EventBus 統合の仕上げ

目的：状態変更／ツール変更／モード切替を EventBus 経由で一貫して通知する

イベント名規約（例）：

layer:move:start / layer:move:end

tool:selected (detail.tool = 'pen'|'eraser'|'select'|'move')

camera:changed (detail.transform)

変更箇所：全システムのイベント購読を見直し

6. 静的チェック（目視）

import 文がないか全ファイル検索（ESM 禁止）

PixiJS の CDN 表記が v8.13.x か確認（package.json があれば参照）

console.log の抑制（console.log を console.debug または削除）

具体コード例（差分・最小パッチ）

※下記は「そのまま貼るだけで動く」ことを目標にした簡潔サンプル。実際はリポジトリの既存関数名・命名に合わせて置換してください。

1) core-runtime.js — EventBus 追加（先頭付近）
// core-runtime.js — 先頭に追加
(function(){
  if (!window.AppEventBus) {
    window.AppEventBus = new EventTarget();
    // helper
    window.AppEventBus.emit = function(name, detail){
      this.dispatchEvent(new CustomEvent(name, {detail}));
    };
    window.AppEventBus.on = function(name, cb){
      this.addEventListener(name, evt => cb(evt.detail));
    };
  }
})();

2) ui-panels.js — KeybindManager（起動時に一括登録）
// ui-panels.js — KeybindManager（簡単実装）
(function(){
  const keyState = {};
  const bindings = {};
  function onKeyDown(e){
    if (e.repeat) return;
    const code = e.code || e.key;
    if (bindings[code]) {
      bindings[code].forEach(fn => fn(e));
      e.preventDefault();
    }
  }
  function onKeyUp(e){ /* 必要なら実装 */ }

  window.KeybindManager = {
    register(code, fn){
      bindings[code] = bindings[code] || [];
      bindings[code].push(fn);
    },
    unregister(code, fn){
      if (!bindings[code]) return;
      bindings[code] = bindings[code].filter(f=>f!==fn);
    }
  };
  window.addEventListener('keydown', onKeyDown);

  // デフォルト登録：P/E/V
  KeybindManager.register('KeyP', ()=> window.AppEventBus.emit('tool:selected', {tool:'pen'}) );
  KeybindManager.register('KeyE', ()=> window.AppEventBus.emit('tool:selected', {tool:'eraser'}) );
  KeybindManager.register('KeyV', ()=> window.AppEventBus.emit('tool:selected', {tool:'move'}) );
})();

3) system/layer-system.js — toggleMoveMode の実装（抜粋）
// layer-system.js — LayerSystem に追加する概念コード
class LayerSystem {
  constructor() {
    this.movingLayerMode = false;
    this._onPointerMove = this._onPointerMove.bind(this);
    this.activeLayer = null;
  }

  toggleMoveMode(layerId){
    if (!this.movingLayerMode) {
      this.enterMoveMode(layerId);
    } else {
      this.exitMoveMode();
    }
  }

  enterMoveMode(layerId){
    this.movingLayerMode = true;
    this.activeLayer = this.getLayerById(layerId) || this.activeLayer;
    // attach pointermove on canvas root
    const canvas = document.querySelector('canvas');
    canvas.addEventListener('pointermove', this._onPointerMove);
    // show popup via EventBus
    window.AppEventBus.emit('layer:move:start', {layerId:this.activeLayer?.id});
    // show small UI
    window.AppEventBus.emit('ui:showMovePopup', {layerId:this.activeLayer?.id});
  }

  exitMoveMode(){
    this.movingLayerMode = false;
    const canvas = document.querySelector('canvas');
    canvas.removeEventListener('pointermove', this._onPointerMove);
    window.AppEventBus.emit('layer:move:end', {layerId:this.activeLayer?.id});
    window.AppEventBus.emit('ui:hideMovePopup', {});
    this.activeLayer = null;
  }

  _onPointerMove(evt){
    if (!this.movingLayerMode || !this.activeLayer) return;
    // use coordinate-system API to convert
    const pos = coordinateSystem.toWorld(evt.clientX, evt.clientY, window.AppCamera);
    this.activeLayer.setPosition(pos.x, pos.y); // 必ず LayerSystem の API を使う
  }

  // ... 既存メソッド getLayerById, setPosition など
}

4) ui-panels.js — ポップアップの show/hide を EventBus で受ける（抜粋）
// ui-panels.js — popup 管理
window.AppEventBus.on('ui:showMovePopup', ({layerId})=>{
  const popup = document.getElementById('movePopup') || createMovePopup();
  popup.style.display = 'block';
  popup.dataset.layerId = layerId;
});
window.AppEventBus.on('ui:hideMovePopup', ()=>{
  const popup = document.getElementById('movePopup');
  if (popup) popup.style.display = 'none';
});

テスト手順（受け入れ基準）

起動（file:// で index.html を直接開く）してコンソールエラーが出ないこと。

V（KeyV）を押す：

ポップアップが表示される

マウス移動／ドラッグでレイヤーが動く

再度 V を押す：

ポップアップが消える

マウス移動でレイヤーが動かなくなる

pointermove リスナが解除されていること（DevTools で確認）

P を押す → 描画がペンに切り替わる（描画で確認）

E を押す → 消しゴムに切り替わる（消去で確認）

ズーム・パンしてもドラッグ移動がワールド座標で正しく動くこと（座標系チェック）

すべての console.log を最小化（リリースモードではログ出力なし）

コード品質チェックリスト（必須確認項目）

 ファイル内に import / export が存在しないか（ESM 禁止） — 全ファイル検索

 PixiJS の CDN が 8.13.x を参照しているか（index.html の <script src="...pixi.js@8.13.x...">）。もし古いバージョンが指定されている場合は 8.13.2 へ更新推奨。 
pixijs.com
+1

 coordinate-system.js に toWorld / toScreen / toLocal があるか

 LayerSystem に move/setPosition/rotate/flip 等が集約されているか

 EventBus が単一化されているか（複数の new EventTarget() を作っていないか）

 console.log の濫用を排除（console.debug に置換 or 環境判定）

 外部ライブラリ（pixi-filters 等）を使う場合は CDN のバージョン合わせと互換性確認

 メモリリークチェック（addEventListener/removeEventListener が対になっていること）

小さな運用ルール（チーム向け）

キー処理は KeybindManager に集約。UI 側は KeybindManager を参照せず EventBus で受ける。

LayerSystem の public API は move, rotate, flip, setPosition のみ。直接 PixiJS 表示オブジェクトに触らない。

すべてのシステムは window.AppEventBus を使う（ドキュメント化）。

変更は必ず小さなコミット単位で（例： fix(keybind): add KeybindManager , fix(layer): implement toggleMoveMode など）

追加チェック（ご依頼の項目） — 結果と対処方針

座標変換 API の不一致：高確率で発生。coordinate-system.js の API を統一（toWorld/toScreen/toLocal）して既存呼び出しを修正する必要あり。

レイヤー API の断片化：高確率で発生。LayerSystem に統合し、外部参照をラップする。

EventBus 統合の不完全性：高確率で発生。複数箇所で独自にイベント実装しているなら統合推奨。

設定参照の混在：設定（config.js）を single source にして各ファイルが window.AppConfig を読む形に。重複定義があれば統一。

PixiJS v8.13 以外の表記：ページ内の <script> 表記を全件チェック。もし @8.13.x 以外が混ざっていれば 8.13.2 に統一を推奨（互換性のため最新の patch を採用するのが安全）。 
GitHub
+1

import 文（ESM）記述：コード全体を grep して import / export を排除。もし見つかったら <script type="module"> を使わない方針のため、即座に差し替えが必要。

推奨優先度（短期→中期）

V トグルの即時修正（重大、すぐユーザが体感） — 高優先

P/E ショートカット復活 — 高優先

EventBus 一元化 + KeybindManager 統合 — 高

座標系 API の明文化 + 全体置換（要注意テスト） — 中

命名規則・ログ整理・ドキュメント小修正 — 低

納品物（提案）

改修差分パッチ（個別ファイルごとの patch / PR 用）

簡易テスト手順書（上記の受け入れ基準）

変更点の短い設計メモ（EventBus イベント一覧、LayerSystem API、KeybindManager API）

（要望があれば）私が差分コードを作成して can で出力します（1コミット分ずつ）

参考（外部情報）

PixiJS v8.13.0 / v8.13.x リリース情報（公式ブログ／GitHub）。新仕様や CDN の URL 確認に利用。