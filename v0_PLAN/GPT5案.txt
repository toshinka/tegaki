改修計画書

対象:

system/camera-system.js

system/layer-system.js

system/drawing-clipboard.js

旧: core-engine.js（v8.13_SatellitePlan_phase1b4版）

1. 背景

core-engine.js が肥大化していたため、カメラ処理・レイヤー管理・クリップボード処理を分離。

しかし、以下の問題が確認されている：

座標変換APIの不一致

レイヤーAPIの断片化

EventBus統合の不完全性

設定参照の混在

PixiJS APIの書き方に揺らぎ

ES Module文法の混入（import/export）

さらに、core-engine.js にあったロジックの一部が新規ファイルに継承されておらず、動作不整合の原因になる可能性あり。

2. 現在の問題点（新規3ファイル）
camera-system.js

問題:

screenToCanvasForDrawing と screenToCanvas が混在 → API不一致。

PIXI.Matrix.apply(point) の使い方が曖昧。

spacePressed/isDragging フラグの定義が散在。

継承漏れ:

updateCoordinates(screenX, screenY)（マウス追従表示等）未完全。

resizeCanvas の再計算ロジック不足。

CoreEngine 内にあった switchTool(toolName) の一部が欠落。

layer-system.js

問題:

createLayer が UI DOM 更新と状態管理を混在（責務分離不足）。

layerTransforms の二重管理（PIXI.Container にも transform がある）。

サムネイル更新 (requestThumbnailUpdate) が毎フレーム呼ばれパフォーマンス懸念。

継承漏れ:

rebuildPathGraphics(pathObj) の PixiJS Graphics API 書き方が v8.13 非互換。

isTransformNonDefault の判定が部分的。

updateLayerPanelUI / updateStatusDisplay が CoreEngine 依存のまま。

drawing-clipboard.js

問題:

copyActiveLayer / pasteLayer が浅いコピー → transform/paths の一部が共有参照になる恐れ。

EventBus 未統合（キーボードショートカットとの連携が弱い）。

継承漏れ:

CoreEngine 内にあった clipboardSystem.setLayerManager(layerManager) が反映されていない。

UI 側に依存（alert, console.log が残存）。

3. 改修方針
共通方針

APIの統一

CameraSystem: screenToCanvas を唯一の正規APIに → 描画専用挙動は forDrawing=true フラグで切り替え。

LayerSystem: 返却する Layer オブジェクト仕様を明確化（必須プロパティ: id, name, paths[], visible, opacity, transform）。

ClipboardSystem: 全レイヤーコピーは deep clone を徹底。

EventBus 統合

全 System の init(..., eventBus, CONFIG) に統一。

CoreEngine で SimpleEventBus を生成して全 System に渡す。

CONFIG の一元化

window.TEGAKI_CONFIG の直接参照を禁止。

this.config = CONFIG; に格納して参照。

PixiJS API の標準化

Graphics は beginFill → drawXxx → endFill に統一。

Matrix は (x,y,outPoint) の API 形で利用。

責務分離

LayerSystem は 状態と Pixi コンテナ管理専用。

UI 更新（DOM操作）は ui-panels.js 側に寄せる。

4. 改修タスク一覧
camera-system.js

 screenToCanvasForDrawing を screenToCanvas(screenX, screenY, {forDrawing:true}) に統一。

 updateCoordinates を core-engine から移植。

 resizeCanvas の計算を PixiJS v8.13 仕様で再実装。

 switchTool(toolName) を core-engine から完全移植。

 spacePressed / isDragging の状態管理を CameraSystem 内に集約。

layer-system.js

 createLayer を「Pixi Container生成＋layerData登録」に限定し、UI処理は外出し。

 rebuildPathGraphics を v8.13 準拠に修正（beginFill/drawShape/endFill）。

 isTransformNonDefault を core-engine 実装に合わせ移植。

 サムネイル更新を throttle 方式に変更。

 updateLayerPanelUI / updateStatusDisplay を EventBus 経由に。

drawing-clipboard.js

 copyActiveLayer / pasteLayer を deep clone 化（paths 配列・transform を複製）。

 EventBus 経由で copy/paste イベントを通知 → ショートカットキー処理と連携。

 setLayerManager(layerManager) を core-engine と同期。

5. 今後の拡張を見据えた設計ルール

「描画系は DrawingEngine、座標系は CameraSystem、状態管理は LayerSystem」 を厳守。

UI は全て ui-panels.js 側に寄せ、System 側は EventBus でイベント発火のみ。

LayerTransform は Pixi.Container に一元化、layerTransforms はキャッシュ or シリアライズ専用にする。

Clipboard は 非破壊コピー（deep clone） をルール化し、undo/redo 拡張に備える。

6. まとめ

新規3ファイルには core-engine.js からのロジック移植漏れと API 不統一 が散見される。

最優先タスクは API統一・CONFIG/EventBus統一・PixiJS API修正。

その上で、責務分離（UI外出し）とパフォーマンス改善（サムネイル更新）を実施。

完了後は AI が仕様書をもとに安全に改修できる構造 になる。



