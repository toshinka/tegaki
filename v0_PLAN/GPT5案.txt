# 改修計画書（PixiJS v8.13 お絵かきツール / タイムライン独立化対応）

## 1. 改修方針フロー

### 現状の問題点
- CUT が独立せず「同じキャンバスを参照」してしまう → 全 CUT に同じ絵が出る  
- Timeline サムネイル更新で「毎描画ごとに Extract」してしまい → 左上に一瞬キャンバスが見える & チラつきが発生  
- レイヤーパネルでは正常動作 → Timeline 側の設計が原因  

### 新しい処理フロー
1. **CUT（タイムラインの最上位単位）を独立した RenderTexture で保持**
   - 各 CUT は「独立したレイヤーフォルダ」として管理  
   - 共有参照ではなく CUT ごとに GPU メモリ上の RenderTexture を割当  

2. **描画時の流れ**
   - ペンで描く → 現在の CUT の「アクティブレイヤー」に描画  
   - 描画が完了したら：  
     a. GPU 上の RenderTexture を更新  
     b. Timeline サムネイルを再生成（必要時のみ Extract → Canvas2D）  

3. **サムネイル更新の最適化**
   - `timeline-ui.js` で更新は **差分検知**して最小限に抑える  
   - `extract.base64()` や `extract.canvas()` を呼ぶのは「表示用サムネイル更新の直後のみ」  

---

## 2. ファイルごとの責務とメソッド定義

### system/layer-system.js
- **責務**: CUT/レイヤー管理（データ構造＋Pixi.Container＋RenderTexture対応）
- **主要メソッド**
  - `createCut(id)` : 新しい CUT を生成、RenderTexture を割当
  - `getCut(id)` : CUT を取得
  - `setActiveCut(id)` : アクティブ CUT を切替
  - `createLayer(cutId, options)` : CUT 内に新規レイヤーを作成
  - `getActiveLayer(cutId)` : アクティブレイヤーを返す
  - `renderCutToTexture(cutId)` : CUT 全体を RenderTexture に再描画  

---

### system/animation-system.js
- **責務**: タイムラインと CUT の進行管理
- **主要メソッド**
  - `addCut()` : 新しい CUT を追加
  - `removeCut(cutId)` : CUT を削除
  - `gotoCut(cutId)` : 指定 CUT に移動
  - `playAnimation()` : CUT を順にレンダリングして再生
  - `pauseAnimation()` : 再生を停止

---

### ui/timeline-ui.js
- **責務**: CUT のサムネイル表示と更新
- **主要メソッド**
  - `refreshTimeline()` : 全 CUT サムネイルを再生成
  - `updateCutThumbnail(cutId)` : 特定 CUT のサムネイルを更新
    - 内部処理: `layer-system.renderCutToTexture()` → `extract.canvas()` → `<img>` に反映
  - `bindTimelineEvents()` : クリックや CUT 選択イベントを UI にバインド

---

### system/history.js
- **責務**: Undo/Redo 履歴管理
- **主要メソッド**
  - `pushState(cutId, layerId, action)` : 履歴追加
  - `undo()` : 一つ前の状態に戻す
  - `redo()` : 一つ先に進める
- CUT 単位で履歴を分離して保持すること（全 CUT 共通でなく独立管理）

---

### system/gif-exporter.js
- **責務**: CUT を連番画像化し GIF にまとめる
- **主要メソッド**
  - `renderCutFrames()` : 全 CUT を RenderTexture から PNG に変換
  - `exportGIF()` : PNG 連番を GIF に変換
  - `downloadGIF()` : Blob として保存

---

### core-engine.js
- **責務**: PixiJS アプリケーションの起動、システム初期化
- **主要メソッド**
  - `initPixiApp()` : PixiJS.Application の生成
  - `initSystems()` : 各 system の初期化呼び出し
  - `startRenderLoop()` : メインループ開始

---

## 3. 改修の優先順位
1. **CUT 独立化**  
   - layer-system.js で CUT ごとに RenderTexture 管理を導入  
   - timeline-ui.js で CUT ごとにサムネイルを GPU → Canvas2D 変換  

2. **Timeline サムネイル最適化**  
   - Extract の呼び出しを差分更新に制御  

3. **履歴（history.js）の CUT 単位対応**  
   - 全 CUT 共通 → 各 CUT 独立に修正  

4. **GIF Export の RenderTexture 対応**  
   - 高速で安定したエクスポートを実現  

---
