V8_rulebook.txt 改修案（ダブル・スター方式版）
序文

このルールブックは、Futaba Drawing Tool v8（PixiV8ベース）の開発における設計原則とコーディング方針をまとめたものである。
PixiV8を基盤として、キャンバス描画、レイヤー管理、ツール操作、イベントハンドリングのフローを効率的かつ可読性高く実装することを目的とする。

本改訂では、従来検討していた「列車型分割案」は削除し、ダブル・スター方式 を中心とする構造に置き換えた。

ダブル・スター方式とは

基本理念：中心となる2つの主星ファイル（A 発火・イベントハブ、B ツール処理）を軸に、肥大化が予想される部分のみを衛星ファイルとして分割する設計手法。

主星A

イベント受け取り、状態更新呼び出し、ツール呼び出しのハブ

発火する恒星のように、全体のフローを統括する

主星B

ツール・描画処理の中心

レイヤー操作やブラシ・消しゴムなどを担当

衛星（A1, B1, …）

状態管理や履歴、特定ツール処理など、主星が肥大化する可能性のある部分のみ切り出す

主星を追えばAIは衛星を意識せずとも理解可能

なぜダブル・スターなのか

AIがフローを追いやすい構造を実現するため

「中心となる2つのファイルに重要処理を集約」することで、状態や描画の追跡が単純化

将来的な衛星ファイル分割も柔軟に行えるため、改修や機能追加時のリスクが低い

原則

主星中心設計

全てのイベント・状態・描画フローは主星ABを中心にルーティング

AIが一方向のフローで追跡可能

衛星分割の最小化

肥大化が予想され、改修頻度が高い部分のみ衛星化

無駄な衛星は作らず、主星ABだけで可能な限り完結させる

命名規則の統一

Managerクラスや状態変数は役割が直感的に分かる名称を使用

重複・架空生成を防ぎ、AIの理解を助ける

状態管理の明確化

レイヤー状態、ツール状態、履歴などは衛星ファイルに分離可能

状態更新関数はA1A2などの衛星から呼び出されるが、フローは常に主星を経由する

描画と状態の分離

描画はBが担当、状態はAA1が管理

主星を見ればイベント→状態→描画フローが明確になる

実装上のポイント

主星ABに重要処理を集約

衛星ファイルは状態管理・履歴・ツール補助処理に限定

AIがフローを追いやすい命名と構造を遵守

将来的に新規ツールや描画処理が増えた場合も、衛星化で肥大化を抑制可能

適用例（参考）

A futaba_main.html

発火・イベントハブ、A1衛星呼び出し

B futaba_tools.js

ツール処理・描画・レイヤー描画

A1 layer_state.js  history_state.js  tool_state.js

レイヤーリスト、履歴、ツール状態を管理

主星Aは状態更新のみ参照