Futaba Drawing 改修・衛星A1計画書（A側レイヤー移植＋衛星化）
1. 目的

主星A（futaba_main.html）にレイヤー関連の必要最小限を移植して、状態をA内で一元管理する

肥大化するレイヤー状態や選択状態、履歴などをA1衛星（layer_state.js + history_state.js + tool_state.js）として切り出す

AIがイベントフローと状態を追いやすく、将来的な衛星化・改修が容易になる構造を作る

2. 現状分析
2.1 B（futaba_tools.js）

レイヤー操作全般（追加、削除、統合、描画）

レイヤーID管理や選択中レイヤー参照

レイヤー0（背景/用紙）の描画処理

描画関数やチェック柄描画処理

2.2 A（futaba_main.html）

発火イベント（UI、マウス、ショートカット）

キャンバス初期化、ループ制御

Bツール呼び出しハブ

レイヤー状態の一部管理（最小限）

2.3 問題点

B内にあるレイヤー状態の一部を改修する場合、イベント→状態→描画のフローがA側から追いづらい

主星Aの状態管理が肥大化する可能性あり

3. 改修方針

BからAへ移植するもの

レイヤーリスト（配列構造）

選択中レイヤーID

レイヤー0の状態（表示/非表示/透明フラグ/初期色）

レイヤーの追加・削除に必要な「状態更新用関数」※描画はBで継続

A本体に残すもの

発火イベントハンドラ（クリック、ドラッグ、ショートカット）

UI操作の入口（メニュー開閉、ポップアップ表示）

Bツール呼び出しのルーティング

キャンバス描画指示（Bに処理委譲）

A1衛星として切り出すもの

layer_state.js

レイヤー配列管理

レイヤー0情報

選択中レイヤーID管理

history_state.js

アンドゥ/リドゥ用の状態履歴

tool_state.js

現在選択中のツール、モード、ショートカット状態

4. 実装手順（概要）

状態管理衛星A1作成

A1/layer_state.js にレイヤーリスト・レイヤー0情報・選択レイヤーIDを移動

A1/history_state.js に履歴スタック・アンドゥ/リドゥ関数を移動

A1/tool_state.js にツール状態を管理する変数・関数を移動

A本体修正

レイヤー操作関数はA1に移行した状態を参照するよう書き換え

描画命令はBに委譲

イベントハンドラはAで受け取り、状態更新関数（A1）を呼ぶ

Bツール呼び出しもAのハブで行う

B側修正

Bは状態を直接参照せず、A1の状態を引数として受け取る

描画関数に状態を渡して処理する

5. AIコーディング視点

フローがシンプル

イベント（A）→状態更新（A1）→描画（B） の一方向フローで追える

改修容易性

レイヤー状態の変更・履歴追加はA1で完結

AIはA1だけを見れば状態管理部分の改修ができる

衛星化準備

今後、ツール状態や履歴が肥大化した場合、A1内部をさらに分割可能

6. 評価
観点	評価（10点満点）	コメント
見通し	9	状態管理を衛星化してA本体がスリム。フローが一目で追える
改修性	9	A1で状態管理が完結するので改修が容易
肥大化リスク	8	主星Aの肥大化は最小化され、将来的な衛星分割も容易
7. 今後の展望

将来的にレイヤー操作やツール状態がさらに複雑化した場合、A1内部でさらに細分化（例：layer_ops.js, tool_mode.js）

UIやキャンバス状態も同様にA1衛星化の余地あり

主星Aはイベントと呼び出しハブに集中させ、肥大化を抑える

=======================================================

A1衛星（layer_state / history_state / tool_state） 移植候補一覧
衛星モジュール	名前例	種類	内容・役割	AI視点評価（10点）	コメント
layer_state.js	LayerManager	Managerクラス	レイヤーリストの保持、レイヤー追加/削除/選択/最下層判定	9	名前が「レイヤーを管理する」直球で、AIが追いやすい。重複や曖昧さ少ない。
layer_state.js	layers	配列	レイヤーオブジェクトの格納	9	配列名が直感的で重複の心配なし。
layer_state.js	activeLayerId	状態変数	現在選択中レイヤーのID	9	選択レイヤーが明確に識別される。AIが参照しやすい。
layer_state.js	layer0	特殊レイヤー状態	最下層レイヤー（背景/用紙）の表示・透明・初期色	8	名前が直感的。ただし「layer0」は特別扱いなのでコメントで補足推奨。
history_state.js	HistoryManager	Managerクラス	アンドゥ/リドゥ履歴管理	9	「HistoryManager」で役割明確。AIが関数を探しやすい。
history_state.js	undoStack	配列	過去操作履歴の格納	9	配列名と用途が直結。重複リスクなし。
history_state.js	redoStack	配列	取り消し戻し用履歴	9	undoStackと対でわかりやすい。
tool_state.js	ToolManager	Managerクラス	現在のツール/モード/ショートカット状態管理	9	名前が直球。AIがフロー追跡しやすい。
tool_state.js	currentTool	状態変数	選択中ツールの識別子	9	明確で重複なし。
tool_state.js	toolMode	状態変数	ツールモード（ペン/消しゴム/選択など）	8	「mode」と「currentTool」の違いが明確ならAIに優しい。
tool_state.js	shortcutMap	状態変数	ショートカット割当マップ	9	説明的でAIが参照・更新しやすい。