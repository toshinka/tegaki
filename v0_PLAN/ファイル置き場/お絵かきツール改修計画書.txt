# お絵かきツール改修計画書
## Vキー移動モード不具合修正 & ショートカット復活

### 🔍 不具合分析

#### 1. Vキー移動モード解除不具合
**問題**: Vを押してアクティブレイヤー移動モードになるが、もう一度Vを押しても移動モードが解除されない

**原因分析**:
- `layer-system.js`の`keydown`イベントでVキー処理は実装されているが、`keyup`イベントでのVキー解除処理が不完全
- `toggleLayerMoveMode()`は実装されているが、実際のキーアップ処理が統合されていない
- `vKeyPressed`フラグの管理が一方向のみ（押下時のみ）で、解除処理が欠落

#### 2. P（ペン）・E（消しゴム）ショートカット消失
**問題**: `index.html`にはツールボタンが存在するが、対応するショートカットキーが機能していない

**原因分析**:
- `core-engine.js`の`UnifiedKeyHandler`でP・Eキーの処理は実装済み
- しかし実際のキーイベントリスナー設定で、レイヤーモード中の処理が優先されてツール切り替えが無効化される

#### 3. 座標・API・設定の不一致チェック結果
✅ **座標変換API**: `CameraSystem`の統一API使用で問題なし  
✅ **レイヤーAPI**: `LayerSystem`で統一されており問題なし  
✅ **EventBus統合**: 実装されており問題なし  
✅ **設定参照**: `TEGAKI_CONFIG`で統一されており問題なし  
✅ **PixiJS v8.13**: 全ファイルでv8.13対応済み  
⚠️ **ES import文**: 該当なし（ES2023モジュールなし構成で正しい）

---

### 🛠️ 改修計画

#### Phase 1: 緊急不具合修正 (最優先)

##### 1.1 Vキー移動モード正常化
**対象ファイル**: `system/layer-system.js`

**修正内容**:
```javascript
// keyupイベントリスナー追加
document.addEventListener('keyup', (e) => {
    if (e.code === 'KeyV' && this.vKeyPressed) {
        this.exitLayerMoveMode();
        e.preventDefault();
    }
});

// toggleLayerMoveMode()の修正
toggleLayerMoveMode() {
    if (this.vKeyPressed) {
        this.exitLayerMoveMode();
    } else {
        this.enterLayerMoveMode();
    }
}
```

##### 1.2 P・Eショートカット復活
**対象ファイル**: `core-engine.js`

**修正内容**:
```javascript
// UnifiedKeyHandlerのhandleKeyDown修正
case 'pen':
case 'eraser':
    // レイヤーモード中でも強制的にツール切り替え実行
    if (!e.ctrlKey && !e.altKey && !e.metaKey) {
        this.switchTool(action);
        if (this.layerSystem.isLayerMoveMode) {
            this.layerSystem.exitLayerMoveMode();
        }
        e.preventDefault();
    }
    break;
```

#### Phase 2: ユーザーショートカット設定基盤構築

##### 2.1 KeyConfig管理システム強化
**対象ファイル**: `config.js`

**既存の`TEGAKI_KEYCONFIG_MANAGER`を拡張**:
- ✅ 既に実装済み：`getActionForKey()`, `updateKeyConfig()`, `checkConflicts()`
- ✅ 既に実装済み：`getKeyConfigForUI()`で設定UI対応準備完了

##### 2.2 リアルタイムキーコンフィグ変更対応
**対象ファイル**: `core-engine.js`

**EventBus経由での動的更新**:
```javascript
// CoreEngineにキーコンフィグ更新リスナー追加
this.eventBus.on('keyconfig:updated', (data) => {
    console.log('🔧 KeyConfig updated, reloading key handlers');
    // キーハンドリングの再初期化は不要（getActionForKey()が動的参照のため）
});
```

#### Phase 3: UI設定パネル実装準備

##### 3.1 設定パネルHTML追加
**対象ファイル**: `index.html`

```html
<!-- ショートカット設定パネル（将来実装） -->
<div class="popup-panel" id="shortcut-settings" style="display: none;">
    <div class="popup-title">ショートカット設定</div>
    <!-- 動的生成される設定項目 -->
    <div id="shortcut-config-content"></div>
</div>
```

##### 3.2 設定パネルコントローラー
**対象ファイル**: `ui-panels.js`

```javascript
// ショートカット設定パネル管理クラス（将来実装）
class ShortcutConfigPanel {
    constructor(keyConfigManager, eventBus) {
        this.keyConfigManager = keyConfigManager;
        this.eventBus = eventBus;
        this.setupUI();
    }
    
    setupUI() {
        // TEGAKI_KEYCONFIG_MANAGER.getKeyConfigForUI()を使用してUI構築
        const configData = this.keyConfigManager.getKeyConfigForUI();
        this.renderConfigUI(configData);
    }
    
    // UIレンダリング・キー変更処理など
}
```

---

### 📋 改修優先順位

#### 🚨 **最優先** (緊急修正)
1. **Vキー移動モード解除不具合** - `layer-system.js`のkeyupイベント修正
2. **P・Eショートカット復活** - `core-engine.js`のキーハンドリング修正

#### ⭐ **高優先** (基盤整備)
3. **キーコンフィグ動的更新対応** - EventBus経由の設定変更反映
4. **設定パネルHTML準備** - 将来のUI実装用

#### 📝 **中優先** (将来実装)
5. **設定パネルUI実装** - ユーザーがショートカット変更可能なUI
6. **設定の永続化** - Cookie/サーバーサイド保存対応

---

### 🔧 技術仕様

#### キーバインディングアーキテクチャ
```
KeyEvent → TEGAKI_KEYCONFIG_MANAGER.getActionForKey() → UnifiedKeyHandler → 各System
                ↑
            設定データ参照
                ↑
        TEGAKI_KEYCONFIG (設定値)
                ↑
        将来：UI設定パネル
```

#### EventBus連携
```
keyconfig:updated → CoreEngine → UnifiedKeyHandler
shortcut:changed → UI更新 → リアルタイム反映
```

#### 互換性維持
- 既存の`TEGAKI_SHORTCUTS`は下位互換性のため保持
- `window.TEGAKI_KEYCONFIG_MANAGER`が新しいAPI
- 既存機能への影響は最小限

---

### 🧪 テスト計画

#### 不具合修正テスト
1. **Vキーテスト**: V押下→移動モード開始→V再押下→移動モード終了→ポップアップ消去確認
2. **ツールショートカットテスト**: P→ペン切り替え、E→消しゴム切り替え確認
3. **競合テスト**: レイヤーモード中のP/E処理確認

#### 基盤システムテスト
1. **キーコンフィグ変更テスト**: `updateKeyConfig()`呼び出し→即座反映確認
2. **競合検出テスト**: `checkConflicts()`で重複キー検出確認
3. **EventBus統合テスト**: 設定変更→イベント発火→UI更新確認

#### 互換性テスト
1. **既存機能継続テスト**: 全ての現在の機能が正常動作することを確認
2. **パフォーマンステスト**: キーハンドリングのレスポンス確認

---

### 📦 成果物

#### 修正ファイル
1. **`system/layer-system.js`** - Vキー解除修正
2. **`core-engine.js`** - P/Eショートカット修正
3. **`index.html`** - 設定パネルHTML追加（将来実装用）

#### 新規実装（将来）
1. **ショートカット設定UI** - `ui-panels.js`拡張
2. **設定永続化機能** - Cookie/サーバー連携

#### ドキュメント
1. **キーバインディング仕様書** - 開発者向け技術文書
2. **ユーザーガイド** - ショートカット一覧・カスタマイズ方法

---

### ⚡ 実装方針

#### 🚫 禁止事項遵守
- ❌ フォールバック処理なし（明確な動作のみ）
- ❌ エラー隠蔽なし（問題は明確に表面化）
- ❌ ユーザー向けエラー演出なし（開発中は直接的エラー表示）
- ❌ 二重実装回避（既存システムを最大活用）

#### ✅ 設計原則
- 🎯 **AI可読性最優先** - 明確な命名・構造化されたAPI
- 🔧 **段階的実装** - 緊急修正→基盤整備→将来実装
- 🚀 **既存機能保持** - 現在動作している機能への影響を最小限に
- 📋 **統一アーキテクチャ** - EventBus・CONFIG・座標系APIの一貫使用

---

### 🎯 最終目標

#### 短期目標（不具合修正）
- Vキー移動モードの正常動作
- P・Eショートカットの復活
- 全既存機能の継続動作保証

#### 中期目標（ユーザビリティ向上）
- ユーザー自由なショートカット設定機能
- リアルタイム設定変更・競合検出
- 直感的な設定UI

#### 長期目標（拡張性確保）
- 将来のGIFアニメ機能への対応準備
- LIVE2D/SPINEアニメーション機能への拡張準備
- 複数ユーザー設定プロファイル対応

---

**この改修計画により、現在の不具合を解決しつつ、将来のユーザーショートカット設定機能への準備を整えます。既存機能への影響を最小限に抑え、AIによる改修作業性を最優先に設計されています。**



※もしサイドバーにアイコンをいれるならば、これを一番下に設けてください。これを押してポップアップが開きます。ショートカット以外にも使う予定です。
settings
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#800000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-settings-icon lucide-settings"><path d="M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915"/><circle cx="12" cy="12" r="3"/></svg>