# PixiJS v8.13 アニメーション機能改修計画書（統合版）

## 📊 現状分析・既存実装確認

### ファイル別確認結果
- **event-bus.js**: ✅ 実装完了（EventBus統一）
- **timeline-ui.js**: ✅ 基盤実装済み（但し改修が必要）
- **ui-panels.js**: ✅ CoreRuntime統一API対応済み
- **animation-system.js**: 要確認（未調査）
- **core-runtime.js**: 要確認（未調査）

### 確認済み課題
1. **タイムライン表示バグ**: アニメアイコン押下時にタイムラインが表示されない
2. **UIレイアウト**: ループアイコン・ボタン配置・GIF書き出しボタン配置
3. **CTRL+V挙動**: 新規レイヤーから既存レイヤー上書きに変更が必要
4. **ショートカット**: Space→ALT+Spaceに変更
5. **Undo/Redo**: 実装状況不明

---

## 🔧 改修作業順序（効率化版）

### 【Phase 1】基盤整備・API統一
> **目的**: ファイル間の定義違いを防ぐため、まずはアーキテクチャを確認・統合

#### 1.1 APIドキュメント作成（約30分）
- EventBus標準化仕様書
- LayerSystem API仕様書  
- CoordinateSystem API仕様書
- AnimationSystem API仕様書

#### 1.2 横断チェック（約45分）
- [ ] PixiJS v8.13固定確認（HTML内CDN・コード内バージョン記述）
- [ ] EventBus重複実装チェック（`grep -r "EventBus\|eventBus" *`）
- [ ] LayerSystem断片化チェック
- [ ] 座標変換API統一性確認

---

### 【Phase 2】タイムライン表示修正
> **目的**: アニメアイコン → タイムライン表示の基本動作回復

#### 2.1 タイムライン表示経路調査（約20分）
**対象ファイル**: `ui/ui-panels.js`、`ui/timeline-ui.js`

```javascript
// 修正内容（ui-panels.js）
'gif-animation-tool': () => {
    // CHG: タイムライン表示イベント発火
    TegakiEventBus.emit('ui:toggle-timeline');
    this.updateToolUI('gif-animation');
}
```

#### 2.2 タイムライン表示受信処理修正（約15分）
**対象ファイル**: `ui/timeline-ui.js`

```javascript
// CHG: タイムライン表示イベント受信
setupEventListeners() {
    TegakiEventBus.on('ui:toggle-timeline', () => {
        this.toggle();
    });
    // 他のイベント...
}

// CHG: 表示/非表示メソッド実装
toggle() {
    this.isVisible = !this.isVisible;
    this.timelinePanel.style.display = this.isVisible ? 'block' : 'none';
    if (this.isVisible) {
        this.timelinePanel.classList.add('show');
    }
}
```

---

### 【Phase 3】UIレイアウト変更
> **目的**: アイコン変更・配置変更・ボタン重なり修正

#### 3.1 ループアイコン変更（約30分）
**対象ファイル**: `ui/timeline-ui.js`、CSS

**変更内容**:
- repeatアイコンSVGへ変更
- ON/OFF表示を反転点灯に変更
- ▶️の左隣りに配置（1マス空け）

```javascript
// CHG: ループボタン作成関数
createLoopButton() {
    const loopBtn = document.createElement('button');
    loopBtn.className = 'timeline-loop-btn';
    loopBtn.title = 'ループ切り替え';
    loopBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none" 
             stroke="#800000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
            <path d="m17 2 4 4-4 4"/><path d="M3 11v-1a4 4 0 0 1 4-4h14"/>
            <path d="m7 22-4-4 4-4"/><path d="M21 13v1a4 4 0 0 1-4 4H3"/>
        </svg>
    `;
    
    // CHG: 反転点灯によるON/OFF表示
    loopBtn.addEventListener('click', () => {
        this.isLooping = !this.isLooping;
        loopBtn.style.backgroundColor = this.isLooping ? '#800000' : 'transparent';
        loopBtn.style.color = this.isLooping ? '#ffffff' : '#800000';
        TegakiEventBus.emit('animation:loop:set', this.isLooping);
    });
    
    return loopBtn;
}
```

#### 3.2 ボタン配置変更（約20分）
**対象ファイル**: `ui/timeline-ui.js`、CSS

- ループボタン → ▶️の左隣へ
- GIF書き出しボタン → ループがあった位置へ移動
- +CUTボタン → FPS右隣へ移動

#### 3.3 サムネイルボタン修正（約25分）
**対象ファイル**: `ui/timeline-ui.js`

```javascript
// CHG: サムネイル矢印ボタンを左右配置に変更
createThumbnailNavigation() {
    const leftBtn = document.createElement('button');
    leftBtn.className = 'thumb-nav-btn thumb-nav-left';
    leftBtn.innerHTML = '◀';
    leftBtn.style.cssText = `
        position: absolute;
        left: 2px;
        top: 50%;
        transform: translateY(-50%);
        width: 16px;
        height: 16px;
        font-size: 10px;
    `;
    
    const rightBtn = document.createElement('button');
    rightBtn.className = 'thumb-nav-btn thumb-nav-right';
    rightBtn.innerHTML = '▶';
    rightBtn.style.cssText = `
        position: absolute;
        right: 2px;
        top: 50%;
        transform: translateY(-50%);
        width: 16px;
        height: 16px;
        font-size: 10px;
    `;
    
    return { leftBtn, rightBtn };
}
```

---

### 【Phase 4】CTRL+V挙動変更
> **目的**: 新規レイヤー作成 → アクティブレイヤー上書きに変更

#### 4.1 DrawingClipboard修正（約25分）
**対象ファイル**: `system/drawing-clipboard.js`

```javascript
// CHG: 新メソッド追加
pasteToActiveLayer() {
    const clipboardData = this.get();
    if (!clipboardData) return false;
    
    const activeLayerId = LayerSystem.getActiveLayerId();
    if (!activeLayerId) return false;
    
    // CHG: 履歴保存（破壊的操作のため）
    const previousBitmap = LayerSystem.getLayerBitmap(activeLayerId);
    History.push({
        undo: () => LayerSystem.drawBitmap(activeLayerId, previousBitmap),
        redo: () => LayerSystem.drawTexture(activeLayerId, clipboardData),
        meta: { type: 'paste-replace', layerId: activeLayerId }
    });
    
    // CHG: 既存画像を完全消去してから貼り付け
    LayerSystem.clearLayer(activeLayerId);
    LayerSystem.drawTexture(activeLayerId, clipboardData);
    
    TegakiEventBus.emit('layer:content-changed', { layerId: activeLayerId });
    return true;
}
```

#### 4.2 キーバインド変更（約15分）
**対象ファイル**: `core-runtime.js`

```javascript
// CHG: CTRL+Vハンドラー変更
handleKeyDown(e) {
    if (e.ctrlKey && e.code === 'KeyV') {
        e.preventDefault();
        DrawingClipboard.pasteToActiveLayer(); // CHG: 新メソッド使用
        return;
    }
    // 他のキー処理...
}
```

---

### 【Phase 5】ショートカット変更
> **目的**: Space → ALT+Spaceに変更、衝突回避

#### 5.1 キーバインド変更（約20分）
**対象ファイル**: `core-runtime.js`、`ui/timeline-ui.js`

```javascript
// CHG: ALT+Spaceに変更（両ファイル）
if (e.altKey && e.code === 'Space') {
    e.preventDefault();
    TegakiEventBus.emit('animation:play-toggle');
}
```

#### 5.2 競合チェック（約10分）
- ブラウザのALT+Space処理確認
- 他のALT+キー組み合わせとの衝突確認

---

### 【Phase 6】Undo/Redo確認・実装
> **目的**: 履歴機能の動作確認・必要なら実装

#### 6.1 既存実装調査（約15分）
```bash
# 既存のUndo/Redo実装を検索
grep -r "undo\|redo\|history" --include="*.js" .
```

#### 6.2 History実装（必要なら約45分）
**新規ファイル**: `system/history.js`

```javascript
// CHG: 軽量Historyシステム実装
const History = (() => {
    const undoStack = [];
    const redoStack = [];
    const MAX_HISTORY = 50;
    
    return {
        push(command) {
            // CHG: スタックサイズ制限
            if (undoStack.length >= MAX_HISTORY) {
                undoStack.shift();
            }
            undoStack.push(command);
            redoStack.length = 0; // Redo履歴をクリア
            TegakiEventBus.emit('history:changed', { 
                undoCount: undoStack.length, 
                redoCount: redoStack.length 
            });
        },
        
        undo() {
            const cmd = undoStack.pop();
            if (!cmd) return false;
            
            try {
                cmd.undo();
                redoStack.push(cmd);
                TegakiEventBus.emit('history:changed', { 
                    undoCount: undoStack.length, 
                    redoCount: redoStack.length 
                });
                return true;
            } catch (error) {
                console.error('History: Undo failed:', error);
                return false;
            }
        },
        
        redo() {
            const cmd = redoStack.pop();
            if (!cmd) return false;
            
            try {
                cmd.redo();
                undoStack.push(cmd);
                TegakiEventBus.emit('history:changed', { 
                    undoCount: undoStack.length, 
                    redoCount: redoStack.length 
                });
                return true;
            } catch (error) {
                console.error('History: Redo failed:', error);
                return false;
            }
        }
    };
})();
```

---

## ⚡ 改修ガイドライン（AI作業者向け）

### 必須事項
1. **変更箇所のマーキング**: `// CHG: 変更理由` コメント必須
2. **最小差分の原則**: 必要な箇所のみを変更
3. **API境界の尊重**: CoreRuntime経由でのEngine呼び出し
4. **イベント名統一**: EventBusのイベント名は規約に従う

### 危険な作業（禁止事項）
🚫 **フォールバック処理追加**: エラー隠蔽・問題先送り禁止
🚫 **バージョン混在対応**: PixiJS v7/v8同時対応禁止
🚫 **グローバル変数乱用**: 既存singletonオブジェクトを使用
🚫 **ユーザー向けエラー演出**: 開発中なので不要

### 作業フロー
```
1. 実装前チェック → 2. 小さな差分実装 → 3. 単体確認 → 4. 次へ
```

---

## 📝 テストケース（各Phase完了後に実施）

### Phase 2完了後
- [ ] アニメアイコンクリック → タイムラインパネル表示
- [ ] タイムラインパネル×ボタン → 非表示

### Phase 3完了後  
- [ ] ループボタンクリック → アイコン反転点灯
- [ ] サムネイル左右ボタン → 重なり無し・正常動作
- [ ] GIF書き出しボタン → 新しい位置で動作

### Phase 4完了後
- [ ] CTRL+C → CTRL+V → アクティブレイヤー内容置換
- [ ] 元画像が消去されること確認

### Phase 5完了後
- [ ] ALT+Space → アニメーション再生/停止
- [ ] ブラウザのALT+Spaceと衝突しないこと確認

### Phase 6完了後
- [ ] CTRL+Z → 直前の操作を取り消し
- [ ] CTRL+Y → 取り消した操作をやり直し
- [ ] 画像置換操作も正常に復元

---

## 🔍 横断チェックリスト（全Phase完了後）

### API整合性チェック
- [ ] EventBus統一 → 複数実装が無いこと
- [ ] LayerSystem API → 断片化が無いこと  
- [ ] CoordinateSystem → toWorld/fromWorld統一使用
- [ ] PixiJS v8.13固定 → v7記述が無いこと

### 座標変換整合性
- [ ] 全ファイルで座標基準統一
- [ ] CoordinateSystem経由の変換使用確認

### 設定参照統一性
- [ ] config.loop等の複数箇所参照 → EventBus経由配信に変更
- [ ] 二重実装検出 → 統合または削除

---

## 📋 成果物・ドキュメント

### 変更履歴記録
各ファイル冒頭に以下を追加：
```javascript
/*
=== 改修履歴 ===
2024-XX-XX: Phase2 タイムライン表示修正 (Claude)
2024-XX-XX: Phase3 UIレイアウト変更 (Claude)  
2024-XX-XX: Phase4 CTRL+V挙動変更 (Claude)
=== 改修履歴終了 ===
*/
```

### APIドキュメント作成
**新規ファイル**: `docs/API.md`

```markdown
# API仕様書（簡易版）

## EventBus
- `TegakiEventBus.on(event, handler)`
- `TegakiEventBus.off(event, handler)`  
- `TegakiEventBus.emit(event, data)`

## LayerSystem
- `LayerSystem.createLayer(options)`
- `LayerSystem.deleteLayer(id)`
- `LayerSystem.setActiveLayer(id)`
- `LayerSystem.clearLayer(id)`
- `LayerSystem.drawTexture(layerId, texture, opts)`

## AnimationSystem  
- `AnimationSystem.play()`
- `AnimationSystem.stop()`
- `AnimationSystem.setLoop(enabled)`
- `AnimationSystem.setFPS(fps)`

## History
- `History.push(command)`
- `History.undo()`
- `History.redo()`
```

---

## ⏱️ 予想作業時間

| Phase | 作業内容 | 予想時間 |
|-------|----------|----------|
| 1 | 基盤整備・API統一 | 1時間15分 |
| 2 | タイムライン表示修正 | 35分 |
| 3 | UIレイアウト変更 | 1時間15分 |
| 4 | CTRL+V挙動変更 | 40分 |
| 5 | ショートカット変更 | 30分 |
| 6 | Undo/Redo確認・実装 | 1時間 |
| 横断チェック | 最終検証 | 30分 |

**合計予想時間**: 約5時間45分

---

## 🎯 改修完了の判定基準

### 機能要件
1. ✅ アニメアイコン → タイムライン表示
2. ✅ repeatアイコン・反転点灯・適切な位置配置
3. ✅ GIF書き出し・+CUTボタンの適切な配置
4. ✅ サムネイル左右ボタン・重なり解消
5. ✅ CTRL+V → アクティブレイヤー上書き
6. ✅ ALT+Space → 再生/停止切り替え
7. ✅ CTRL+Z/Y → Undo/Redo動作

### 技術要件
1. ✅ PixiJS v8.13固定・他バージョン記述無し
2. ✅ EventBus統一・重複実装無し
3. ✅ LayerSystem API統合・断片化解消
4. ✅ 座標変換API統一
5. ✅ 既存機能の非破壊的改修

改修完了後は**2次元構造対応**（横軸:CUT/縦軸:Layer）のアニメツールとしての基盤が整い、Phase2（高度なアニメーション機能）開発に進めます。