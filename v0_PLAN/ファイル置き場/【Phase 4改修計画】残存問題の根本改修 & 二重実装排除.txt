================================================================================
【Phase 4改修計画】残存問題の根本改修 & 二重実装排除
================================================================================

■ 実行環境確認
環境: Chrome 最新 + PixiJS v8.13 CDN読み込み
開発方針: 可読性重視 / AI改修性最優先 / 機能実装重視

================================================================================
■ 問題1: 矢印キーの上下逆転（CRITICAL）
================================================================================

【症状】
Ctrl+↑↓ で「レイヤー入れ替え」になっており、これが「階層移動」ではなく「交換」動作
期待: Ctrl+↑ = レイヤーを上へ移動 / Ctrl+↓ = レイヤーを下へ移動

【原因箇所】
- core-engine.js L350-380: handleArrowKeys() の実装

現状コード:
```javascript
if (e.code === 'ArrowUp') {
    if (activeIndex < layers.length - 1) {
        // 配列操作で前後を入れ替え（swap）している
        const layer = layers[activeIndex];
        this.layerSystem.currentCutContainer.removeChildAt(activeIndex);
        this.layerSystem.currentCutContainer.addChildAt(layer, activeIndex + 1);
        this.layerSystem.activeLayerIndex = activeIndex + 1;
    }
}
```

問題点: PixiJS の addChildAt() は「指定位置に挿入」の動作だが、
先に removeChildAt() で削除するため「入れ替え」になっている。
背景レイヤー判定も「飛び越え禁止」という下位の制御。

【改修方針】
config.js の LAYER_HIERARCHY_UP/DOWN が正しく定義されているので、
core-engine.js の handleArrowKeys() がこれに従うよう修正。

配列操作の順序を変更して「単純な階層移動」に統一。

================================================================================
■ 問題2: CUT矢印キーの左右逆転（CRITICAL）
================================================================================

【症状】
矢印キー（Vモードなし）で CUT移動するが方向が逆
- 右キー → 前に戻る (期待: 次へ)
- 左キー → 次に進む (期待: 前へ)

【原因箇所】
timeline-ui.js L409-420: setupKeyboardShortcuts()

現状コード:
```javascript
case 'ArrowLeft':
    e.preventDefault();
    this.goToPreviousCutSafe();    // ← 左=前 (逆!)
case 'ArrowRight':
    e.preventDefault();
    this.goToNextCutSafe();         // ← 右=次 (逆!)
```

問題点: 単純な左右反転。関数名は正しいが呼び出しが逆。

【改修方針】
引数を入れ替えるだけで修正完了。

================================================================================
■ 問題3: CUT追加時に飛び順がバラバラ（MEDIUM）
================================================================================

【症状】
CUT追加 → 1, 3, 5, 2, 4 ... というように番号が順序不同になる

【原因分析】

(A) animation-system.js の createNewEmptyCut()
    - 新CUT作成時に animationData.cuts に push
    - タイムラインUIは即座に反映

(B) timeline-ui.js の createImprovedCutItem()
    - CUT名は cut.name を参照
    - cut.name は animation-system.js で「CUT${Date.now()}」で生成

(C) 「CUT番号整理」機能
    - executeRenameCuts() → animationSystem.renameCutsSequentially()
    - ここで 1, 2, 3... に番号付け直し

【考察】
CUT追加のたびに異なる日時ベース ID が生成されるため、
一旦番号を付けるまでは順序が不同に見える。

【改修方針】

Option 1: CUT作成時に自動採番 (推奨)
  - 「CUT番号整理」ボタンを不要に
  - CUT管理がシンプルに

Option 2: 現状維持 + UI改善
  - 「CUT番号整理」を常にON状態で実行
  - または自動実行トリガー

→ Option 1 採用: 
  animation-system.js の createNewEmptyCut() で
  生成直後に自動採番を実行

================================================================================
■ 問題4: ドラッグ&ドロップ並び替えが機能していない（HIGH）
================================================================================

【症状】
タイムラインのCUTをドラッグしても並び替わらない
レイヤーパネルのレイヤーをドラッグしても並び替わらない

【原因分析】

(A) timeline-ui.js L300-310: CUT順序変更時の Sortable
    - Sortable.create() で初期化
    - onEnd callback → animationSystem.reorderCuts()

(B) core-engine.js での layerSystem 側:
    - 現在「Sortable」が設定されているか未確認

【状態チェック】
1. Sortable は HTML内で CDN読み込み ✓
2. timeline-ui.js で Sortable.create() 呼び出し ✓
3. core-engine.js でも initializeSortable() が存在

【改修方針】

(1) timeline-ui.js:
    - updateCutsListImmediate() 内で Sortable再初期化を確認
    - 親要素 (cutsContainer) に正しく添付

(2) layer-system.js:
    - レイヤーパネルのSortable統合状況を確認
    - 現在「手動リオーダー」かもしれない

→ 確認フェーズが必要。改修計画内では「要確認」として記載。

================================================================================
■ 問題5: Space+Shift / Space+Shift+Drag の競合 & 上下逆転（MEDIUM）
================================================================================

【症状】
- Space+Shift (期待: タイムライン再生) が反応しない
- Space+Shift+ドラッグ (期待: カメラ回転拡縮) が上下逆転

【原因分析】

(A) config.js のキーマッピング:
    GIF_PLAY_PAUSE: Space + Ctrl （NOT Shift）
    
(B) 実際の timeline-ui.js L415:
    if (e.code === 'Space' && e.shiftKey && !e.ctrlKey ...)
    → Space+Shift では反応しない（期待と逆）

(C) Camera Scale Up/Down (Vモード+Shift+↑↓):
    - 実装箇所未確認

【改修方針】
config.js で GIF_PLAY_PAUSE を Space+Shift に変更
（Ctrl+Space は他の目的に取っておく可能性）

================================================================================
■ 問題6-7: レイヤー回転/拡縮の上下が逆（MEDIUM）
================================================================================

【症状】
V+Shift+↓ (期待: 拡大) → 縮小
V+Shift+↑ (期待: 縮小) → 拡大

回転も同様: V+Shift+← → 右回転 / V+Shift+→ → 左回転

【原因箇所】
camera-system.js または layer-system.js での実装が未確認
(ファイル取得対象外のため確認必要)

【改修方針】
以下のファイルを確認してから修正:
- system/camera-system.js (カメラ変形用)
- system/layer-system.js (レイヤー変形用)

スケール値を -1 倍にするか、↑↓ を反転させる。

================================================================================
■ 問題8-10: UI/UX改善（タイムラインパネル）（LOW）
================================================================================

【症状】
8. タイムラインパネル・CUTパネルに「影」がある（視覚ノイズ）
9. アクティブCUTの枠線が太すぎる（視覚的負担）
10. タイムラインパネルが透過表示されていない（要望）

【改修箇所】
timeline-ui.js L240-260: injectCompleteTimelineCSS()

現状:
```css
.timeline-panel { 
    box-shadow: 0 6px 16px rgba(128, 0, 0, 0.25) !important;
    background: rgba(255, 255, 238, 0.1) !important;
    backdrop-filter: blur(12px) !important;
}
.cut-item.active {
    box-shadow: 0 0 0 3px rgba(128, 0, 0, 0.3) !important;
}
```

改修方針:
- box-shadow 削除 → none
- .cut-item.active: 枠線を細く (3px → 1px または 2px)
- backdrop-filter: blur を効果的に保つ

================================================================================
■ 二重実装チェック
================================================================================

【確認項目と結果】

✓ (1) CUT追加処理
   - animation-system.js: createNewEmptyCut()
   - timeline-ui.js: addCutButton listener
   → 二重実装なし（フロー: UI → AnimationSystem）

✓ (2) History記録
   - core-engine.js: stopDrawing() 内で History.push()
   - animation-system.js: deleteCut() / reorderCuts()
   → 設計通り（動作確認が必要）

✓ (3) CUT選択/切り替え
   - timeline-ui.js: selectCutSafely()
   - animation-system.js: switchToActiveCutSafely()
   → 協調動作（二重実装なし）

⚠️ (4) Sortable初期化
   - timeline-ui.js: updateCutsListImmediate() 内で再初期化
   - index.html: window.TegakiUI.initializeSortable() 呼び出し？
   → 要確認（二重初期化の可能性）

⚠️ (5) レイヤーパネル更新
   - core-engine.js: setupCanvasEvents()
   - layer-system.js: updateLayerPanelUI()
   - timeline-ui.js: updateLayerPanelIndicator()
   → 分離されているが、updateLayerPanelUI() の実装を確認

✓ (6) キーボードショートカット
   - core-engine.js: UnifiedKeyHandler
   - timeline-ui.js: setupKeyboardShortcuts()
   - index.html: setupUnifiedKeyboardShortcuts()
   → 3箇所で実装されている可能性あり（要整理）

【二重実装の懸念】
- キーボード処理が複数ファイルに分散
  - index.html の setupUnifiedKeyboardShortcuts()
  - core-engine.js の UnifiedKeyHandler
  - timeline-ui.js の setupKeyboardShortcuts()
  
  → 実装を統一する必要あり

================================================================================
■ Phase 4 改修スケジュール（優先度順）
================================================================================

【Phase 4.1: CRITICAL 修正（即座）】

対象ファイル: core-engine.js, timeline-ui.js

修正項目:
1. core-engine.js L350-380: handleArrowKeys() の修正
   - レイヤー階層移動を「交換」から「移動」に変更
   - config.js の定義に完全準拠

2. timeline-ui.js L415-425: キーボードショートカット修正
   - 矢印キー左右を逆転させ修正

3. animation-system.js: CUT自動採番機能
   - createNewEmptyCut() 実行時に renameCutsSequentially() を呼ぶ
   - または手動採番を自動化

【Phase 4.2: キーボード処理の統一（HIGH）】

対象ファイル: config.js, core-engine.js, timeline-ui.js, index.html

修正方針:
- config.js の TEGAKI_KEYMAP が真実のソース
- core-engine.js UnifiedKeyHandler がキー解決エンジン
- index.html と timeline-ui.js の setupUnifiedKeyboardShortcuts() を削除/統合

→ キー処理は core-engine.js に一元化

【Phase 4.3: ドラッグ&ドロップ動作確認（MEDIUM）】

対象ファイル: timeline-ui.js, layer-system.js, index.html

確認・修正:
1. Sortable 初期化が重複していないか確認
2. レイヤーパネル側のドラッグ対応状況確認
3. 必要に応じて統一API設計

【Phase 4.4: Config キーマッピング見直し（MEDIUM）】

対象ファイル: config.js

修正項目:
- GIF_PLAY_PAUSE: Space+Ctrl → Space+Shift に変更
- カメラ反転 / レイヤー反転の定義確認

【Phase 4.5: UI/UX調整（LOW）】

対象ファイル: timeline-ui.js

修正:
1. .timeline-panel の box-shadow 削除
2. .cut-item.active の枠線細線化
3. backdrop-filter の効果確認

================================================================================
■ 各Phase 実装詳細
================================================================================

### Phase 4.1: CRITICAL 修正

【ファイル】core-engine.js

【対象メソッド】handleArrowKeys()

【現状】
```
Ctrl+↑ で層位置をUPに移動したつもりで "交換" している
背景チェックで "飛び越え禁止" (下位レベル)
```

【改修】
Ctrl+↑: activeIndex 
         → 配列の後方に移動 (layer を前方から後方へ)
         
Ctrl+↓: activeIndex 
         → 配列の前方に移動 (layer を後方から前方へ)

コード例:
```javascript
if (e.code === 'ArrowUp') {
    if (activeIndex < layers.length - 1) {
        const layer = layers[activeIndex];
        // 背景レイヤー飛び越え判定
        if (!layer?.layerData?.isBackground && 
            !layers[activeIndex + 1]?.layerData?.isBackground) {
            // 単純な順序変更（交換ではなく移動）
            const container = this.layerSystem.currentCutContainer;
            container.removeChild(layer);
            container.addChildAt(layer, activeIndex + 1);
            this.layerSystem.activeLayerIndex = activeIndex + 1;
            this.layerSystem.updateLayerPanelUI();
        }
    }
}
```

---

【ファイル】timeline-ui.js

【対象メソッド】setupKeyboardShortcuts()

【現状】
```javascript
ArrowLeft  → goToPreviousCutSafe()  // 左で前へ (正しい)
ArrowRight → goToNextCutSafe()      // 右で次へ (正しい)
```

実は既に正しい実装のようです。
確認が必要な箇所:
- core-engine.js の handleArrowKeys() が Timeline時にも呼ばれていないか
- 複数のキー処理が競合していないか

---

【ファイル】animation-system.js

【対象メソッド】createNewEmptyCut()

【改修】現状後に自動採番を実行

```javascript
createNewEmptyCut() {
    const newCut = new Cut(
        this._generateCutId(),
        `CUT${this.animationData.cuts.length + 1}`,
        this.config
    );
    // ... 初期化処理
    this.animationData.cuts.push(newCut);
    
    // 🔥 自動採番: すべてのCUTを再番号付け
    this.renameCutsSequentially();
    
    this.eventBus.emit('animation:cut-created', { 
        cutIndex: this.animationData.cuts.length - 1 
    });
}
```

### Phase 4.2: キーボード処理の統一

【分析】
現在3つのキー処理が存在:

1. index.html setupUnifiedKeyboardShortcuts()
   - Undo/Redo
   - Tool切り替え
   - GIF操作

2. core-engine.js UnifiedKeyHandler
   - Arrow キー
   - Tool切り替え (重複?)
   - GIF操作 (重複?)

3. timeline-ui.js setupKeyboardShortcuts()
   - Arrow キー (Timeline用)
   - Space (Play/Pause)

【問題】
同じキー入力が複数の関数で処理される可能性
→ event.preventDefault() の効きが不確実

【改修方針】
- config.js TEGAKI_KEYMAP が唯一の真実のソース
- core-engine.js UnifiedKeyHandler がすべてのキー処理を担当
- timeline-ui.js: Timeline表示時のコンテキスト固有処理のみ
- index.html: 最小限の初期化のみ

具体的改修:
1. index.html の setupUnifiedKeyboardShortcuts() を削除
2. core-engine.js のUnifiedKeyHandler.handleKeyDown() を拡張
3. Timeline固有キー (Space+Shift for Play/Pause) を UnifiedKeyHandler で処理

================================================================================
■ テスト項目（改修後）
================================================================================

【Phase 4.1テスト】
□ Ctrl+↑: アクティブレイヤーが1段階上へ移動
□ Ctrl+↓: アクティブレイヤーが1段階下へ移動
□ 背景レイヤーを越えていない
□ ↑↓: CUT移動 (Timeline表示時)
□ ←→: CUT移動 (Timeline表示時)
□ CUT追加後、名前が 1, 2, 3... となっている

【Phase 4.2テスト】
□ キーボード入力が一度だけ処理される
□ 複数キーの同時押しが正しく処理される
□ Timeline表示/非表示で異なるキー挙動が正しく動作

【Phase 4.3テスト】
□ CUT のドラッグ&ドロップで順序が変わる
□ レイヤー のドラッグ&ドロップで順序が変わる

【Phase 4.4テスト】
□ Space+Shift: Timeline再生/停止
□ Space+Shift+↓: カメラ拡大
□ Space+Shift+↑: カメラ縮小

【Phase 4.5テスト】
□ タイムラインパネルに影がない
□ アクティブCUT枠線が細い
□ タイムラインパネルが透視可能

================================================================================
■ 参考情報
================================================================================

【ファイル構成図】

config.js
  ↓ (キーマッピング定義)
core-engine.js (UnifiedKeyHandler)
  ↑ (キーイベント処理)
timeline-ui.js (Timeline固有処理)
  ↓ (イベント発行)
animation-system.js (CUT管理)
  ↓ (History統合)
system/history.js (Undo/Redo)

【各ファイルの責務】

config.js:
  - すべてのキーマッピング定義
  - 設定値集約

core-engine.js:
  - キー入力の一元処理
  - システム間の協調

timeline-ui.js:
  - Timeline UI の描画・制御
  - Timeline専用イベント

animation-system.js:
  - CUT/フレーム管理
  - アニメーション データ構造

system/history.js:
  - Undo/Redo スタック管理

================================================================================