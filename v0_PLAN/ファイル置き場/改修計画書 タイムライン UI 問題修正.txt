改修計画書: タイムライン UI 問題修正
問題点の整理
1. リサイズ時のサムネイル表示問題
現象: リサイズ後、タイムラインサムネイルのサイズは変更されるが、中身のアスペクト比が正しく反映されていない
原因:

applyCutThumbnailAspectRatio() でサムネイル枠のサイズを計算しているが、既存の画像データは古いアスペクト比のまま
サムネイル画像の再生成は行われているものの、画像内のキャンバス描画内容が新しいアスペクト比を反映していない

修正方針:

リサイズ時に全CUTのサムネイルを再生成（既に実装されている updateAllCutThumbnails() を活用）
generateCutThumbnail() で正しいアスペクト比計算が行われているかを確認

2. CUTパネル左側の影枠欠け
現象: タイムライン左端のCUTパネルをアクティブにすると影枠の左側が削れる
原因:

.cut-item の padding: 2px 2px 2px 6px で左側padding拡張済み
しかし、.cuts-container の描画可能範囲が不十分

修正方針:

.cuts-container に padding-left を追加（10px程度）
CUTアイテムのアクティブ時の影拡大を考慮した余白確保

3. タイムパネルのコントロールボタン配置
現象: 現在、再生ボタン等が下部に配置され、×ボタンが別に配置されている
要望:

×ボタンと同じ行（サムネイルの上）に再生機能パネルを移動
各ボタンの縦幅をリピートボタンに合わせてスリム化
デザインはそのままに位置のみ変更

修正方針:

HTML構造を変更: .timeline-bottom を削除し、新しい .timeline-header を作成
×ボタンとコントロールを同じ行に配置
CSSで縦幅を統一（約28px）


修正内容の詳細
ファイル: ui/timeline-ui.js
修正1: HTML構造の変更（コントロール配置）

// 変更前の構造
timelinePanel
├── closeButton (×)
├── cutsContainer (サムネイル)
└── timelineBottom
    └── timeline-controls (再生ボタン等)

// 変更後の構造  
timelinePanel
├── timelineHeader
│   ├── closeButton (×)
│   └── timeline-controls (再生ボタン等)
└── cutsContainer (サムネイル)

変更箇所: createCompleteTimelineStructure() メソッド

// 新しいヘッダー構造
const timelineHeader = document.createElement('div');
timelineHeader.className = 'timeline-header';
timelineHeader.innerHTML = `
    <button class="timeline-close" id="close-timeline" title="タイムラインを閉じる">×</button>
    <div class="timeline-controls">
        <button id="repeat-btn" title="リピート (R)" class="repeat-active">...</button>
        <button id="play-btn" title="再生/停止 (Space)">▶</button>
        <button id="add-cut-btn" title="CUT追加 (Alt+=)">+CUT</button>
        <button id="copy-paste-cut-btn" title="CUTコピペ (Shift+C)">+C&P</button>
        <button id="rename-cuts-btn" title="CUTリネーム">RENAME</button>
    </div>
`;

修正2: CSS変更

/* 新規: ヘッダー行 */
.timeline-header {
    display: flex !important;
    align-items: center !important;
    justify-content: space-between !important;
    height: 32px !important;
    padding: 4px 10px !important;
    margin-bottom: 6px !important;
    border-bottom: 1px solid var(--futaba-light-medium) !important;
}

/* ×ボタンのスタイル変更 */
.timeline-close {
    background: none !important;
    border: none !important;
    font-size: 18px !important;
    color: var(--futaba-maroon) !important;
    cursor: pointer !important;
    padding: 4px 8px !important;
    border-radius: 6px !important;
    height: 28px !important;
    min-width: 28px !important;
    flex-shrink: 0 !important;
}

/* コントロールボタンの高さ統一 */
.timeline-controls {
    display: flex !important;
    gap: 4px !important;
    align-items: center !important;
}

.timeline-controls button {
    height: 28px !important; /* リピートボタンに合わせる */
    padding: 4px 12px !important;
    font-size: 11px !important;
    /* その他のスタイルは維持 */
}

/* CUTコンテナの左padding追加 */
.cuts-container {
    padding: 3px 0 8px 10px !important; /* 左側に10px追加 */
    margin-top: 0 !important; /* ヘッダーと分離したのでmargin不要 */
}

/* タイムラインパネルのpadding調整 */
.timeline-panel {
    padding: 8px 10px 10px 10px !important; /* 左右均等に */
}

/* 削除: .timeline-bottom 関連のCSS */

修正3: リサイズ時のサムネイル更新確認
既存の setupResizeEventListener() で実装済みだが、念のため確認:

setupResizeEventListener() {
    if (!this.eventBus) return;
    
    // camera:resized イベントで全サムネイル更新
    this.eventBus.on('camera:resized', (data) => {
        this.requestAllThumbnailsUpdate();
    });
}

requestAllThumbnailsUpdate() {
    if (this.allThumbnailUpdateTimer) {
        clearTimeout(this.allThumbnailUpdateTimer);
    }
    
    // 300ms後に一括更新（既存実装）
    this.allThumbnailUpdateTimer = setTimeout(() => {
        this.updateAllCutThumbnails();
    }, 300);
}

ファイル: system/animation-system.js
確認: サムネイル生成時のアスペクト比計算
既に実装されているアスペクト比計算を確認:

async generateCutThumbnail(cutIndex) {
    // ... 既存コード ...
    
    // アスペクト比計算（既存実装）
    const canvasWidth = this.config.canvas.width;
    const canvasHeight = this.config.canvas.height;
    const aspectRatio = canvasWidth / canvasHeight;
    const maxWidth = 72;
    const maxHeight = 54;
    let thumbWidth, thumbHeight;
    
    if (aspectRatio >= maxWidth / maxHeight) {
        thumbWidth = maxWidth;
        thumbHeight = Math.round(maxWidth / aspectRatio);
    } else {
        thumbHeight = maxHeight;
        thumbWidth = Math.round(maxHeight * aspectRatio);
    }
    
    // サムネイル生成
    const thumbCanvas = document.createElement('canvas');
    thumbCanvas.width = thumbWidth;
    thumbCanvas.height = thumbHeight;
    
    const ctx = thumbCanvas.getContext('2d');
    ctx.clearRect(0, 0, thumbWidth, thumbHeight);
    ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, thumbWidth, thumbHeight);
    
    cut.thumbnailCanvas = thumbCanvas;
}


問題: この実装は正しいが、リサイズ時に this.config.canvas.width/height が更新されていない可能性
修正方針: リサイズ時に this.config を更新するか、動的に最新のキャンバスサイズを取得

実装手順
ステップ1: timeline-ui.js のHTML構造変更

createCompleteTimelineStructure() メソッドを修正
ヘッダー要素を作成し、×ボタンとコントロールを配置
.timeline-bottom 削除

ステップ2: CSS更新

.timeline-header スタイル追加
.timeline-close スタイル調整
.timeline-controls button の高さ統一
.cuts-container の padding-left 追加
.timeline-bottom 関連CSS削除

ステップ3: リサイズ対応確認

camera:resized イベントの発火確認
config.canvas の更新タイミング確認
必要に応じて generateCutThumbnail() でリアルタイムサイズ取得

ステップ4: 動作確認

タイムライン表示時のボタン配置確認
リサイズ後のサムネイルアスペクト比確認
左端CUTパネルの影枠欠けチェック







