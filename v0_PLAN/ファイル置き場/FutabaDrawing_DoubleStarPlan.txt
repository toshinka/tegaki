FutabaDrawing ファイル分割計画準備案 (v8)

目的:
  - 現行の単一ファイル構成から、将来的な肥大化に対応できる柔軟な構造へ移行するための準備
  - 可読性・改修効率・拡張性の維持

段階的なアプローチ:

1. 初期段階 (ToolSplitPlan 準拠)
   - index.html
     * UI構造、基本DOM、初期化処理
     * 必要最小限のスタイル (後に分離可能)
   - drawing_tools.js
     * 描画関連の主要ロジック
     * ペン、消しゴム、図形ツールなど改修頻度の高い部分
   - style.css (任意)
     * レイアウト・アイコン・色指定など見た目に関する処理

   → 改修効率を最優先、まずは二分割 (+CSS逃がし)

2. 中期段階 (ダブルスター型への移行)
   - UI/統合ハブ (html or ui_core.js)
     * ツールバー、入力、全体管理
   - 描画ハブ (drawing_core.js)
     * 描画エンジン、ツール中核

   → 2つの「スター」を中心に構造を整理

3. 拡張段階 (枝ファイル切り出し)
   - UIスターから分岐例:
     * toolbar.js
     * shortcut.js
   - 描画スターから分岐例:
     * brush.js
     * shape.js
     * filter.js

   → 機能が固まったらスターから枝へ独立

4. 共通層の導入 (必要に応じて)
   - utils.js
     * 双方向依存を回避するための共通関数群
     * 共通APIやヘルパーを収容

補足:
  - 初期はできるだけシンプルに、2分割を守る
  - 将来的に肥大化したときに「二つのスター」へ自然移行できるよう意識
  - 実際の枝分かれはプロジェクト進行と改修頻度を見ながら柔軟に判断

この案の位置づけ:
  - 計画そのものではなく、計画準備
  - 実装状況に応じて分割粒度やファイル数を調整可能
  - 基本思想として「2つのスターを中核に据える」方向性を明示


. 分割構造

ツリー型で失敗した背景は「ファイルが多すぎ → AIが処理困難」。

進化プランではさらに機能が増えるため、

2つのスター（UI／描画）を軸に据えて、そこから必要に応じて Controller / Engine を切り出す

この方式の方が進化計画とも矛盾しない。

UI_STAR
 ├─ UIController.js
 ├─ InterfaceManager.js
 └─ Shortcut.js

DRAWING_STAR
 ├─ DrawingEngine.js (将来的に RenderingEngine.js)
 ├─ AnimationController.js
 ├─ PhysicsController.js
 └─ BrushTools.js
