==========================================================
Tegaki v8 改修・開発ルールブック rev4 準拠 改訂版
==========================================================

1. 基本理念と前提条件
----------------------------------------------------------
- Tegaki v8 は「星型アーキテクチャ」を採用。
  - 主星(MainController)が中核となり、衛星(Service/Tool)を統括する。
  - 衛星は主星にのみ依存し、衛星同士は直接依存しない。
  - 機能拡張は新しい衛星を追加することで実現する。

前提条件
- 実行環境：Chrome 最新、ローカル HTML 直開き(file://)可
- 技術スタック：PixiJS v8（CDN読み込み）、ES2023（モジュール未使用）、fetch API 可
- 禁止事項：TypeScript / Vite / ESM / bundler / Babel 不使用
- グローバル名前空間：window.MyApp（全モジュールはここに登録）
- 描画は PixiJS v8 の Graphics を用いたベクター描画のみを使用する
- Canvas2D は使用しない
- レイヤー移動やカメラ外からの描画も World 座標系に従い正しく表示
- 消しゴムも Graphics によるベクターパスで透明化する
- ペンと消しゴムの挙動は DrawingEngine 内で統一管理
- キャンバス外に描画した場合も World 座標変換を経て表示可能
- PositionManager が canvas <-> world 座標変換を一元管理
- UI（レイヤーポップアップなど）の構造は rev4 を維持
- リファクタリング時は UI を崩さないように注意
- Undo/Redo は CTRL+Z / CTRL+Y、ツール切替は P / E に対応
- ボタンは不要、将来ショートカット管理を分離可能な構造にする


2. 主星・衛星責務
----------------------------------------------------------
1. 主星（MainController）
  - 発火・仲介・確定・履歴の橋渡しのみに責務を限定
  - 衛星を直接操作せず、イベント/bridge経由で通信
2. 衛星（各サービス・ツール）
  - 単一責務
  - 主星経由のみで通信、衛星間直接参照禁止
3. 命名・API
  - ファイル横断での誤解防止、統一規約を遵守
4. エラー
  - 隠蔽せず ErrorService 経由で主星に通知、UI に反映
5. ログ
  - main.log 経由で管理、console.log は直接使用禁止
6. UI
  - UI/レイヤーポップアップは現行 rev4 状態を保持
  - リファクタリング時は UI 崩壊を避けること

3. 主要モジュール（衛星）一覧と責務（推奨ファイル名）
----------------------------------------------------------
- MainController (main.html)
  - 初期化、名前空間登録、イベントルーター
  - confirm 処理および HistoryService への橋渡し
  - ErrorService 経由で UI にエラー通知
- DrawingEngine (drawing-engine.js)
  - Pixi.Application 管理
  - EngineBridge: 衛星から描画要求を受ける最小API
- LayerManager (layer-manager.js)
  - レイヤー生成/削除/順序管理（reorderLayer）
  - メタ情報管理（visibility, locked）
  - Stageコンテナ提供（DrawingEngine連携）
- PositionManager (position-manager.js)
  - キャンバス移動(パン)・ズーム
  - 座標変換（canvas <-> world）
- ToolManager (tool-manager.js)
  - 選択中ツール管理 (setActiveTool/getActiveTool)
  - Tool登録 (registerTool)
- BrushTool / EraserTool / TransformTool (tools/*.js)
  - Tool インターフェースに従う (start/move/end/serialize)
  - EraserTool は Pixi BLEND_MODES.ERASE 使用
  - TransformTool は非破壊的移動・回転・スケール
- HistoryService (history-service.js)
  - record(action), undo(), redo(), getState()
  - World座標ベースの非破壊履歴管理
- UIManager (ui-manager.js)
  - DOM生成（rev4状態のUI/ツールバー/レイヤーサイドバー保持）
  - ユーザー操作を MainController に通知
- ErrorService (error-service.js)
  - 衛星のエラーフローを MainController 経由で UI に通知

4. 衛星ヘッダールール
----------------------------------------------------------
- すべての衛星は必須ヘッダーを持つ

@module モジュール名
@role 担当役割
@depends MainController
@provides 公開APIメソッド
@notes 補足・注意点（座標系、履歴フロー等）

- 主星以外の衛星は window.MyApp に直接登録しない
- 内部実装の詳細は公開せず、API経由でのみ外部利用

5. 座標系・描画フロー
----------------------------------------------------------
- World座標を基準とし、TransformServiceが変換管理
- レイヤー移動・Undo/Redo・カメラ操作は全て World 座標ベース
- キャンバス外からの描画も World 座標経由で Canvas 内に反映
- 非破壊履歴: 操作前/操作後を HistoryService に記録
- Undo/Redo も World 座標ベースで再描画

6. イベント仕様（JSON スキーマ簡易）
----------------------------------------------------------
- 基本形式: { type:"domain.action", payload:{…}, meta:{requestId:"uuid", origin:"Tool|UI"} }
- 例:
- tools.brushStart -> payload:{x,y,toolId,settings}
- layers.reorderRequest -> payload:{fromIndex,toIndex,layerId}
- history.record -> payload:{action:{type,payload}}
- error.recoverable -> payload:{code,msg,context}
- 全イベントは MainController.notify(event) を経由して dispatch
- ドメイン固定セット: [ui, tools, layers, history, engine, system]

7. 命名規約（必須）
----------------------------------------------------------
- ファイル名：kebab-case（例: layer-service.js）
- クラス名：PascalCase（例: LayerService）
- メソッド名：camelCase、動詞始まり（createLayer, reorderLayer, startStroke）
- Tool インターフェース: start, move, end, cancel, serialize
- グローバル登録:
- window.MyApp 直下には MainController と公開APIのみ
- イベント名: domain.action形式で統一
- 禁止:
- 汎用的すぎる名前 (Manager, Handler 単独)
- ambiguous verbs: moveLayer → reorderLayer/translateLayer
- ファイル横断で同名メソッドを定義せず、やむを得ず同名の場合は namespace prefix

8. 設計ルール・注意事項
----------------------------------------------------------
1. 衛星間直接参照禁止
2. Tool は DrawingEngine に直接描画要求せず、MainController を経由
3. transform 操作は TransformService が計算、LayerService に適用と履歴用データ返却
4. HistoryService は MainController の confirm 経由で record
5. UI/ポップアップは 指示がない限り前仕様を保持。破壊しないリファクタリングに注意

9. ローリングバック・安全策
----------------------------------------------------------
- 改修は小段階で行い rev タグを付与
- 破壊的変更は必ず feature branch で作業
- 命名やメソッド意図はコメントで補足 (// ROLE: …)
- ErrorService により隠蔽エラーを排除、フォールバックは MainController 管理

==========================================================



