====================================================
Futaba Drawing Tool
AIフレンドリー設計ガイドライン（v8準備版）
====================================================

■ 1. 命名規則
- クラス・メソッド名は責務が直線的に理解できるよう命名
  例：
    AppInitializer → 初期化全般
    AppController → アプリ全体制御
    AnimationController → アニメーション制御
- 将来的に複数 Controller が増えても混同しない命名を優先
- AIが推測しやすい単語で統一し、略語・抽象語は避ける

■ 2. ファイル構成
- 基本は DoubleStar 型
  - 中心ハブ2つ（UI_STAR / DRAWING_STAR）
  - 枝ファイルとして機能単位で切り出し
- ファイル肥大化時に備え、AIが読み込む際の処理量を意識
- 現段階では二分割構成でも可。将来的に枝ファイルを拡張

■ 3. フロー設計
- フローはステップごとに責務を明示
- 例：
  1. キャンバス表示：AppInitializer → PIXI.Application → DrawingEngine.setupContainers → DomPositionManager.updatePosition
  2. ペン描画：PointerDown → DrawingTools.startDrawing → DrawingEngine.createPath → AnimationController/PhysicsController反映 → 描画開始
  3. 状態管理：InterfaceManager.updateState → DrawingTools.applySettings → 状態オブジェクト(this.state)に集約 → 描画/アニメ/物理反映
- 将来的なアニメーション・物理演算を見据えたフローコメントを残す

■ 4. コメント構造
- 統一フォーマット推奨：
  // ==== [クラス名]: [責務範囲] ====
  // 【目的】何をするか
  // 【入力】受け取るデータ
  // 【出力】返すデータ
  // 【副作用】変更する状態・オブジェクト
- Public/Private/Handler/Utility のセクション分離も徹底

■ 5. 状態管理
- 状態は各クラス内に単一オブジェクトとして集約
  例：
    this.state = {
        isDrawing: false,
        currentTool: 'pen',
        brushSize: 16.0
    }
- AIや将来的な拡張機能が追跡しやすいように設計

■ 6. エラー処理
- try-catch は最上位のみ
- ネストは3階層以内、メソッド50行以内
- ifチェーンが多い場合は switch 文に変更
- AIが解析しやすい短いメソッド構造を重視

■ 7. 将来拡張対応
- AnimationController / PhysicsController の追加を前提に設計
- レイヤーやショートカットなど拡張モジュールも枝ファイルとして配置
- AppController は将来的に細分化可能であることをコメントで明示
- DoubleStarPlan に移行することで、AIが扱いやすい構造を維持

====================================================
備考：
- このガイドラインは v8 現行改修および将来的拡張を見据えたもの
- AIにとって理解しやすく、保守しやすいコードベースを実現することを目的としています
====================================================
