# Tegaki めぶきちゃんねる連携 改修計画書

## 1. 現状分析と方針決定

### 1.1 現在のアーキテクチャ
```
[Tegaki Tool]
    ├── PixiJS v8.13 (ベクターペン描画)
    ├── Animation System (複数フレーム管理)
    ├── Export Manager (PNG/APNG/GIF/WebP/MP4)
    └── Layer System (複数レイヤー管理)
```

### 1.2 めぶきちゃんねるの仕様
```
- 投稿方式: <input type="file"> へのFile注入
- プレビュー: <img src="blob:..."> で表示
- アニメーション: APNG/GIF/WebP対応
- CSP: 比較的緩い（ブックマークレット動作可）
```

### 1.3 実装方針
```
[はっちゃん方式を採用]
- iframe廃止 → script直接注入
- 掲示板DOM直接操作
- File API経由でアニメーション注入
```

## 2. 必要なファイル構成

```
tegaki/
├── [新規] tegaki-loader.js          # ブックマークレット用ローダー
├── [新規] system/board-integration.js  # 掲示板連携モジュール
├── [改修] core-engine.js            # ブックマークレットモード追加
├── [改修] system/export-manager.js  # Blob取得API追加
└── [既存] その他のファイル
```

## 3. 実装仕様

### 3.1 ブックマークレット

```javascript
// ユーザーが登録するブックマークレット（1行）
javascript:(function(){
  if(!window.tegakiStart){
    var s=document.createElement('script');
    s.charset='UTF-8';
    s.src='https://YOUR_DOMAIN/tegaki-loader.js';
    document.body.appendChild(s)
  }else{
    window.tegakiStart()
  }
})();
```

### 3.2 tegaki-loader.js の構造

```
class TegakiBookmarklet {
    constructor() {
        this.boardType = null;      // 'mebuki' or 'futaba'
        this.targetInput = null;     // <input type="file">
        this.tegakiApp = null;       // Tegakiインスタンス
        this.container = null;       // UIコンテナ
    }
    
    // エントリーポイント
    async start() {
        1. detectBoard()            // 掲示板種別判定
        2. findTargetElements()     // input要素検出
        3. loadTegakiCore()        // 必要JSを順次読込
        4. createContainer()        // UI表示領域作成
        5. initializeTegaki()       // Tegaki起動
    }
    
    // 終了処理
    async stop() {
        1. getAnimationBlob()       // アニメーションBlob取得
        2. injectToBoard()          // File注入
        3. cleanup()                // リソース解放
    }
}
```

### 3.3 掲示板検出ロジック

```javascript
// めぶきちゃんねる要素セレクタ
MEBUKI_SELECTORS = {
    postButton: 'button[title="レスを投稿"]',
    imageButton: 'svg.lucide-image',
    fileInput: 'input[type="file"][accept*="image"]',
    previewImg: 'img[src^="blob:"]'
}

// 検出フロー
detectBoard() {
    if (location.host.includes('mebuki.moe')) {
        return 'mebuki';
    } else if (location.host.includes('2chan.net')) {
        return 'futaba';
    }
    return null;
}
```

### 3.4 File注入メカニズム

```javascript
async injectToBoard(blob, filename = 'tegaki.png') {
    // Blob → File変換
    const file = new File([blob], filename, {
        type: blob.type,
        lastModified: Date.now()
    });
    
    // DataTransfer経由で注入
    const dt = new DataTransfer();
    dt.items.add(file);
    
    // input要素に設定
    this.targetInput.files = dt.files;
    
    // changeイベント発火
    this.targetInput.dispatchEvent(
        new Event('change', { bubbles: true })
    );
}
```

## 4. 改修対象ファイル詳細

### 4.1 core-engine.js の改修

```javascript
// 追加: ブックマークレットモード対応
class TegakiCoreEngine {
    constructor(config = {}) {
        // 既存コード...
        
        // ブックマークレットモード検出
        this.isBookmarkletMode = config.isBookmarkletMode || false;
        this.onExportReady = config.onExportReady || null;
    }
    
    // 追加: ブックマークレット用エクスポート
    async exportForBookmarklet(format = 'png') {
        const manager = this.exportManager;
        
        if (this.animationSystem?.frames.length > 1) {
            // アニメーション
            switch(format) {
                case 'gif':
                    return await manager.exportAsGIF();
                case 'webp':
                    return await manager.exportAsWebP();
                default: // apng
                    return await manager.exportAsAPNG();
            }
        } else {
            // 静止画
            return await manager.exportAsPNG();
        }
    }
}
```

### 4.2 export-manager.js の改修

```javascript
// 追加: Blob取得用API
class ExportManager {
    // 既存メソッド...
    
    // 追加: Blob返却版
    async exportAsPNGBlob() {
        const dataURL = await this.exportAsPNG();
        return this._dataURLToBlob(dataURL);
    }
    
    async exportAsAPNGBlob() {
        const buffer = await this._createAPNGBuffer();
        return new Blob([buffer], { type: 'image/apng' });
    }
    
    async exportAsGIFBlob() {
        const buffer = await this._createGIFBuffer();
        return new Blob([buffer], { type: 'image/gif' });
    }
    
    async exportAsWebPBlob() {
        const buffer = await this._createWebPBuffer();
        return new Blob([buffer], { type: 'image/webp' });
    }
    
    // ユーティリティ
    _dataURLToBlob(dataURL) {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while(n--) u8arr[n] = bstr.charCodeAt(n);
        return new Blob([u8arr], { type: mime });
    }
}
```

## 5. 新規ファイル実装

### 5.1 tegaki-loader.js

```javascript
// グローバル登録
(function() {
    'use strict';
    
    const TEGAKI_BASE_URL = 'https://YOUR_DOMAIN/tegaki/';
    
    class TegakiBookmarklet {
        constructor() {
            this.boardType = null;
            this.targetInput = null;
            this.tegakiApp = null;
            this.container = null;
            this.originalStyles = new Map();
        }
        
        async start() {
            try {
                // 1. 掲示板判定
                this.boardType = this.detectBoard();
                if (!this.boardType) {
                    alert('対応していない掲示板です');
                    return;
                }
                
                // 2. 要素検出
                await this.findTargetElements();
                
                // 3. Tegakiコア読込
                await this.loadTegakiCore();
                
                // 4. UI作成
                this.createContainer();
                
                // 5. Tegaki起動
                await this.initializeTegaki();
                
            } catch (error) {
                console.error('Tegaki起動失敗:', error);
                this.cleanup();
            }
        }
        
        detectBoard() {
            const host = location.host;
            if (host.includes('mebuki.moe')) return 'mebuki';
            if (host.includes('2chan.net')) return 'futaba';
            return null;
        }
        
        async findTargetElements() {
            if (this.boardType === 'mebuki') {
                // レス投稿ボタンをクリックして入力欄を開く
                const postBtn = document.querySelector('button[title="レスを投稿"]');
                if (postBtn) postBtn.click();
                
                // input要素を探す（少し待機）
                await this.waitFor(() => {
                    this.targetInput = document.querySelector('input[type="file"][accept*="image"]');
                    return this.targetInput !== null;
                }, 3000);
                
                if (!this.targetInput) {
                    throw new Error('ファイル入力要素が見つかりません');
                }
            }
        }
        
        async loadTegakiCore() {
            // 必要なスクリプトを順次読込
            const scripts = [
                'https://cdn.jsdelivr.net/npm/pixi.js@8.5.2/dist/pixi.min.js',
                'config.js',
                'coordinate-system.js',
                'system/event-bus.js',
                'system/state-manager.js',
                'system/camera-system.js',
                'system/layer-system.js',
                'system/drawing-clipboard.js',
                'system/history.js',
                'system/virtual-album.js',
                'system/animation-system.js',
                'system/export-manager.js',
                'system/exporters/png-exporter.js',
                'system/exporters/apng-exporter.js',
                'system/exporters/gif-exporter.js',
                'system/exporters/webp-exporter.js',
                'ui/timeline-ui.js',
                'ui/album-popup.js',
                'ui/ui-panels.js',
                'core-runtime.js',
                'core-engine.js'
            ];
            
            for (const script of scripts) {
                const url = script.startsWith('http') ? script : TEGAKI_BASE_URL + script;
                await this.loadScript(url);
            }
        }
        
        loadScript(url) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = url;
                script.charset = 'UTF-8';
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }
        
        createContainer() {
            // フルスクリーンコンテナ作成
            this.container = document.createElement('div');
            this.container.id = 'tegaki-bookmarklet-container';
            this.container.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                z-index: 999999;
                background: rgba(0, 0, 0, 0.95);
                display: flex;
                flex-direction: column;
            `;
            
            // 閉じるボタン
            const closeBtn = document.createElement('button');
            closeBtn.textContent = '✕ 閉じる';
            closeBtn.style.cssText = `
                position: absolute;
                top: 10px;
                right: 10px;
                z-index: 1000000;
                padding: 8px 16px;
                background: #ff4444;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            `;
            closeBtn.onclick = () => this.cancel();
            
            // 完了ボタン
            const doneBtn = document.createElement('button');
            doneBtn.textContent = '✓ 掲示板に貼り付けて閉じる';
            doneBtn.style.cssText = `
                position: absolute;
                bottom: 10px;
                right: 10px;
                z-index: 1000000;
                padding: 12px 24px;
                background: #44ff44;
                color: black;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
                font-weight: bold;
            `;
            doneBtn.onclick = () => this.stop();
            
            this.container.appendChild(closeBtn);
            this.container.appendChild(doneBtn);
            document.body.appendChild(this.container);
            
            // スクロール防止
            this.originalStyles.set(document.body, document.body.style.overflow);
            document.body.style.overflow = 'hidden';
        }
        
        async initializeTegaki() {
            // Tegakiキャンバス用div
            const canvasDiv = document.createElement('div');
            canvasDiv.id = 'tegaki-canvas-container';
            canvasDiv.style.cssText = `
                flex: 1;
                display: flex;
                justify-content: center;
                align-items: center;
            `;
            this.container.appendChild(canvasDiv);
            
            // Tegaki起動
            if (window.TegakiCoreEngine) {
                this.tegakiApp = new window.TegakiCoreEngine({
                    container: canvasDiv,
                    isBookmarkletMode: true,
                    width: 800,
                    height: 600
                });
                await this.tegakiApp.init();
            }
        }
        
        async stop() {
            if (!this.tegakiApp) return;
            
            try {
                // アニメーションをBlob取得
                const blob = await this.tegakiApp.exportForBookmarklet('gif');
                
                // 掲示板に注入
                await this.injectToBoard(blob);
                
                // 成功したら閉じる
                this.cleanup();
                
            } catch (error) {
                console.error('エクスポート失敗:', error);
                alert('画像の出力に失敗しました');
            }
        }
        
        async injectToBoard(blob) {
            if (!this.targetInput) {
                throw new Error('入力要素が見つかりません');
            }
            
            // ファイル名決定
            const ext = blob.type.split('/')[1] || 'png';
            const filename = `tegaki_${Date.now()}.${ext}`;
            
            // File作成
            const file = new File([blob], filename, {
                type: blob.type,
                lastModified: Date.now()
            });
            
            // DataTransfer経由で注入
            const dt = new DataTransfer();
            dt.items.add(file);
            this.targetInput.files = dt.files;
            
            // changeイベント発火
            this.targetInput.dispatchEvent(
                new Event('change', { bubbles: true })
            );
            
            // プレビュー表示を待つ
            await this.waitForPreview();
        }
        
        async waitForPreview() {
            // プレビュー画像の表示を待つ
            return this.waitFor(() => {
                const preview = document.querySelector('img[src^="blob:"]');
                return preview !== null;
            }, 5000);
        }
        
        cancel() {
            if (confirm('描いた内容は破棄されます。よろしいですか？')) {
                this.cleanup();
            }
        }
        
        cleanup() {
            // Tegaki破棄
            if (this.tegakiApp) {
                this.tegakiApp.destroy();
                this.tegakiApp = null;
            }
            
            // コンテナ削除
            if (this.container) {
                this.container.remove();
                this.container = null;
            }
            
            // スタイル復元
            this.originalStyles.forEach((value, element) => {
                element.style.overflow = value;
            });
            this.originalStyles.clear();
        }
        
        waitFor(condition, timeout = 5000) {
            return new Promise((resolve, reject) => {
                const startTime = Date.now();
                const check = () => {
                    if (condition()) {
                        resolve();
                    } else if (Date.now() - startTime > timeout) {
                        reject(new Error('タイムアウト'));
                    } else {
                        setTimeout(check, 100);
                    }
                };
                check();
            });
        }
    }
    
    // グローバル登録
    window.tegakiStart = function() {
        if (!window.tegakiBookmarklet) {
            window.tegakiBookmarklet = new TegakiBookmarklet();
        }
        window.tegakiBookmarklet.start();
    };
    
    // 自動起動
    window.tegakiStart();
})();
```

## 6. 動作フロー

```
1. ユーザーがブックマークレットクリック
    ↓
2. tegaki-loader.js 読込・実行
    ↓
3. めぶきちゃんねる判定
    ↓
4. レス投稿ウィンドウを開く
    ↓
5. input[type=file] 要素を検出
    ↓
6. Tegakiコアを順次読込
    ↓
7. フルスクリーンUIでTegaki起動
    ↓
8. ユーザーが絵を描く
    ↓
9. 「掲示板に貼り付けて閉じる」クリック
    ↓
10. アニメーションをBlobとして取得
    ↓
11. File APIで input に注入
    ↓
12. changeイベント発火
    ↓
13. プレビュー表示確認
    ↓
14. Tegaki終了・リソース解放
    ↓
15. ユーザーがコメント入力して投稿
```

## 7. テスト項目

```
□ ブックマークレット起動
□ めぶきちゃんねる判定
□ レス投稿ウィンドウ自動展開
□ input要素検出
□ Tegaki起動・描画
□ PNG静止画エクスポート
□ GIFアニメーションエクスポート
□ APNGエクスポート
□ WebPエクスポート
□ File注入・プレビュー表示
□ メモリリーク確認
□ エラーハンドリング
```

## 8. 注意事項

### セキュリティ
- HTTPS経由での配信必須
- CORS設定が必要（loader.jsと各モジュール）

### パフォーマンス
- ベクターペンのパス情報は大量になるため、エクスポート時の最適化必須
- アニメーションフレーム数の上限設定推奨

### 互換性
- めぶきちゃんねるのDOM構造変更に注意
- セレクタの定期的な確認必要

## 9. 実装優先順位

```
1. tegaki-loader.js 基本実装
2. core-engine.js ブックマークレットモード追加
3. export-manager.js Blob API追加
4. めぶきちゃんねる連携テスト
5. エラーハンドリング強化
6. パフォーマンス最適化
```

## 10. 今後の拡張可能性

```
- ふたばちゃんねる対応（canvas注入方式）
- 他の画像掲示板対応
- ローカルストレージでの一時保存
- 描画再開機能
```