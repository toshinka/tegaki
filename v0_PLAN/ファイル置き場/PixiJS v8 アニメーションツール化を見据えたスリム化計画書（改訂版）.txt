# PixiJS v8 アニメーションツール化を見据えたスリム化計画書（改訂版）

## 🎯 戦略転換：将来拡張性重視のアーキテクチャ

### 将来機能要件の分析
```
現在: お絵かきツール
↓
近未来: レイヤー移動・回転・縮小 + 無限キャンバス
↓  
将来: GIFアニメ + LIVE2D/SPINE風 モーフィング・ボーンアニメ
```

### 🔄 戦略変更：削除 → 積極活用 + 専門ライブラリ追加

---

## 📚 ライブラリ戦略（改訂版）

### ✅ 保持・強化すべきライブラリ

#### 1. **PixiJS v8.13** - コア描画エンジン
```javascript
// 将来のアニメーション機能で重要
PIXI.AnimatedSprite  // GIFアニメ用
PIXI.spine          // SPINE互換用（将来）
PIXI.Container      // 階層管理（レイヤー移動・回転）
PIXI.Transform      // 座標変換統一
```

#### 2. **HammerJS** - 強化して継続
```javascript
// 将来の変形操作で必須
hammer.get('rotate').set({ enable: true });  // 回転
hammer.get('pinch').set({ enable: true });   // 縮小拡大
hammer.get('pan').set({ enable: true });     // 移動（現在使用中）
```

#### 3. **GSAP** - アニメーション専門ライブラリとして積極活用
```javascript
// 将来のモーフィング・ボーンアニメで必須
gsap.to(layer, { rotation: angle, duration: 0.3 });
gsap.timeline()  // アニメーションシーケンス
gsap.morphSVG()  // モーフィング（将来）
```

### ❌ 削除すべきライブラリ

#### **Lodash** - ネイティブJS置換
- 理由：ユーティリティ機能はネイティブで十分
- Claude対応：ネイティブJSの方が予測しやすい

---

## 🏗️ 新アーキテクチャ設計

### Core Philosophy: **Transform-Centric Architecture**

```javascript
// 座標変換を中心とした設計
class TransformSystem {
  // 全ての座標変換を一元管理
  // レイヤー移動・回転・縮小の基盤
  // 無限キャンバスの座標変換
  // 将来のボーン変形の基盤
}
```

### 🌟 新しいクラス構成

```javascript
// 主星（MainController） - 最小限の責務
class MainController {
  constructor() {
    this.transform = new TransformSystem();     // 座標変換統一
    this.history = new TransformHistoryManager(); // 非破壊記録
    this.layers = new LayerSystem();            // レイヤー管理
    this.animation = new AnimationSystem();     // 将来のアニメ機能
  }
}

// 衛星1: 座標変換システム（新規）
class TransformSystem {
  // レイヤー座標・ワールド座標・スクリーン座標の相互変換
  // 回転・縮小・移動の統一API
  // 無限キャンバスの viewport 管理
}

// 衛星2: 非破壊記録システム（大幅改良）
class TransformHistoryManager {
  // Transform情報の差分記録
  // レイヤー変形の履歴管理
  // 将来のアニメーション・キーフレーム基盤
}

// 衛星3: レイヤーシステム（進化版）
class LayerSystem extends PIXI.Container {
  // PixiJS Containerを継承
  // レイヤー階層の直接操作
  // Transform適用の自動化
}

// 衛星4: 描画エンジン（軽量化）
class DrawingEngine {
  // 純粋な描画機能のみ
  // TransformSystemに座標変換を委譲
}

// 衛星5: アニメーションシステム（新規・将来用）
class AnimationSystem {
  // GSAP統合
  // キーフレーム管理
  // モーフィング・ボーン制御（将来）
}
```

---

## 🎨 スリム化 vs 拡張性のバランス

### 現在のスリム化（-400行）
```javascript
// Lodash削除による行数削減
Array.prototype.methods  // forEach, find, filter
Math methods            // min, max, clamp
Object methods          // assign, keys, values

// 重複UI処理の統合
class UnifiedUIController {
  handleAllInteractions() // イベント集約
}
```

### 将来対応の基盤追加（+200行）
```javascript
// Transform基盤
class TransformSystem {
  worldToLayer(point, layerId)
  layerToWorld(point, layerId)  
  screenToWorld(point)
  applyTransform(layer, transform)
}

// 非破壊記録強化
class TransformHistoryManager {
  recordTransform(layerId, transform)  // 座標変形記録
  recordMorph(targetId, morphData)     // 将来のモーフ記録
}
```

### **純削減: 約200行（17%スリム化）**
- 過度な削減より将来拡張性を重視
- AI改修しやすさとのバランス

---

## 🚀 段階的実装計画

### STEP 1: 基盤整備（1-2日）※完了済み
```javascript
// Step 1: TransformSystem導入
// Step 2: Lodash削除・ネイティブJS化  
// Step 3: 座標変換の一元化
```

### STEP 2: 非破壊記録強化（1日）
```javascript
// Step 4: Transform履歴システム
// Step 5: 差分記録最適化
```

### STEP 3: 近未来機能準備（1日）
```javascript  
// Step 6: レイヤー変形API
// Step 7: 無限キャンバス基盤
// Step 8: HammerJS回転・ピンチ対応
```

### STEP 4: 将来準備（将来実装時）
```javascript
// AnimationSystem追加
// GSAP本格活用
// SPINE/LIVE2D互換レイヤー
```

---

## 🤖 AI改修しやすさの設計

### 1. **専門ライブラリ + ネイティブJS**
```javascript
// Claude得意パターン
PIXI.Container      // 明確なAPI、豊富な学習データ
GSAP.timeline()     // アニメーション専門、predictable
native Array.find() // 標準仕様、確実な動作
```

### 2. **Transform-Centric設計**
```javascript
// 全ての操作が座標変換を通る
drawingEngine.draw(point) 
  → transformSystem.worldToLayer(point)
  → layer.addPath(transformedPoint)

// AIが追跡しやすい単一パス
```

### 3. **明確な責務分離**
```javascript
// 各システムの責務が明確
TransformSystem  → 座標だけ
HistoryManager   → 記録だけ
LayerSystem      → 階層だけ
AnimationSystem  → アニメだけ
```

### 4. **段階的拡張設計**
```javascript
// 現在実装不要な機能も interface だけ定義
interface AnimationSystem {
  // 将来実装予定
  createMorph(fromLayer, toLayer): Promise<Animation>
  createBone(parentLayer): Bone
}
```

---

## 📊 最終的な効果予想

### サイズ変化
- **現在**: ~1,200行
- **改修後**: ~1,000行（17%削減）
- **将来対応準備**: 完了

### パフォーマンス
- 座標変換統一による高速化
- PixiJS最適化による描画性能向上
- 非破壊記録の効率化

### AI開発しやすさ
- ✅ 専門ライブラリ中心（Claude得意領域）
- ✅ 明確な責務分離
- ✅ Transform中心の予測しやすい構造
- ✅ 段階的拡張可能な設計

---

## 🎯 推奨する着地点

### **適度なスリム化 + 将来拡張基盤**

1. **Lodash削除** - 確実な軽量化（-200行）
2. **Transform基盤追加** - 将来機能の土台（+100行）  
3. **座標変換一元化** - AI理解しやすい構造
4. **専門ライブラリ活用** - PixiJS + GSAP + HammerJS

### 結果: **機能豊富で改修しやすい基盤**
- 現在機能: 完全保持
- 将来機能: スムーズに拡張可能  
- AI改修: 専門ライブラリ活用で高効率
- コード量: 適度に削減（過度な削減を避ける）

**この方向性で進めるのがベストバランスと判断します。**