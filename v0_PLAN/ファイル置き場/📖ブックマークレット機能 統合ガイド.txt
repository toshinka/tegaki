# Tegaki ブックマークレット機能 統合ガイド

## 📚 概要

canvas98の仕組みを参考に、Tegakiツールを掲示板で使えるようにするブックマークレット機能を実装します。

## 🎯 実装の全体像

```
[ユーザー] 
    ↓ クリック
[ブックマークレット] (1行のJavaScript)
    ↓ 外部JSを読み込み
[tegaki-loader.js] (掲示板検出・統合処理)
    ↓ Tegakiコアを読み込み
[Tegaki ツール本体] (PixiJS + あなたのコード)
    ↓ 描画
[掲示板のcanvasにコピー]
    ↓ 投稿
[完了]
```

## 📁 必要なファイル構成

```
your-domain.com/
├── tegaki/
│   ├── index.html (通常版)
│   ├── config.js
│   ├── core-engine.js
│   ├── system/
│   │   ├── layer-system.js
│   │   ├── export-manager.js
│   │   └── ...
│   └── ...
├── tegaki-loader.js (ブックマークレット用)
└── install.html (インストールページ)
```

## 🔧 実装手順

### Step 1: tegaki-loader.js の作成

前のArtifactのコードを使用して `tegaki-loader.js` を作成します。

**重要な修正ポイント**:

```javascript
// baseURLを実際のドメインに変更
const baseURL = 'https://your-domain.com/tegaki/';

// または相対パスの場合
const baseURL = '/tegaki/';
```

### Step 2: CORS設定（サーバー側）

`tegaki-loader.js` や依存ファイルを外部から読み込めるようにCORSヘッダーを設定:

#### Apache (.htaccess)

```apache
<IfModule mod_headers.c>
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "GET, OPTIONS"
</IfModule>
```

#### Nginx

```nginx
location /tegaki/ {
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, OPTIONS";
}
```

#### Node.js (Express)

```javascript
app.use('/tegaki', (req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
    next();
});
```

### Step 3: ブックマークレットの生成

#### 方法1: 手動で作成

```javascript
javascript:(function(){if(!window.tegakiStart){const s=document.createElement('script');s.charset='UTF-8';s.src='https://your-domain.com/tegaki-loader.js';document.body.appendChild(s)}else{window.tegakiStart()}})();
```

#### 方法2: 生成ツールを使用

```javascript
// ブラウザのコンソールで実行
BookmarkletGenerator.copyToClipboard('https://your-domain.com/tegaki-loader.js');
```

### Step 4: インストールページの作成

`install.html` を作成し、前のArtifactの `INSTALL_PAGE_HTML` を使用:

```html
<!-- install.html -->
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>Tegaki ブックマークレット</title>
    <!-- スタイルとコンテンツは前のArtifact参照 -->
</head>
<body>
    <!-- インストール手順 -->
    <a href="javascript:(function(){...})();" class="bookmarklet">
       📌 Tegaki を起動
    </a>
</body>
</html>
```

### Step 5: core-engine.js の修正

ブックマークレットモードでの起動に対応:

```javascript
// core-engine.js に追加

class TegakiCoreEngine {
    constructor(options = {}) {
        // 既存のコード...
        
        // ブックマークレットモードの検出
        this.isBookmarkletMode = options.isBookmarkletMode || false;
        
        if (this.isBookmarkletMode) {
            this.boardCanvas = options.boardCanvas;
            this.onExit = options.onExit || null;
        }
    }
    
    async init() {
        // 既存の初期化...
        
        if (this.isBookmarkletMode) {
            // ブックマークレットモード用の設定
            this._setupBookmarkletMode();
        }
    }
    
    _setupBookmarkletMode() {
        // 掲示板のcanvasサイズに合わせる
        if (this.boardCanvas) {
            window.TEGAKI_CONFIG.canvas.width = this.boardCanvas.width;
            window.TEGAKI_CONFIG.canvas.height = this.boardCanvas.height;
        }
        
        // 終了時の処理をフック
        if (this.onExit && window.TegakiEventBus) {
            window.TegakiEventBus.on('app:exit', this.onExit);
        }
    }
}
```

### Step 6: tegaki-loader.js でエンジンを起動

```javascript
async startTegaki() {
    // コンテナ作成...
    
    // エンジン起動（ブックマークレットモード）
    if (window.TegakiCoreEngine) {
        const engine = new window.TegakiCoreEngine({
            isBookmarkletMode: true,
            boardCanvas: this.boardCanvas,
            onExit: () => {
                this.exit();
            }
        });
        
        await engine.init();
        this.tegakiUI = engine;
        
        // ... 以下既存のコード
    }
}
```

## 🧪 テスト手順

### ローカル環境でのテスト

#### 1. ローカルサーバーを起動

```bash
# Python 3
python -m http.server 8000

# Node.js (http-server)
npx http-server -p 8000

# PHP
php -S localhost:8000
```

#### 2. テスト用HTMLを作成

```html
<!-- test-board.html -->
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>テスト掲示板</title>
</head>
<body>
    <h1>テスト掲示板</h1>
    
    <!-- ふたば風のcanvas -->
    <form>
        <canvas id="oejs" width="400" height="400" style="border: 1px solid #ccc;"></canvas>
        <br>
        <button type="button" id="oebtnj">お絵かき</button>
        <button type="submit">投稿</button>
    </form>
    
    <script>
        // デバッグ用
        document.querySelector('form').addEventListener('submit', (e) => {
            e.preventDefault();
            const canvas = document.getElementById('oejs');
            const dataURL = canvas.toDataURL();
            console.log('投稿された画像:', dataURL.substring(0, 100) + '...');
            alert('投稿されました（実際には送信されません）');
        });
    </script>
</body>
</html>
```

#### 3. ブックマークレット作成

```javascript
// ローカル用ブックマークレット
javascript:(function(){if(!window.tegakiStart){const s=document.createElement('script');s.charset='UTF-8';s.src='http://localhost:8000/tegaki-loader.js';document.body.appendChild(s)}else{window.tegakiStart()}})();
```

#### 4. テスト実行

1. `http://localhost:8000/test-board.html` を開く
2. ブックマークレットをクリック
3. Tegakiツールが起動するか確認
4. 絵を描いて「掲示板に貼り付けて閉じる」をクリック
5. canvasに絵がコピーされているか確認

### 実際の掲示板でのテスト

#### 安全なテスト方法

1. **ローカルでテスト用スレッドを立てる**
   - 自分で立てたテストスレッドで試す
   - 削除依頼を出す準備をしておく

2. **画像の確認**
   - コピーされた画像が正しいか
   - サイズが適切か
   - 色が正確か

3. **複数回テスト**
   - 連続して使用できるか
   - メモリリークがないか

## 🚨 注意事項

### セキュリティ

#### 1. XSS対策

ブックマークレットは**ユーザーが明示的に実行**するため、XSSではありません。ただし:

- ✅ HTTPS経由で配信すること
- ✅ 信頼できるドメインから読み込むこと
- ✅ コードを定期的に監査すること

#### 2. プライバシー

- ❌ ユーザーの描いた絵を勝手に送信しない
- ❌ 個人情報を収集しない
- ❌ トラッキングコードを含めない

#### 3. 掲示板のルール遵守

- ✅ 掲示板の利用規約を守る
- ✅ スパム行為をしない
- ✅ 荒らし行為に使用しない

### 技術的制約

#### 1. Same-Origin Policy

ブックマークレットは**ユーザーのコンテキスト**で実行されるため、Same-Origin Policyの影響を受けません。

#### 2. CSP (Content Security Policy)

一部の掲示板はCSPが厳格な場合があります:

```http
Content-Security-Policy: script-src 'self'
```

この場合、ブックマークレットは動作しません。

#### 3. iframe内での実行

掲示板がiframe内にある場合、アクセスに制限があります。

## 🔍 トラブルシューティング

### 問題1: ブックマークレットが動作しない

**チェック項目**:
- [ ] JavaScriptが有効になっているか
- [ ] CORSエラーが出ていないか (コンソール確認)
- [ ] tegaki-loader.js のURLが正しいか
- [ ] ネットワークタブで404エラーがないか

**デバッグ**:
```javascript
// コンソールで確認
console.log('tegakiStart:', window.tegakiStart);

// 手動で実行
const s = document.createElement('script');
s.src = 'https://your-domain.com/tegaki-loader.js';
s.onerror = (e) => console.error('Script load failed:', e);
s.onload = () => console.log('Script loaded successfully');
document.body.appendChild(s);
```

### 問題2: 掲示板の要素が見つからない

**チェック項目**:
- [ ] 掲示板のDOM構造を確認
- [ ] canvas要素のIDやクラスを確認
- [ ] JavaScript でDOMが完全に読み込まれているか

**デバッグ**:
```javascript
// コンソールで要素を探す
console.log('Canvas:', document.getElementById('oejs'));
console.log('Button:', document.getElementById('oebtnj'));

// すべてのcanvas要素を表示
console.log('All canvas:', document.querySelectorAll('canvas'));

// フォーム内のcanvasを探す
document.querySelectorAll('form').forEach((form, i) => {
    const canvas = form.querySelector('canvas');
    console.log(`Form ${i} canvas:`, canvas);
});
```

### 問題3: 描いた絵がコピーされない

**チェック項目**:
- [ ] PixiJSのレンダリングが完了しているか
- [ ] canvas.toDataURL() が動作するか
- [ ] CORS制限に引っかかっていないか

**デバッグ**:
```javascript
// Tegakiのcanvasを確認
const engine = window.TegakiBookmarklet?.tegakiUI;
if (engine) {
    const app = engine.app;
    console.log('Tegaki canvas:', app.view);
    
    // レンダリング確認
    try {
        const dataURL = app.view.toDataURL();
        console.log('toDataURL success:', dataURL.substring(0, 50));
    } catch (e) {
        console.error('toDataURL failed:', e);
    }
}
```

### 問題4: メモリリークやパフォーマンス低下

**チェック項目**:
- [ ] Tegakiを閉じた後にオブジェクトが破棄されているか
- [ ] イベントリスナーが削除されているか
- [ ] RenderTextureが破棄されているか

**デバッグ**:
```javascript
// メモリ使用量を確認
console.log('Memory:', performance.memory);

// PixiJSのリソース確認
console.log('PIXI resources:', PIXI.utils.TextureCache);

// DOM要素の数
console.log('DOM nodes:', document.getElementsByTagName('*').length);
```

## 📊 パフォーマンス最適化

### 1. 遅延読み込み

```javascript
// tegaki-loader.js で必要なファイルだけ読み込み
async loadTegakiCore() {
    // 最小限のファイルだけ先に読み込み
    const criticalFiles = [
        'config.js',
        'coordinate-system.js',
        'system/event-bus.js'
    ];
    
    for (const file of criticalFiles) {
        await this.loadScript(baseURL + file);
    }
    
    // 残りは非同期で読み込み
    this.loadRemainingFiles();
}
```

### 2. キャッシュ活用

```javascript
// ブックマークレット本体でキャッシュチェック
javascript:(function(){
    if(!window.tegakiStart){
        // バージョン番号を付けてキャッシュを管理
        const version = '1.0.0';
        const s=document.createElement('script');
        s.charset='UTF-8';
        s.src='https://your-domain.com/tegaki-loader.js?v=' + version;
        document.body.appendChild(s);
    }else{
        window.tegakiStart();
    }
})();
```

### 3. CDN活用

```javascript
// よく使われるライブラリはCDNから
async loadTegakiCore() {
    // PixiJS - CDN (高速)
    if (typeof PIXI === 'undefined') {
        await this.loadScript('https://cdn.jsdelivr.net/npm/pixi.js@8.13.0/dist/pixi.min.js');
    }
    
    // 自前のコード - 自サーバー
    await this.loadScript('https://your-domain.com/tegaki/core-engine.js');
}
```

## 🎨 カスタマイズ例

### 掲示板ごとのUIカスタマイズ

```javascript
class BoardCustomizer {
    static customize(boardType, container) {
        switch (boardType) {
            case 'futaba':
                this.futabaStyle(container);
                break;
            case 'mebuki':
                this.mebukiStyle(container);
                break;
        }
    }
    
    static futabaStyle(container) {
        // ふたば風のレトロなスタイル
        container.style.background = 'rgba(238, 232, 213, 0.95)';
        
        const closeBtn = container.querySelector('button');
        if (closeBtn) {
            closeBtn.style.background = '#800000';
            closeBtn.style.border = '2px outset #800000';
        }
    }
    
    static mebukiStyle(container) {
        // めぶき風のモダンなスタイル
        container.style.background = 'rgba(0, 0, 0, 0.9)';
        container.style.backdropFilter = 'blur(10px)';
    }
}
```

### サイズ自動調整

```javascript
detectBoardElements() {
    // ... 既存のコード ...
    
    if (this.boardCanvas) {
        // 掲示板のcanvasサイズに合わせる
        const maxSize = TEGAKI_BOARD_CONFIGS[this.boardType]?.maxSize;
        
        if (maxSize) {
            const width = Math.min(this.boardCanvas.width, maxSize.width);
            const height = Math.min(this.boardCanvas.height, maxSize.height);
            
            window.TEGAKI_CONFIG.canvas.width = width;
            window.TEGAKI_CONFIG.canvas.height = height;
        }
    }
}
```

## 📱 モバイル対応

### レスポンシブ対応

```javascript
async startTegaki() {
    const container = document.createElement('div');
    
    // モバイル検出
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    
    if (isMobile) {
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 999999;
        `;
        
        // タッチイベント用の設定
        container.style.touchAction = 'none';
        
        // ビューポート固定
        const meta = document.createElement('meta');
        meta.name = 'viewport';
        meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
        document.head.appendChild(meta);
    }
}
```

## 🔐 セキュリティ強化

### 1. Subresource Integrity (SRI)

```javascript
// 外部スクリプトにSRIを追加
loadScript(url, integrity = null) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = url;
        
        if (integrity) {
            script.integrity = integrity;
            script.crossOrigin = 'anonymous';
        }
        
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
    });
}

// 使用例
await this.loadScript(
    'https://cdn.jsdelivr.net/npm/pixi.js@8.13.0/dist/pixi.min.js',
    'sha384-...' // CDNから取得したハッシュ
);
```

### 2. コンテンツ検証

```javascript
async loadTegakiCore() {
    // スクリプト読み込み前にチェックサムを検証
    const response = await fetch(baseURL + 'core-engine.js');
    const content = await response.text();
    
    // 簡易的なチェックサム検証
    const hash = await this.calculateHash(content);
    const expectedHash = await fetch(baseURL + 'checksums.json')
        .then(r => r.json())
        .then(data => data['core-engine.js']);
    
    if (hash !== expectedHash) {
        throw new Error('Security check failed: Checksum mismatch');
    }
    
    // 検証OKなら実行
    eval(content);
}

async calculateHash(content) {
    const encoder = new TextEncoder();
    const data = encoder.encode(content);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}
```

## 📈 使用統計の収集（オプション）

プライバシーに配慮した統計収集:

```javascript
class TegakiAnalytics {
    static async logUsage(boardType) {
        // 個人を特定しない統計のみ
        const data = {
            event: 'bookmarklet_used',
            board_type: boardType,
            timestamp: new Date().toISOString(),
            // ユーザーを特定する情報は含めない
        };
        
        // 自サーバーに送信（オプション）
        try {
            await fetch('https://your-domain.com/api/analytics', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
        } catch (e) {
            // 失敗しても無視（統計は重要でない）
        }
    }
}
```

## 🚀 本番環境へのデプロイ

### チェックリスト

#### コード準備
- [ ] すべてのURLを本番環境のものに変更
- [ ] デバッグコードを削除
- [ ] JavaScriptを圧縮（minify）
- [ ] ブックマークレットを最終版に更新

#### サーバー設定
- [ ] HTTPS証明書の設定
- [ ] CORSヘッダーの設定
- [ ] Gzip圧縮の有効化
- [ ] キャッシュ設定

#### テスト
- [ ] ローカル環境でテスト完了
- [ ] 実際の掲示板でテスト完了
- [ ] 複数ブラウザでテスト完了
- [ ] モバイルでテスト完了

#### ドキュメント
- [ ] インストールページの作成
- [ ] 使い方ガイドの作成
- [ ] トラブルシューティングの作成
- [ ] 利用規約の作成

### 本番環境の構成例

```
Production Server (HTTPS)
├── https://your-domain.com/
│   ├── install.html (インストールページ)
│   ├── tegaki-loader.js (圧縮版)
│   └── tegaki/
│       ├── config.min.js
│       ├── core-engine.min.js
│       └── system/
│           ├── layer-system.min.js
│           └── ...
```

### CDN構成（推奨）

```
CDN (CloudFlare / AWS CloudFront)
├── https://cdn.your-domain.com/tegaki/
│   ├── v1.0.0/
│   │   ├── loader.min.js
│   │   ├── core.min.js
│   │   └── ...
│   └── latest/ -> v1.0.0/
```

## 📚 ドキュメント例

### ユーザー向けFAQ

**Q: ブックマークレットとは？**
A: ブラウザのブックマーク（お気に入り）に登録できる小さなJavaScriptプログラムです。

**Q: 安全ですか？**
A: はい。コードは公開されており、悪意のある動作はしません。

**Q: どの掲示板で使えますか？**
A: ふたば、めぶき、その他canvas要素を使用する掲示板で使用できます。

**Q: スマホでも使えますか？**
A: はい。モバイルブラウザでも動作します。

**Q: 無料ですか？**
A: はい。完全に無料です。

### 開発者向けAPI

```javascript
// グローバルAPI
window.tegakiStart()    // Tegakiツールを起動
window.tegakiStop()     // 描いた絵をコピーして終了
window.tegakiCancel()   // キャンセルして終了

// 高度な使い方
const bookmarklet = window.TegakiBookmarklet;
bookmarklet.boardType           // 検出された掲示板タイプ
bookmarklet.boardCanvas         // 掲示板のcanvas要素
bookmarklet.tegakiUI            // Tegakiエンジンのインスタンス
```

## ✅ 完成後のチェックリスト

### 機能確認
- [ ] ブックマークレットが正常に起動する
- [ ] 掲示板の検出が正しく動作する
- [ ] 描画機能がすべて使える
- [ ] 描いた絵が掲示板のcanvasにコピーされる
- [ ] 終了後にメモリリークがない

### ブラウザ互換性
- [ ] Chrome で動作
- [ ] Firefox で動作
- [ ] Safari で動作
- [ ] Edge で動作
- [ ] モバイルブラウザで動作

### 掲示板互換性
- [ ] ふたばで動作
- [ ] めぶきで動作
- [ ] その他の掲示板で動作（該当する場合）

### パフォーマンス
- [ ] 起動時間が3秒以内
- [ ] 描画がスムーズ
- [ ] メモリ使用量が適切
- [ ] CPUの負荷が低い

### セキュリティ
- [ ] XSS脆弱性がない
- [ ] HTTPS経由で配信
- [ ] 外部リソースが信頼できる
- [ ] プライバシーに配慮

### ユーザビリティ
- [ ] 使い方が直感的
- [ ] エラーメッセージが分かりやすい
- [ ] インストールが簡単
- [ ] ドキュメントが充実

## 🎉 まとめ

これで、canvas98のようなブックマークレット機能があなたのTegakiツールに実装できます！

### 主な特徴

✅ **インストール不要** - ブックマーク追加のみ
✅ **クロスブラウザ** - すべての主要ブラウザで動作
✅ **自動更新** - 外部JSを更新するだけ
✅ **掲示板統合** - 既存の掲示板機能を拡張
✅ **非破壊的** - 元の機能を壊さない

### 次のステップ

1. ローカル環境でテスト
2. 本番環境にデプロイ
3. インストールページを公開
4. ユーザーからフィードバックを収集
5. 継続的に改善

---

**実装完了！お疲れ様でした！** 🎨✨