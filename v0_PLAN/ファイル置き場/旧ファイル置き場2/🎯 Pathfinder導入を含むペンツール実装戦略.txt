==================================================
🎨 Tegaki ペンツール開発計画書 (Pathfinder導入版)
==================================================

■ 目的
PixiJS v8 + WebGPU時代を見据えたベクターペンツールを実装し、
非破壊編集・高速描画・AI補正を可能にする。
Pathfinder を段階的に導入し、将来的にGPUベクターレンダリングを標準化する。

--------------------------------------------------
■ フェーズ構成
--------------------------------------------------

【Phase1（現行）】
- PixiJS Graphics 直描画によるシンプルなストローク描画
- 基本座標管理（CoordinateManager）
- 描画記録の雛形（RecordManager）

【Phase1.5（直近の重点）】
- 非破壊編集基盤の完成
  - ストロークデータ完全保持（SVG Path互換）
  - RecordManager連携で Undo/Redo
  - NavigationManager連携でキャンバス移動・ズーム
- ストローク単位の操作履歴を確立

【Phase2】
- レイヤー管理導入
  - レイヤー間でのストローク移動
  - ストローク変形（移動・回転・拡縮）
  - 範囲選択と結合操作
- 内部データを「TegakiPathFormat（TPF）」として定義
  - JSONベースの共通形式
  - SVG出力 / GPU転送 両対応

【Phase3】
- Pathfinder導入（WebGPUベース）
  - ハイブリッド描画モード
    - PixiJS Graphics = 安定描画
    - Pathfinder = 高速GPU描画
  - Pathfinderで生成した結果を WebGPUテクスチャとして取得し、
    PixiJS Container に統合
- 高度機能
  - PhysicalBrushRenderer（SDFベースの物理ブラシ、筆圧/傾き/速度対応）
  - AIStrokeProcessor（手ぶれ補正・自動整形・SVG最適化）

【Phase3.5 以降】
- Pathfinder描画を標準化
- PixiJS Graphics をフォールバックとして維持
- AI補正＋Pathfinder描画による「プロ向け環境」へ拡張

--------------------------------------------------
■ 実装指針
--------------------------------------------------

1. ストローク管理
   - RecordManagerにストロークをJSON形式で保持
   - 例: TegakiPathFormat (TPF)
     {
       "points": [[x,y,pressure], ...],
       "type": "pen",
       "color": "#800000",
       "width": 2.0
     }

2. 描画エンジン構成
   - PixiJS Graphics (WebGL) : デフォルト描画
   - Pathfinder (WebGPU) : 高速描画
   - 両者はTPFを介して切替可能とする

3. フォールバック戦略
   - PixiJS Graphics を常に保持
   - Pathfinder利用不可環境では自動フォールバック

4. UI統合
   - Sidebarアイコンからツール切替
   - 設定ポップアップでブラシサイズ・色を操作
   - Phase3から「高速モード（Pathfinder）」トグルを導入

--------------------------------------------------
■ 導入ライブラリ方針
--------------------------------------------------

- 必須:
  - Pathfinder / Pathfinder2 (Rust+WASM, WebGPUランタイム込み)

- 不要:
  - pixi-graphics-smooth（Pixi v8以降は不要）
  - Paper.js / Two.js （参考ロジックのみ）

- 任意:
  - floating-ui / tippy.js（設定ポップアップ用、小規模なら不要）

--------------------------------------------------
■ 導入ステップ
--------------------------------------------------

Step 1: Phase1.5実装
- Undo/Redo完成
- NavigationManagerでパン・ズーム
- ストロークデータ形式(TPF)整備

Step 2: Phase2実装
- レイヤー管理とストローク変形
- GPU転送準備

Step 3: Phase3実装
- Pathfinder統合（ハイブリッド描画モード）
- PhysicalBrushRenderer / AIStrokeProcessor追加

Step 4: 長期運用
- Pathfinder標準化
- PixiJSフォールバック維持
- AI + WebGPU描画による高品質化

==================================================
