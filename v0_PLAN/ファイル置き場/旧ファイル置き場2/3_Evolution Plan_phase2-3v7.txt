# 🚀 Tegaki Phase2-3計画書 v7 - PixiJS v8基盤高度機能実装

> **v8移行完了後の高度機能実装計画** - レイヤー・変形・アニメーション・出力機能

## 🎯 前提条件

### ✅ Phase1.8完了必須
- PixiJS v8移行完了・WebGPU対応
- ペンツールリアルタイム描画実現
- v8 Container階層基盤構築
- 全既存機能v8対応完了

### 🚫 Phase2開始前禁止事項
- Phase1.8未完了での着手
- v7とv8混在状態での機能追加
- WebGPU未対応環境での高度機能実装

---

## 🎨 **Phase2 - レイヤー・変形・高度描画（v8基盤）**

### 🎯 Phase2目標
- マルチレイヤー編集環境構築
- 選択・変形ツール実装
- 高度描画ツール追加
- 非破壊編集強化

### 📋 Phase2.1 - レイヤー管理システム

#### 🎨 LayerManager（新規実装）
```javascript
/**
 * 🎨 LayerManager - v8 Container階層活用レイヤー管理
 * 📋 RESPONSIBILITY: レイヤー作成・管理・操作・順序制御
 * 🚫 PROHIBITION: v7 @pixi/layers依存・直接Container操作
 * ✅ PERMISSION: v8 Container機能フル活用・WebGPU最適化
 */
class LayerManager {
    // 使用ファイル・メソッド・シンボル定義
    // 📄 managers/layer-manager.js
    // 🔗 依存: CanvasManagerInstance, EventBusInstance
    // 📤 提供: createLayer, deleteLayer, reorderLayers, setLayerProperties
    
    // 実装予定メソッド（詳細コードはPhase1.8完了後策定）
    createLayer(id, options): PIXI.Container
    deleteLayer(id): boolean
    duplicateLayer(sourceId, newId): PIXI.Container
    reorderLayers(layerIds): boolean
    setLayerBlendMode(id, mode): boolean
    setLayerOpacity(id, opacity): boolean
    setLayerVisible(id, visible): boolean
    mergeLayersDown(layerId): PIXI.Container
}
```

#### 🖼️ LayerPanel（新規実装）
```javascript  
/**
 * 🖼️ LayerPanel - レイヤーUI管理
 * 📋 RESPONSIBILITY: レイヤー一覧表示・操作UI・ドラッグ&ドロップ
 * 🚫 PROHIBITION: 直接レイヤー操作・Manager経由せずDOM操作
 * ✅ PERMISSION: LayerManager連携・視覚的フィードバック
 */
class LayerPanel {
    // 📄 ui/layer-panel.js（新規作成）
    // 🔗 依存: LayerManager, EventBusInstance
    // 📤 提供: showLayerPanel, updateLayerList, handleLayerDrag
}
```

### 📋 Phase2.2 - 選択・変形システム

#### ✂️ SelectionManager（新規実装）
```javascript
/**
 * ✂️ SelectionManager - オブジェクト選択管理
 * 📋 RESPONSIBILITY: 矩形・楕円・自由選択・選択範囲管理
 * 🚫 PROHIBITION: 直接Graphics操作・Manager経由せず変形
 * ✅ PERMISSION: v8高精度座標・マルチ選択・選択範囲保存
 */
class SelectionManager {
    // 📄 managers/selection-manager.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, CoordinateManagerInstance
    // 📤 提供: selectRectangle, selectEllipse, selectLasso, getSelectedObjects
    
    // 実装予定メソッド
    selectRectangle(x1, y1, x2, y2): Array<PIXI.DisplayObject>
    selectEllipse(centerX, centerY, radiusX, radiusY): Array<PIXI.DisplayObject>  
    selectLasso(points): Array<PIXI.DisplayObject>
    selectAll(): Array<PIXI.DisplayObject>
    clearSelection(): boolean
    addToSelection(object): boolean
    removeFromSelection(object): boolean
    getSelectionBounds(): PIXI.Rectangle
}
```

#### 🔄 TransformTool（新規実装）
```javascript
/**
 * 🔄 TransformTool - 選択オブジェクト変形
 * 📋 RESPONSIBILITY: 移動・回転・拡大縮小・ハンドル操作
 * 🚫 PROHIBITION: 直接transform操作・座標計算ミス
 * ✅ PERMISSION: v8高精度変形・WebGPU加速・リアルタイム変形
 */
class TransformTool extends AbstractTool {
    // 📄 tools/transform-tool.js（新規作成）
    // 🔗 依存: SelectionManager, CoordinateManagerInstance
    // 📤 提供: transformSelected, showTransformHandles, applyTransform
    
    // 実装予定メソッド
    showTransformHandles(selection): void
    hideTransformHandles(): void
    startTransform(handleType, startPoint): void
    updateTransform(currentPoint): void
    applyTransform(): void
    resetTransform(): void
}
```

### 📋 Phase2.3 - 高度描画ツール

#### 🖌️ BrushTool（新規実装）
```javascript
/**
 * 🖌️ BrushTool - テクスチャ対応ブラシ
 * 📋 RESPONSIBILITY: テクスチャブラシ・圧力感知・ブラシ設定
 * 🚫 PROHIBITION: 重複テクスチャ読み込み・メモリリーク
 * ✅ PERMISSION: v8 RenderTexture活用・圧力感知対応
 */
class BrushTool extends AbstractTool {
    // 📄 tools/brush-tool.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, TextureManager（新規）
    // 📤 提供: setBrushTexture, setPressureSensitivity, drawBrushStroke
}
```

#### 🔺 ShapeTool（新規実装） 
```javascript
/**
 * 🔺 ShapeTool - 図形描画ツール
 * 📋 RESPONSIBILITY: 矩形・楕円・多角形・直線描画
 * 🚫 PROHIBITION: 重複図形作成・座標計算エラー
 * ✅ PERMISSION: v8 Graphics活用・グリッドスナップ・比例維持
 */
class ShapeTool extends AbstractTool {
    // 📄 tools/shape-tool.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, CoordinateManagerInstance  
    // 📤 提供: drawRectangle, drawEllipse, drawPolygon, drawLine
}
```

#### 🎨 FillTool（新規実装）
```javascript
/**
 * 🎨 FillTool - 塗りつぶし・グラデーション
 * 📋 RESPONSIBILITY: 塗りつぶし・グラデーション・パターン塗り
 * 🚫 PROHIBITION: 無限ループ・メモリ過剰使用
 * ✅ PERMISSION: フラッドフィル・グラデーション・v8最適化
 */
class FillTool extends AbstractTool {
    // 📄 tools/fill-tool.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, ColorManager（新規）
    // 📤 提供: floodFill, gradientFill, patternFill
}
```

### 📋 Phase2.4 - UI強化・パネル統合

#### 🎛️ ToolPanel（拡張実装）
```javascript
/**
 * 🎛️ ToolPanel - ツールパネル拡張
 * 📋 RESPONSIBILITY: 全ツール統合UI・設定パネル・ショートカット表示
 * 🚫 PROHIBITION: ツール直接操作・設定値直接変更
 * ✅ PERMISSION: ToolManager経由操作・動的UI更新
 */
class ToolPanel {
    // 📄 ui/tool-panel.js（拡張）
    // 🔗 依存: ToolManagerInstance, ConfigManagerInstance
    // 📤 提供: showAdvancedTools, updateToolSettings, showShortcuts
}
```

---

## 🚀 **Phase3 - アニメーション・出力・最適化（v8最適化）**

### 🎯 Phase3目標  
- フレームベースアニメーション
- 高品質出力機能
- パフォーマンス最適化
- プラグイン機能

### 📋 Phase3.1 - アニメーション機能

#### 🎬 AnimationManager（新規実装）
```javascript
/**
 * 🎬 AnimationManager - フレームアニメーション管理
 * 📋 RESPONSIBILITY: フレーム管理・タイムライン・オニオンスキン
 * 🚫 PROHIBITION: フレーム重複作成・メモリリーク
 * ✅ PERMISSION: v8 RenderTexture活用・フレーム最適化
 */
class AnimationManager {
    // 📄 managers/animation-manager.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, RecordManagerInstance
    // 📤 提供: createFrame, deleteFrame, playAnimation, exportGIF
    
    // 実装予定メソッド（詳細はPhase2完了後策定）
    createFrame(index): AnimationFrame
    duplicateFrame(sourceIndex, targetIndex): AnimationFrame
    deleteFrame(index): boolean
    setFrameRate(fps): void
    playAnimation(startFrame?, endFrame?): void
    pauseAnimation(): void
    stopAnimation(): void
    exportToGIF(options): Blob
}
```

#### 🎞️ Timeline（新規実装）
```javascript
/**
 * 🎞️ Timeline - タイムライン UI
 * 📋 RESPONSIBILITY: フレーム表示・スクラブ・キーフレーム管理
 * 🚫 PROHIBITION: 直接フレーム操作・UI状態とデータ不整合
 * ✅ PERMISSION: AnimationManager連携・視覚的操作
 */
class Timeline {
    // 📄 ui/timeline.js（新規作成）
    // 🔗 依存: AnimationManager, EventBusInstance
    // 📤 提供: showTimeline, updateFrameList, handleFrameDrag
}
```

#### 🧅 OnionSkin（新規実装）
```javascript
/**
 * 🧅 OnionSkin - 前後フレーム表示
 * 📋 RESPONSIBILITY: 前後フレーム半透明表示・設定管理
 * 🚫 PROHIBITION: 過度なフレーム表示・描画パフォーマンス劣化
 * ✅ PERMISSION: v8半透明レンダリング・動的表示切替
 */  
class OnionSkin {
    // 📄 animation/onion-skin.js（新規作成）
    // 🔗 依存: AnimationManager, CanvasManagerInstance
    // 📤 提供: showOnionSkin, setOnionSkinFrames, setOpacity
}
```

### 📋 Phase3.2 - 高品質出力機能

#### 📤 ExportManager（新規実装）
```javascript
/**
 * 📤 ExportManager - 高品質出力管理
 * 📋 RESPONSIBILITY: PNG・JPEG・GIF・SVG出力・品質設定
 * 🚫 PROHIBITION: 低品質出力・メタデータ欠落
 * ✅ PERMISSION: v8 RenderTexture活用・高解像度出力
 */
class ExportManager {
    // 📄 managers/export-manager.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, AnimationManager
    // 📤 提供: exportPNG, exportJPEG, exportGIF, exportSVG
    
    // 実装予定メソッド
    exportPNG(options): Blob
    exportJPEG(quality, options): Blob  
    exportGIF(animationOptions): Blob
    exportSVG(options): string
    exportHighRes(scale, format): Blob
    batchExport(frames, format): Array<Blob>
}
```

#### 🎨 RenderOptimizer（新規実装）
```javascript
/**
 * 🎨 RenderOptimizer - レンダリング最適化
 * 📋 RESPONSIBILITY: WebGPU最適化・メモリ管理・描画効率化
 * 🚫 PROHIBITION: 過度な最適化・機能犠牲・デバッグ困難化
 * ✅ PERMISSION: WebGPU活用・適応的品質調整
 */
class RenderOptimizer {
    // 📄 utils/render-optimizer.js（新規作成）
    // 🔗 依存: CanvasManagerInstance, ConfigManagerInstance
    // 📤 提供: optimizeForWebGPU, adaptiveQuality, memoryManagement
}
```

### 📋 Phase3.3 - パフォーマンス最適化

#### ⚡ PerformanceMonitor（新規実装）
```javascript
/**
 * ⚡ PerformanceMonitor - パフォーマンス監視
 * 📋 RESPONSIBILITY: FPS監視・メモリ使用量・描画時間計測
 * 🚫 PROHIBITION: 過度な監視・パフォーマンス劣化
 * ✅ PERMISSION: リアルタイム監視・最適化提案
 */
class PerformanceMonitor {
    // 📄 debug/performance-monitor.js（新規作成）
    // 🔗 依存: なし（独立監視）
    // 📤 提供: startMonitoring, getPerformanceReport, suggestOptimizations
}
```

#### 🧠 MemoryManager（新規実装）
```javascript  
/**
 * 🧠 MemoryManager - メモリ管理最適化
 * 📋 RESPONSIBILITY: テクスチャ管理・オブジェクト破棄・GC最適化
 * 🚫 PROHIBITION: 手動メモリ操作・強制GC・メモリリーク
 * ✅ PERMISSION: 自動最適化・適応的管理・監視機能
 */
class MemoryManager {
    // 📄 utils/memory-manager.js（新規作成）
    // 🔗 依存: PerformanceMonitor, ConfigManagerInstance
    // 📤 提供: optimizeMemory, cleanupTextures, monitorUsage
}
```

### 📋 Phase3.4 - プラグイン・拡張機能

#### 🔌 PluginManager（新規実装）
```javascript
/**
 * 🔌 PluginManager - プラグイン管理
 * 📋 RESPONSIBILITY: プラグイン読み込み・API提供・サンドボックス
 * 🚫 PROHIBITION: 不正プラグイン・セキュリティ穴・API破綻
 * ✅ PERMISSION: 安全なAPI・プラグイン検証・動的読み込み
 */
class PluginManager {
    // 📄 core/plugin-manager.js（新規作成）
    // 🔗 依存: ErrorManagerInstance, SecurityManager（新規）
    // 📤 提供: loadPlugin, unloadPlugin, validatePlugin, getPluginAPI
}
```

---

## 🔄 **実装順序・依存関係**

### 📋 Phase2実装順序
```
Phase2.1: LayerManager → LayerPanel
    ↓
Phase2.2: SelectionManager → TransformTool  
    ↓
Phase2.3: BrushTool → ShapeTool → FillTool
    ↓
Phase2.4: ToolPanel拡張・統合テスト
```

### 📋 Phase3実装順序
```
Phase3.1: AnimationManager → Timeline → OnionSkin
    ↓
Phase3.2: ExportManager → RenderOptimizer
    ↓  
Phase3.3: PerformanceMonitor → MemoryManager
    ↓
Phase3.4: PluginManager・最終統合
```

### ⚠️ 架空メソッド対策・整合性確認

#### 🔍 Phase2開始前チェックリスト
- [ ] Phase1.8完了・v8移行完全終了確認
- [ ] 全既存Manager v8対応動作確認
- [ ] WebGPU対応・フォールバック動作確認
- [ ] リアルタイム描画・座標精度確認

#### 🔍 各Phase完了チェックリスト
- [ ] **メソッド実装確認**: 全定義メソッド実装完了
- [ ] **依存関係確認**: 呼び出し先メソッド実在確認
- [ ] **Manager連携確認**: 統一API使用確認
- [ ] **エラー処理確認**: ErrorManager経由確認
- [ ] **デバッグ情報確認**: getDebugInfo実装確認

#### 📝 ファイルヘッダー記載必須項目
```javascript
/**
 * 🎨 ClassName - 役割説明
 * 📋 RESPONSIBILITY: このクラスの責務
 * 🚫 PROHIBITION: やってはいけないこと  
 * ✅ PERMISSION: やっても良いこと
 * 
 * 📄 FILE: ファイルパス
 * 🔗 DEPENDENCIES: 依存するManager/Class一覧
 * 📤 PROVIDES: 他ファイルから呼び出されるメソッド一覧
 * 🔄 INTEGRATION: 他クラスとの連携フロー
 * 
 * 🎯 PHASE: Phase2/Phase3実装段階
 * ⚠️ PREREQUISITES: 前提条件・依存Phase
 */
```

---

## 🚨 **Phase2-3共通禁止事項**

### 💀 絶対禁止（重大違反）
1. **Phase1.8未完了での着手** - v8移行完了が前提
2. **架空メソッド呼び出し** - 実装前メソッド呼び出し禁止
3. **Manager経由しない直接操作** - PixiJS直接操作禁止
4. **エラー握りつぶし** - try/catch握りつぶし継続禁止
5. **フォールバック・フェイルセーフ** - 正しい構造のみで動作

### ✅ Phase2-3必須遵守
1. **段階的実装** - Phase内でも機能単位で段階実装
2. **既存機能保護** - Phase1機能の動作保証継続
3. **v8機能活用** - WebGPU・Container階層・高精度座標
4. **統合テスト実施** - Phase完了時の全機能動作確認  
5. **性能監視継続** - 機能追加による性能劣化監視

---

## 🎯 **成功基準**

### ✅ Phase2完了基準
- [ ] マルチレイヤー編集環境完全動作
- [ ] 選択・変形ツール全機能動作  
- [ ] 高度描画ツール実装・動作確認
- [ ] UI統合・操作性向上確認
- [ ] 既存Phase1機能すべて動作継続

### 🚀 Phase3完了基準
- [ ] フレームアニメーション完全動作
- [ ] 高品質出力（PNG・JPEG・GIF）動作
- [ ] パフォーマンス最適化効果確認
- [ ] プラグイン機能基本動作
- [ ] 総合性能・安定性確認

### 📊 定量的目標
- **メモリ使用量**: Phase2で+50%以下・Phase3で+100%以下
- **描画性能**: 60FPS維持（WebGPU環境）
- **起動時間**: Phase3完了後も5秒以内
- **エラー発生率**: Phase追加機能でのエラー1%以下

---

## 🔧 **使用予定技術・ライブラリ**

### ✅ Phase2追加予定
```javascript
// レイヤー・変形用
// 全てv8対応版・CDN経由
"@pixi/graphics-extras": "v8対応版"  // 高度図形
"@pixi/math-extras": "v8対応版"      // 数学計算強化

// UI強化用  
"@pixi/ui": "v2.1.0"                // UI コンポーネント拡張
```

### 🚀 Phase3追加予定
```javascript
// アニメーション・出力用
"@pixi/gif": "^2.1.1"               // GIF出力（v8互換確認済み）
"gif.js": "^0.2.0"                  // GIF生成最適化
"canvas-to-blob": "^1.0.0"          // 高品質出力

// パフォーマンス・監視用
"stats.js": "^0.17.0"               // FPS/メモリ監視
```

### 🚫 使用禁止（継続）
- TypeScript・ESM・ビルドツール
- jQuery・古いライブラリ
- セキュリティリスクあるライブラリ
- v8非対応ライブラリ

---

**📝 更新方針**: Phase1.8完了後に詳細実装計画・具体的コード例追加  
**🎯 重点方針**: v8機能フル活用・WebGPU最適化・段階的実装・品質保証  
**💀 基本原則**: 怪物コード撲滅継続・エラー隠蔽禁止・架空メソッド撲滅  
**🚀 最終目標**: プロ品質描画ツール・60FPS・高品質出力・拡張性確保