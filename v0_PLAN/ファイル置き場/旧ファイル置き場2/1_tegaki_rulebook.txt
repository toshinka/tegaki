# 📋 Tegaki 統合ルールブック Phase1-Current 剛直版

> **骨太で剛直な開発方針** - エラーを隠すな、構造を透けさせろ、素人が読める構造にしろ

## 🎯 基本方針：怪物コード撲滅宣言

### 💀 絶対禁止事項（重大違反）
1. **try/catch での握りつぶし禁止** - 必ず `throw` か `console.error` + 詳細ログ
2. **フォールバック・フェイルセーフ禁止** - 正しい構造でのみ動作させる
3. **架空メソッド呼び出し禁止** - 実装されていないメソッドを呼ぶな
4. **二重責務禁止** - 1ファイル＝1責務、似た処理のコピペ禁止
5. **ブラックボックス化禁止** - 全処理に日本語コメント必須

### ✅ 必須遵守事項
1. **エラーは ErrorManager 経由のみ** - 他ファイルでの直接通知禁止
2. **名前空間統一** - 全て `window.Tegaki.*` に公開
3. **初期化順序厳守** - HTML読み込み順序通りの依存関係
4. **構文完整性確保** - ES2023準拠、後方互換考慮なし
5. **車輪の再発明禁止** - PixiJS標準機能を最大活用

## 🏗️ 技術スタック・開発環境

### ✅ 使用技術（固定）
- **PixiJS v7** - 描画・キャンバス基盤（CDN読み込み）
- **JavaScript ES2023** - モダン構文積極利用
- **fetch API** - HTTP通信（必要時）
- **HTML直開き** - ローカルファイル直接実行可能

### 🚫 禁止技術
- **Vite / TypeScript / ESM** - HTML直開きで動くことが必須
- **webpack / Babel** - ビルドプロセス禁止
- **jQuery** - モダン構文で代替
- **後方互換** - 古いブラウザ考慮なし

### 📦 依存関係管理
```javascript
// 全モジュールは以下に依存（必須）
window.Tegaki.ConfigManagerInstance    // 設定管理
window.Tegaki.ErrorManagerInstance     // エラー処理  
window.Tegaki.StateManagerInstance     // 状態管理（未実装）
window.Tegaki.EventBusInstance         // イベント配信
```

### 📋 初期化順序（HTML準拠・厳守）
```html
<!-- 1. PixiJS CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/7.3.2/pixi.min.js"></script>

<!-- 2. Utils（依存なし） -->
<script src="js/utils/error-manager.js"></script>
<script src="js/utils/config-manager.js"></script>  
<script src="js/utils/event-bus.js"></script>

<!-- 3. Managers（Utils依存） -->
<script src="managers/canvas-manager.js"></script>
<script src="managers/tool-manager.js"></script>

<!-- 4. Tools（Managers依存） -->
<script src="tools/pen-tool.js"></script>
<script src="tools/eraser-tool.js"></script>

<!-- 5. App Core（全依存） -->
<script src="js/app-core.js"></script>
<script src="js/main.js"></script>

<!-- 6. Bootstrap（App依存） -->
<script src="js/bootstrap.js"></script>
```

## 📦 Phase1 アーキテクチャ（現在動作版）

### 🏗️ ファイル構造＆責務分離
```
📁 v1_phase1rev2/
├── 🌐 index.html              # UI・CSS・スクリプト読み込み順序管理
├── 🚀 js/bootstrap.js         # DOMContentLoaded→TegakiApplication起動
├── 🎯 js/app-core.js          # TegakiApplication（メインアプリ）定義
├── 🖊️ js/main.js              # AppCore（Manager束ね）定義  
├── 🚨 js/utils/error-manager.js    # 全エラー処理専任
├── ⚙️ js/utils/config-manager.js   # 設定管理
├── 📡 js/utils/event-bus.js       # イベント配信
├── 🎨 managers/canvas-manager.js   # PixiJS・レイヤー管理専任
├── 🖊️ managers/tool-manager.js    # ツール選択・イベント転送専任
├── ✏️ tools/pen-tool.js           # ベクターペン描画専任
└── 🧹 tools/eraser-tool.js        # 消しゴム専任（未実装）
```

### 🔄 初期化フロー（HTML読み込み順序準拠）
1. **PixiJS CDN** → PixiJS利用可能
2. **error-manager.js** → ErrorManagerInstance 作成
3. **config-manager.js** → ConfigManagerInstance 作成  
4. **event-bus.js** → EventBusInstance 作成
5. **canvas-manager.js** → CanvasManager クラス定義
6. **tool-manager.js** → ToolManager クラス定義
7. **pen-tool.js** → PenTool クラス定義
8. **app-core.js** → TegakiApplication クラス定義
9. **main.js** → AppCore クラス定義
10. **bootstrap.js** → TegakiApplication インスタンス化

### 🎮 動作フロー（現在成功中）
1. **Bootstrap** → `new TegakiApplication()`
2. **TegakiApplication** → `new AppCore()` → Manager作成
3. **Canvas作成** → PixiJS Application → DOM配置
4. **UI連携** → ツールボタン・イベント設定
5. **描画** → PointerEvent → ToolManager → PenTool → Graphics作成

## 🧩 責務分離ルール（Phase1版）

### 🎯 TegakiApplication（app-core.js）
- **責務**: メインアプリケーション・UI連携・イベント設定
- **禁止**: Manager作成・描画処理・エラー処理
- **必須メソッド**: `constructor()`, `initialize()`, `createCanvas()`, `setupUI()`

### 🖊️ AppCore（main.js）  
- **責務**: Manager束ね・Manager間連携
- **禁止**: 描画処理・UI操作・エラー処理
- **必須メソッド**: `initialize()`, `setPixiApp()`, `isReady()`

### 🎨 CanvasManager  
- **責務**: PixiJS Application管理・レイヤー管理のみ
- **禁止**: 描画処理・座標変換・複雑な初期化
- **必須メソッド**: `setPixiApp()`, `createLayer()`, `addGraphicsToLayer()`

### 🖊️ ToolManager
- **責務**: ツール選択・イベント転送のみ
- **禁止**: 描画処理・座標変換・複雑な状態管理  
- **必須メソッド**: `selectTool()`, `handlePointerDown/Move/Up()`

### ✏️ PenTool
- **責務**: PIXI.Graphics作成・線描画のみ
- **禁止**: レイヤー操作・UI通知・座標変換
- **必須メソッド**: `onPointerDown/Move/Up()`, `setCanvasManager()`

### 🚨 ErrorManager  
- **責務**: 全エラー表示・UI通知・ログ出力のみ
- **禁止**: 複雑な分類・統計・設定管理
- **必須メソッド**: `showError()`, `showInfo()`, `showWarning()`

## 🚨 エラー処理ポリシー（剛直版）

### 📍 エラー処理の正しい配置
```javascript
// ✅ 正しい：ErrorManager経由
if (!requiredData) {
    throw new Error('Required data not available');  // 上位でキャッチしてErrorManagerへ
}

// ✅ 正しい：詳細ログ付きthrow
try {
    riskyOperation();
} catch (error) {
    console.error('❌ Operation failed:', error, { context: 'MyClass.method' });
    throw error; // 隠蔽しない
}
```

### 💀 エラー処理の間違い（絶対禁止）
```javascript
// ❌ 絶対禁止：握りつぶし
try {
    riskyOperation();  
} catch (e) {
    // 何もしない - 握りつぶし
}

// ❌ 絶対禁止：曖昧なフォールバック
const data = getData() || getDefaultData() || {};

// ❌ 絶対禁止：直接UI通知（ErrorManager以外）
catch (error) {
    alert('エラーが発生しました'); // NG：ErrorManagerを通せ
    console.error(error); // NG：throwして上位に委譲
}
```

### 📂 ファイル別エラー処理方針
- **🚨 error-manager.js** - エラー処理専任・UI通知・ログ・記録
- **🎨 managers/\*.js** - 例外throw専門・直接通知禁止
- **🖊️ tools/\*.js** - 例外throw専門・上位委譲
- **⚙️ js/utils/\*.js** - 例外throw・console.errorやUI呼び出し禁止

## 📝 コメント規則（ブラックボックス撲滅）

### ✅ 必須コメント
```javascript
/**
 * 🎨 ClassName - 役割簡潔説明
 * 📋 RESPONSIBILITY: このクラスの責務
 * 🚫 PROHIBITION: やってはいけないこと
 * ✅ PERMISSION: やっても良いこと
 * 
 * 📏 DESIGN_PRINCIPLE: 設計思想
 * 🔄 INTEGRATION: 他クラスとの連携方法
 */
class MyClass {
    /**
     * メソッドの目的説明（何を・なぜ）
     * @param {type} param - パラメータ説明
     * @returns {type} - 戻り値説明
     * @throws {Error} - 例外説明
     */
    myMethod(param) {
        // 処理の意図を日本語で説明
        const result = complexOperation(param);
        
        // なぜこの判定が必要かを説明
        if (!result.isValid) {
            throw new Error('Validation failed: invalid result');
        }
        
        return result;
    }
}
```

### 🚫 不要なコメント（書くな）
```javascript
// ❌ 不要：コードを読めば分かる
let x = 10; // x に 10 を代入

// ❌ 不要：意味のない説明
function getData() {
    return this.data; // データを返す
}
```

## 🏗️ クラス設計原則（SOLID・DRY）

### 📋 責務分離（単一責任原則）
```javascript
// ✅ 正しい：単一責務
class CanvasManager {
    // PixiJS管理のみ
    setPixiApp(pixiApp) { /* PixiJS設定 */ }
    createLayer(id) { /* レイヤー作成 */ }
}

class PenTool {
    // 描画処理のみ  
    onPointerDown(x, y) { /* 描画開始 */ }
    onPointerMove(x, y) { /* 描画継続 */ }
}

// ❌ 間違い：多重責務
class SuperManager {
    // NG：PixiJS管理 + 描画処理 + UI管理 + エラー処理
    setPixiApp() { /* */ }
    drawLine() { /* */ }
    showDialog() { /* */ }
    handleError() { /* */ }
}
```

### 🔗 依存性注入（依存逆転原則）
```javascript
// ✅ 正しい：依存性注入
class ToolManager {
    setCanvasManager(canvasManager) {
        this.canvasManager = canvasManager; // 外部から注入
    }
}

// ❌ 間違い：内部依存
class ToolManager {
    constructor() {
        this.canvasManager = new CanvasManager(); // 内部で直接作成（結合度高）
    }
}
```

### 🔄 DRY原則（Don't Repeat Yourself）
```javascript
// ✅ 正しい：共通化
class ToolBase {
    validateCanvas() {
        if (!this.canvasManager) {
            throw new Error('CanvasManager not set');
        }
    }
}

class PenTool extends ToolBase {
    onPointerDown(x, y) {
        this.validateCanvas(); // 共通バリデーション
        // ペン固有の処理
    }
}

// ❌ 間違い：重複コード
class PenTool {
    onPointerDown(x, y) {
        if (!this.canvasManager) {
            throw new Error('CanvasManager not set'); // 重複
        }
    }
}
class EraserTool {
    onPointerDown(x, y) {
        if (!this.canvasManager) {
            throw new Error('CanvasManager not set'); // 重複
        }
    }
}
```

## 🎮 イベント処理パターン

### ✅ 推奨パターン（責務分離）
```javascript
// UI層：イベント受信・座標変換
handlePointerDown(e) {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Manager層に委譲
    this.toolManager.handlePointerDown(x, y, e);
}

// Manager層：ツール選択・イベント転送
handlePointerDown(x, y, event) {
    if (this.currentTool?.onPointerDown) {
        this.currentTool.onPointerDown(x, y, event);
    }
}

// Tool層：実際の処理
onPointerDown(x, y, event) {
    this.isDrawing = true;
    this.startNewPath(x, y);
}
```

### 🚫 禁止パターン（責務混在）
```javascript
### 🚫 禁止パターン（責務混在）
```javascript
// ❌ 禁止：全部やる怪物関数
handlePointerDown(e) {
    // 座標変換
    const x = e.clientX - rect.left;
    
    // ツール判定
    if (this.currentTool === 'pen') {
        // 描画処理
        this.graphics = new PIXI.Graphics();
        this.graphics.lineStyle(4, 0x800000);
        this.graphics.moveTo(x, y);
        
        // レイヤー管理
        const layer = this.getLayer('main');
        layer.addChild(this.graphics);
        
        // UI更新
        this.updateStatus('描画中...');
        
        // エラー処理
        try {
            this.saveToHistory();
        } catch (e) {
            alert('エラー：' + e.message);
        }
    }
}
```

## 🔄 モジュール間連携

### ✅ 正しい連携（疎結合）
```javascript
// 1. Manager作成
const canvasManager = new CanvasManager();
const toolManager = new ToolManager();

// 2. 依存関係設定
toolManager.setCanvasManager(canvasManager);

// 3. ツール作成時に自動設定
toolManager.createTools(); // 内部で各ツールにcanvasManager設定
```

### 🚫 間違い連携（密結合）
```javascript
// ❌ 禁止：直接参照
class PenTool {
    draw() {
        window.myGlobalCanvasManager.addGraphics(this.graphics); // グローバル参照
    }
}

// ❌ 禁止：循環依存
class CanvasManager {
    constructor() {
        this.toolManager = new ToolManager(this); // 循環参照
    }
}
```

## 🎯 PixiJS 活用方針（車輪の再発明禁止）

### ✅ PixiJS標準機能活用
```javascript
// ✅ 正しい：PixiJSの機能そのまま使用
const graphics = new PIXI.Graphics();
graphics.lineStyle({
    width: 4,
    color: 0x800000,
    alpha: 1.0,
    cap: PIXI.LINE_CAP.ROUND,
    join: PIXI.LINE_JOIN.ROUND
});
graphics.moveTo(x, y);
graphics.lineTo(x2, y2);

// ✅ 正しい：Container活用
const layer = new PIXI.Container();
layer.sortableChildren = true;
stage.addChild(layer);
```

### 🚫 車輪の再発明（禁止）
```javascript
// ❌ 禁止：PixiJSにある機能を自作
class MyGraphics {
    constructor() {
        this.points = [];
        this.styles = {};
    }
    
    drawLine(x1, y1, x2, y2) {
        // 独自実装（PixiJS.Graphics使えよ）
    }
}

// ❌ 禁止：座標変換自作
class CoordinateManager {
    screenToCanvas(screenX, screenY) {
        // 独自座標変換（PixiJSのinteractionManagerを使えよ）
    }
}
```

## 🧪 デバッグ・テスト方針

### 📊 デバッグ情報必須
```javascript
class MyManager {
    /**
     * デバッグ情報取得（必須実装）
     */
    getDebugInfo() {
        return {
            initialized: this.initialized,
            hasRequiredDeps: !!this.dependency,
            itemCount: this.items.size,
            currentState: this.state,
            lastError: this.lastError?.message || 'none'
        };
    }
}
```

### 🔍 実行時検証
```javascript
// 開発時は積極的にassert
console.assert(window.PIXI, 'PixiJS not loaded');
console.assert(window.Tegaki.ErrorManagerInstance, 'ErrorManager not available');

// デバッグログは積極的に
console.log('🎨 Manager created:', this.getDebugInfo());
```

## 🎮 Phase1 機能スコープ

### ✅ 実装済み（現在動作）
- PixiJS キャンバス作成・表示
- ベクターペン描画（直線・円描画）
- ツール切り替え（ペン・消しゴムボタン）
- ポインターイベント処理（マウス・タッチ）
- エラー表示システム（視覚通知）
- 基本UI（ふたば風デザイン・ステータス表示）

### ❌ Phase1対象外（Phase2以降）
- レイヤー管理（複数レイヤー）
- Undo/Redo（非破壊編集）
- アニメーション・GIF出力
- 高度なブラシ（筆圧・テクスチャ）
- ファイル保存・読み込み
- パフォーマンス最適化

## 📚 Phase1 シンボル辞典（実装済みのみ）

### 🌐 グローバル名前空間
```javascript
window.Tegaki = {
    // クラス定義
    TegakiApplication,          // app-core.js で定義
    AppCore,                    // main.js で定義  
    CanvasManager,              // canvas-manager.js で定義
    ToolManager,                // tool-manager.js で定義
    PenTool,                    // pen-tool.js で定義
    EraserTool,                 // eraser-tool.js で定義
    ErrorManager,               // error-manager.js で定義
    ConfigManager,              // config-manager.js で定義
    EventBus,                   // event-bus.js で定義
    
    // インスタンス（自動作成）
    ErrorManagerInstance,       // error-manager.js で作成
    ConfigManagerInstance,      // config-manager.js で作成
    EventBusInstance,          // event-bus.js で作成
    CanvasManagerInstance,     // main.js で作成
    ToolManagerInstance        // main.js で作成
};

// デバッグ用グローバル参照
window.TegakiAppInstance;      // bootstrap.js で作成
```

### 🎯 TegakiApplication（app-core.js）- 実装済みメソッド
```javascript
// 初期化
constructor()                           // インスタンス化・自動初期化
async initialize()                      // 基本初期化実行
async initializeAppCore()              // AppCore作成・初期化
createCanvas()                         // PixiJS Application作成・DOM配置
setupUI()                             // UIイベント設定

// イベント処理  
setupCanvasEvents()                    // キャンバスイベント設定
setupToolButtons()                     // ツールボタンイベント
selectTool(toolName: string)           // ツール選択
updateToolButtons(activeToolName)      // ツールボタンUI更新
updateStatusDisplay()                  // ステータス表示更新

// ポインターイベント
handlePointerDown(e: PointerEvent)     // ポインター押下
handlePointerMove(e: PointerEvent)     // ポインター移動  
handlePointerUp(e: PointerEvent)       // ポインター解放

// ユーティリティ
showSuccessMessage()                   // 起動完了通知
```

### 🖊️ AppCore（main.js）- 実装済みメソッド
```javascript
// 初期化
constructor()                          // インスタンス作成
async initialize()                     // Manager作成・連携設定

// Manager管理
setPixiApp(pixiApp: PIXI.Application) // CanvasManagerにPixiApp設定
getCanvasManager()                     // CanvasManager取得
getToolManager()                       // ToolManager取得

// 状態確認
isReady(): boolean                     // 初期化完了確認
performBasicChecks()                   // 基本機能確認

// ライフサイクル
start()                               // アプリケーション開始
destroy()                             // クリーンアップ
getDebugInfo()                        // デバッグ情報取得
```

### 🎨 CanvasManager（managers/canvas-manager.js）- 実装済みメソッド  
```javascript
// PixiJS管理
setPixiApp(pixiApp: PIXI.Application) // PixiJS Application設定
getPixiApp(): PIXI.Application        // PixiJS Application取得

// レイヤー管理
createLayer(layerId: string): PIXI.Container    // レイヤー作成
getLayer(layerId: string): PIXI.Container       // レイヤー取得  
getMainLayer(): PIXI.Container                  // メインレイヤー取得
addGraphicsToLayer(graphics, layerId)           // Graphics配置

// キャンバス操作
clear()                               // 全レイヤークリア
clearLayer(layerId: string)           // 特定レイヤークリア
resizeCanvas(width: number, height: number)     // サイズ変更

// ユーティリティ
isReady(): boolean                    // 準備状態確認
getDebugInfo()                        // デバッグ情報
```

### 🖊️ ToolManager（managers/tool-manager.js）- 実装済みメソッド
```javascript
// Manager連携
setCanvasManager(canvasManager)        // CanvasManager設定

// ツール管理
createTools()                          // ツール作成（内部）
selectTool(toolName: string)           // ツール選択
getCurrentTool(): Tool                 // 現在ツール取得
getCurrentToolName(): string           // 現在ツール名取得

// イベント転送
handlePointerDown(x: number, y: number, event) // ポインター押下転送
handlePointerMove(x: number, y: number, event) // ポインター移動転送  
handlePointerUp(x: number, y: number, event)   // ポインター解放転送
```

### ✏️ PenTool（tools/pen-tool.js）- 実装済みメソッド
```javascript
// Manager連携
setCanvasManager(canvasManager)        // CanvasManager設定

// 描画イベント（実装済み）
onPointerDown(x: number, y: number, event) // 描画開始
onPointerMove(x: number, y: number, event) // 描画継続
onPointerUp(x: number, y: number, event)   // 描画終了

// 設定変更
setPenColor(color: string|number)      // 色変更
setPenWidth(width: number)             // 線幅変更  
setPenOpacity(opacity: number)         // 不透明度変更

// ユーティリティ
getSettings()                          // 現在設定取得
getDebugInfo()                         // デバッグ情報
```

### 🧹 EraserTool（tools/eraser-tool.js）- 定義のみ・未実装
```javascript
// Manager連携
setCanvasManager(canvasManager)        // CanvasManager設定

// 消去イベント（未実装）
onPointerDown(x: number, y: number, event) // 消去開始
onPointerMove(x: number, y: number, event) // 消去継続  
onPointerUp(x: number, y: number, event)   // 消去終了
```

### 🚨 ErrorManager（js/utils/error-manager.js）- 実装済みメソッド
```javascript
// エラー表示（専任責務）
showError(type: string, message: string, options?) // エラー表示
showVisualNotification(type, message, options)     // 視覚通知

// ショートカット
showInfo(message: string, options?)    // 情報表示
showWarning(message: string, options?) // 警告表示
showCritical(message: string, options?) // 重要エラー表示

// ユーティリティ
getErrors(): Array                     // エラー記録取得
clear()                               // エラー記録クリア
```

### 🚫 Phase1 対象外（定義禁止・架空メソッド）
```javascript
// ❌ 未実装・Phase2以降（呼び出し禁止）
LayerManager, LayerObject, LayerPanel           // レイヤー管理
RecordManager, UndoRedoSystem, HistoryManager   // 非破壊編集
AnimationSequence, FrameManager, GIFExporter    // アニメーション
BrushTool, TextureTool, VectorPath              // 高度描画
```

## 📋 Phase1 成功指標・チェックリスト

### 🎯 機能成功指標
- [x] 基本描画成功（ペンで線が引ける）
- [x] エラー透明性（エラー発生時に詳細表示）
- [x] コード可読性（ファイル見て役割理解可能）
- [x] 拡張準備（Phase2追加の基盤完成）
- [x] AI改修対応（構造明確で千日手化しない）

### 💀 怪物コード撲滅チェックリスト
- [ ] try/catchで握りつぶしていない
- [ ] フォールバック・フェイルセーフを使っていない
- [ ] 架空メソッドを呼び出していない
- [ ] 1ファイル1責務を守っている
- [ ] 全処理に日本語コメントがある
- [ ] ErrorManager以外でUI通知していない
- [ ] window.Tegaki名前空間を使っている
- [ ] PixiJSの標準機能を活用している

### 🔧 コーディング品質チェック
- [ ] SOLID原則遵守（単一責任・開放閉鎖・リスコフ置換・インターフェース分離・依存逆転）
- [ ] DRY原則遵守（重複コード排除・共通化）
- [ ] モダンES2023構文活用
- [ ] 適切な依存性注入
- [ ] デバッグ情報実装（getDebugInfo必須）

## 🚀 Phase1.5-2-3 発展計画（概要）

### ⚡ Phase1.5（根幹システム・必須基盤）
- **キャンバス移動**: パン・ズーム・回転
- **非破壊編集**: Undo/Redo・操作履歴
- **ショートカット**: キーボード操作基盤

### 📦 Phase2（レイヤー機能）  
- **レイヤー管理**: 複数レイヤー・レイヤーパネルUI
- **レイヤー変形**: 移動・回転・拡縮・反転
- **範囲選択**: 選択ツール・部分移動

### 🎬 Phase3（最終完成）
- **アニメーション**: フレーム管理・再生
- **GIF出力**: エクスポート・最適化
- **最終UI**: GSAP/Tweedleアニメーション

---

📝 **更新方針**: Phase1.5実装時に本ルールブックに基盤システム追加
🎯 **検証方法**: コード改修後にチェックリストで確認
💀 **基本原則**: エラーを隠すな・構造を透けさせろ・素人が読める構造にしろ
🚀 **発展戦略**: 実装主導・文書後追い・段階的複雑化で確実な成長