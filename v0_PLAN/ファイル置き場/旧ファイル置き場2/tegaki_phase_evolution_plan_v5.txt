## 🎯 基本方針：怪物コード撲滅宣言

### 💀 絶対禁止事項（重大違反）
1. **try/catch での握りつぶし禁止** - 必ず `throw` か `console.error` + 詳細ログ
2. **フォールバック・フェイルセーフ禁止** - 正しい構造でのみ動作させる
3. **架空メソッド呼び出し禁止** - 実装されていないメソッドを呼ぶな
4. **二重責務禁止** - 1ファイル＝1責務、似た処理のコピペ禁止
5. **ブラックボックス化禁止** - 全処理に日本語コメント必須

### ✅ 必須遵守事項
1. **エラーは ErrorManager 経由のみ** - 他ファイルでの直接通知禁止
2. **名前空間統一** - 全て `window.Tegaki.*` に公開
3. **初期化順序厳守** - HTML読み込み順序通りの依存関係
4. **構文完整性確保** - ES2023準拠、後方互換考慮なし
5. **車輪の再発明禁止** - PixiJS標準機能を最大活用
6. **明確な責任分界化** - DRY・SOLID原則を遵守

## 🏗️ 技術スタック・開発環境

### ✅ 使用技術（固定）
- **PixiJS v7** - 描画・キャンバス基盤（CDN読み込み）
- **JavaScript ES2023** - モダン構文積極利用
- **fetch API** - HTTP通信（必要時）
- **HTML直開き** - ローカルファイル直接実行可能

### 🚫 禁止技術
- **Vite / TypeScript / ESM** - HTML直開きで動くことが必須
- **webpack / Babel** - ビルドプロセス禁止
- **jQuery** - モダン構文で代替
- **後方互換** - 古いブラウザ考慮なし


# 🚀 Tegaki Phase段階進化計画 - Phase1.5エラー修正完了版 v5

> **Phase1.5修正完了** - 構文エラー解決・Manager基盤整備・サイドバー・ペン描画復旧済み
> **実装主導原則** - 動作するコードが正解、文書は実装に追従

## 📋 Rulebook - Phase1.5エラー修正完了版

### 🎯 基本開発指針
- **「今決めない勇気」原則**: 必要時に定義・早期複雑化回避
- **実装主導**: 動作コード優先・文書後追い
- **段階的複雑化**: 車輪の再発明防止
- **AI開発最適化**: Claude管理に最適化された構造
- **🆕 構文エラー撲滅**: 構文ミス・未定義メソッドの完全排除

### 📚 品質基準
- **動作する**: 全機能がスムーズに動作（✅修正完了）
- **理解できる**: AI Claudeが各ファイル役割を即座理解
- **拡張できる**: 次Phase実装時の確実な基盤
- **保守できる**: バグ修正・機能改善が容易
- **🆕 エラーフリー**: コンソールエラー・実行時エラーの完全排除

### 🏗️ 構造ガイドライン
- **単一責任原則**: 各クラス・ファイルが明確な責任
- **剛直構造**: 予測可能な動作・修正容易な設計
- **統一API**: 一貫した命名・使用方法
- **レイヤー分離**: UI・Logic・Data の明確分離
- **🆕 構文正確性**: クラス定義・メソッド配置の厳格化

### 🔧 ファイル配置統一規則（AI管理最適化）

#### 📁 `js/utils/` - 汎用Utilityクラス
```
座標変換・ナビゲーション・記録・ショートカット等
汎用的で複数システムから利用される基盤機能
```
- `coordinate-manager.js` - 座標変換・キャンバス外描画対応
- `navigation-manager.js` - パン・ズーム・キャンバス変形（✅修正完了）
- `record-manager.js` - Undo/Redo・操作履歴・非破壊編集
- `shortcut-manager.js` - キーボードショートカット・入力処理（✅修正完了）

#### 📁 `managers/` - ドメイン特化Manager
```
特定ドメインに特化した管理システム
Canvas・Tool・Layer等の専門管理
```
- `canvas-manager.js` - レイヤー・キャンバス専門管理
- `tool-manager.js` - ツール切り替え・管理専門

#### 📁 `tools/` - 描画ツール群
```
AbstractTool継承・非破壊編集対応・RecordManager統合
```
- `abstract-tool.js` - ツール基底クラス・共通処理集約
- `pen-tool.js` - ペンツール実装（✅修正完了）
- `eraser-tool.js` - 消しゴムツール実装

### 💀 怪物コード撲滅継続
1. **座標変換複雑化禁止** - CoordinateManagerに集約
2. **状態散在禁止** - 各Managerに責任集約
3. **早期機能実装禁止** - Phase完了まで厳禁
4. **重複処理禁止** - 共通処理の統一化
5. **🆕 構文エラー撲滅** - クラス定義・メソッド配置の厳格化（✅完了）

## 🔧 Phase1.5エラー修正完了事項

### ✅ 緊急修正完了
1. **shortcut-manager.js構文エラー解決** - クラス外メソッド配置修正完了
2. **navigation-manager.js setCanvasElement追加** - 未定義メソッド実装完了
3. **pen-tool.js操作記録対応** - RecordManager連携修正完了
4. **app-core.js統合問題解決** - Manager初期化順序修正完了

### ✅ 動作確認完了（修正後）
5. **サイドバーアイコン表示復旧** - 正常表示確認済み
6. **キャンバス表示復旧** - 描画エリア正常表示確認済み
7. **ペン描画機能復旧** - 線描画・円描画・色設定動作確認済み
8. **消しゴム機能動作確認** - ERASE描画・サイズ変更動作確認済み

### 🎯 修正後の技術的改善
- ✅ **コンソールエラー完全解消**: 全構文エラー・未定義参照解決
- ✅ **Manager連携正常化**: 初期化順序・依存関係修正完了
- ✅ **UI統合動作確認**: ツール選択・描画機能・アイコン表示正常
- ✅ **Phase1.5基盤強化**: スタブ実装による段階的拡張基盤完成

## 📦 Phase1.5-Navigation（修正完了版・詳細実装準備）

### 🎯 Phase1.5の重要性（再確認）
Phase1.5は**単なる機能追加ではなく、根幹システムの確立**です：

- **座標系の完成**: キャンバス外描画対応・変形基盤・精密座標管理
- **非破壊編集の基盤**: Undo/Redo・操作履歴・状態管理システム
- **拡張性の保証**: Phase2以降の全機能がこの基盤に依存
- **ユーザビリティの向上**: 基本操作（パン・ズーム・Undo）は現代的お絵描きアプリの必須機能

### 📋 現在の実装状況（修正完了版）

#### ✅ 完了済み基盤システム
```javascript
// Phase1完成・動作確認済み
ConfigManager: "完成・インスタンス作成済み",
ErrorManager: "完成・エラー処理統一済み", 
EventBus: "完成・イベント通信統一済み",
CoordinateManager: "Phase1.5完成・app-core.js統合済み・キャンバス外描画対応済み",

// Canvas・Tool管理
CanvasManager: "完成・レイヤー管理・PixiJS統合済み",
ToolManager: "完成・ツール切り替え・イベント配信済み",

// ツール実装
PenTool: "Phase1完成・Phase1.5準備機能実装済み・修正完了",
EraserTool: "Phase1完成・動作確認済み",

// UI・リソース
TegakiIcons: "完成・アイコン管理・動的生成済み",
```

#### ✅ Phase1.5修正完了（構文・機能修正済み）
```javascript
// Phase1.5新Manager（修正完了・詳細実装準備完了）
NavigationManager: "修正完了・setCanvasElement実装済み・CoordinateManager連携準備完了",
RecordManager: "スタブ実装・基本Undo/Redo・操作記録基盤済み",
ShortcutManager: "修正完了・構文エラー解決・EventBus連携準備完了",

// ツール基盤
AbstractTool: "スタブ実装・全ツール継承基盤・操作記録準備済み",
PenTool: "修正完了・操作記録対応・RecordManager連携準備済み",

// 統合基盤
TegakiApplication: "修正完了・Manager初期化順序修正・Phase1.5統合準備完了",
```

### 🚀 Phase1.5 段階的詳細実装計画（修正完了基盤）

#### Step1: RecordManager詳細実装（最優先・1-2週間）
```
🎯 目標: 確実なUndo/Redo・非破壊編集実現

現在状況: ✅ スタブ実装完了・基本構造定義済み・ツール連携準備済み
実装作業: 
├── 操作記録システムの詳細実装・操作ID管理・履歴スタック
├── Undo/Redo機能の完全実装・状態復元・Graphics再生成
├── 操作グループ・状態スナップショット・メモリ効率最適化
├── AbstractTool・全ツール完全連携・操作開始/終了フック
└── UI統合・Undo/Redoボタン・履歴表示・状態フィードバック

実装ファイル:
├── js/utils/record-manager.js         # 🔧詳細実装：スタブ→完全版
├── tools/abstract-tool.js             # 🔧拡張：RecordManager完全連携
├── tools/pen-tool.js                  # ✅修正完了：Undo/Redo連携済み
├── tools/eraser-tool.js               # 🔧修正：Undo/Redo完全対応
└── js/app-core.js                     # 🔧軽微修正：Undo/Redoボタン連携強化
```

#### Step2: NavigationManager詳細実装（高優先・1週間）
```
🎯 目標: パン・ズーム・キーボード操作・キャンバス変形実現

現在状況: ✅ 修正完了・setCanvasElement実装済み・CoordinateManager連携準備済み
実装作業: 
├── パン操作の詳細実装（マウスドラッグ・中ボタン・Space+ドラッグ・キーボード）
├── ズーム操作の詳細実装（ホイール・ピンチジェスチャー・キーボード）
├── キャンバス変形状態管理・保存・復元・リセット機能
├── CoordinateManager完全連携・座標変換統合・変形同期
└── 操作フィードバック・UI状態表示・ナビゲーションガイド

実装ファイル:
├── js/utils/navigation-manager.js     # ✅修正完了→🔧詳細実装：機能拡張
├── js/utils/coordinate-manager.js     # 🔧軽微修正：NavigationManager連携強化
├── js/app-core.js                     # 🔧拡張：ナビゲーション操作統合・UI連携
└── UI関連ファイル                      # 🔧軽微修正：ズーム表示・パン状態表示
```

#### Step3: ShortcutManager詳細実装（中優先・1週間）
```
🎯 目標: キーボードショートカット・効率化・アクセシビリティ実現

現在状況: ✅ 修正完了・構文エラー解決・EventBus連携準備済み
実装作業: 
├── キーボードイベント処理の詳細実装・キーコンビネーション判定
├── Phase別ショートカット管理（Phase1/1.5/2/3）・動的切り替え
├── コンテキスト管理・ツール別ショートカット・状況依存動作
├── 全Manager・ツール連携・アクション実行・イベント配信
└── ブラウザ競合回避・preventDefault管理・アクセシビリティ対応

実装ファイル:
├── js/utils/shortcut-manager.js       # ✅修正完了→🔧詳細実装：機能拡張
├── js/app-core.js                     # 🔧拡張：ショートカット統合・キー処理
├── 全Managerファイル                   # 🔧軽微修正：ショートカットアクション対応
└── UI関連ファイル                      # 🔧軽微修正：ショートカット表示・ヘルプ
```

#### Step4: 統合・最適化・Phase2準備（低優先・1-2週間）
```
🎯 目標: 全機能統合・パフォーマンス最適化・Phase2基盤準備

実装作業: 
├── 全Manager統合テスト・相互動作確認・エッジケース処理
├── パフォーマンス最適化・メモリ効率化・60FPS描画保証
├── UI統合・操作性向上・状態表示統合・ユーザビリティ改善
├── Phase2基盤準備・LayerManager設計・API拡張・互換性確保
└── ドキュメント更新・実装ガイド・API仕様・Phase2詳細計画

実装ファイル:
├── debug/phase15-integration-test.js  # 🔧詳細実装：完全統合テスト
├── 全ファイル品質向上                  # 🔧最適化：パフォーマンス・安定性
├── ドキュメント更新                    # 📝更新：実装状況・API定義・使用方法
└── Phase2設計書作成                    # 📝新規：Phase2詳細計画・基盤活用方法
```

## ⌨️ ショートカットキー仕様（修正版・段階的実装）

### 🎯 Phase1.5: 基本操作（現在実装対象・修正完了基盤）
```javascript
// 修正完了基盤での確実な基本操作実装
基本編集:
- Ctrl+Z: アンドゥ（RecordManager詳細実装で完成予定）
- Ctrl+Y: リドゥ（RecordManager詳細実装で完成予定）

ツール切り替え:
- P: ペンツール選択（ShortcutManager詳細実装で完成予定）
- E: 消しゴムツール選択（ShortcutManager詳細実装で完成予定）

キャンバス操作:
- Space+ドラッグ: パンモード（NavigationManager詳細実装で完成予定）
- マウスホイール: ズーム（NavigationManager詳細実装で完成予定）
- Ctrl+0: ビューリセット（NavigationManager詳細実装で完成予定）
```

### ⚡ Phase1.5: ナビゲーション強化（詳細実装段階）
```javascript
// NavigationManager・ShortcutManager詳細実装で段階的に完成
拡張キャンバス操作:
- Space+方向キー: キーボードでキャンバス移動
- 中ボタン+ドラッグ: 中ボタンパン
- Ctrl+プラス/マイナス: キーボードズーム

ツール効率化:
- [: ブラシサイズ縮小（ToolManager・UI連携）
- ]: ブラシサイズ拡大（ToolManager・UI連携）
- Tab: ツールパネル表示切り替え

システム操作:
- F1: ショートカットヘルプ表示
- Esc: 現在操作キャンセル・デフォルト状態復帰
```

## 🔄 Phase間依存関係（修正完了基盤強化）

```
Phase1 → Phase1.5（修正完了・詳細実装準備）→ Phase2 → Phase3
   ↓         ↓                             ↓        ↓
基本描画 → 座標系・非破壊基盤強化 → レイヤー機能 → アニメーション
   ↓         ↓                             ↓        ↓
ツール → キャンバス外描画・ナビ → 範囲選択・変形 → GIF出力
   ↓         ↓                             ↓        ↓
   UI  → ショートカット・操作効率化 → 高度UI → 最終UI
   ↓         ↓                             ↓        ↓
座標精度 → Undo/Redo・履歴管理 → レイヤー操作履歴 → 最適化
   ↓         ↓                             ↓        ↓
 ✅完成  → ✅修正完了・🔧詳細実装中 → Phase1.5基盤活用 → 全基盤統合
```

### ⚠️ Phase1.5の決定的重要性（修正完了版）

**Phase1.5修正完了による利点:**
- **基盤安定性確保**: 構文エラー・未定義メソッド完全解決による開発基盤安定化
- **段階的拡張準備**: スタブ実装→詳細実装の確実なロードマップ実行可能
- **Phase2レイヤー機能**: CoordinateManager・NavigationManagerによる変形基盤確実活用
- **Phase3アニメーション**: RecordManager・ShortcutManagerによる操作効率化確実活用

**Phase1.5飛ばしのリスク解消:**
- ✅ **エラー解決**: 構文エラー・実行時エラーによる開発停止リスク解消完了
- ✅ **基盤確立**: Manager基盤整備による機能追加基盤確保完了
- 🔧 **段階的実装**: 詳細実装による確実な品質向上・リスク最小化進行中

## 📅 開発ロードマップ（修正完了版・詳細実装加速）

### ✅ Phase1.5修正完了（現在→詳細実装準備完了）
```
✅ Step1: 緊急エラー修正完了 
├── ✅ shortcut-manager.js構文エラー解決完了
├── ✅ navigation-manager.js setCanvasElement実装完了
├── ✅ pen-tool.js操作記録対応修正完了
└── ✅ サイドバー・キャンバス・ペン描画復旧確認完了

✅ Step2: 動作確認・基盤強化完了
├── ✅ 全Manager初期化順序修正・連携正常化完了
├── ✅ UI統合動作確認・ツール選択・描画機能正常
├── ✅ コンソールエラー完全解消・実行時エラー解決
└── ✅ Phase1.5詳細実装準備・スタブ基盤強化完了

🎯 Step3: 詳細実装準備・優先順位確定完了
├── ✅ RecordManager最優先・Undo/Redo基盤確立方針確定
├── ✅ NavigationManager高優先・パン/ズーム実装方針確定
├── ✅ ShortcutManager中優先・効率化実装方針確定
└── ✅ 段階的実装プロセス・週単位スケジュール確定
```

### ⚡ Phase1.5詳細実装（修正完了基盤・加速実装・3-4週間）
```
🔧 週1: RecordManager詳細実装（最優先・修正完了基盤活用）
├── Undo/Redo機能完全実装・操作履歴システム・ID管理
├── AbstractTool・全ツール完全連携・操作記録フック統合
├── 状態スナップショット・Graphics再生成・メモリ効率化
└── UI統合・Undo/Redoボタン・履歴表示・操作フィードバック

🔧 週2: NavigationManager詳細実装（修正完了基盤・機能拡張）
├── パン・ズーム詳細実装・マウス・キーボード・ジェスチャー対応
├── キャンバス変形管理・状態保存復元・CoordinateManager完全連携
├── 操作フィードバック・UI状態表示・ナビゲーション統合
└── パフォーマンス最適化・60FPS保証・スムーズ変形実現

🔧 週3: ShortcutManager詳細実装（修正完了基盤・機能拡張）
├── キーボードイベント詳細処理・Phase別管理・コンテキスト切り替え
├── 全Manager・ツール連携・アクション配信・EventBus統合強化
├── ブラウザ競合回避・アクセシビリティ・ショートカットヘルプ
└── UI統合・キー表示・操作ガイド・効率化支援

🔧 週4: 統合・最適化・Phase2準備（全基盤統合・次段階準備）
├── 全Manager統合テスト・相互動作確認・エッジケース処理
├── パフォーマンス最適化・メモリ管理・安定性向上
├── Phase2基盤設計・LayerManager準備・API拡張計画
└── ドキュメント更新・実装ガイド・Phase2詳細計画作成
```

### 📦 Phase2実装（4-6週間想定・Phase1.5修正完了基盤フル活用）
```
週1-2: LayerManager基本機能（Phase1.5修正完了基盤活用）
├── LayerManager実装・RecordManager連携・非破壊レイヤー操作
├── 複数レイヤー作成・削除・管理・CoordinateManager座標統合
├── レイヤーパネルUI・ドラッグ順序変更・ShortcutManager連携
└── Undo/Redo完全対応・レイヤー操作履歴・状態管理統合

週3-4: レイヤー変形機能（NavigationManager・CoordinateManager活用）
├── TransformTool実装・NavigationManager変形基盤完全活用
├── レイヤー移動・回転・拡縮・反転・CoordinateManager座標変換統合
├── Phase1.5座標系完全連携・キャンバス外変形・履歴管理
└── リアルタイム変形プレビュー・UI統合・操作フィードバック

週5-6: 範囲選択・Phase3準備
├── SelectTool実装・CoordinateManager・RecordManager統合活用
├── 矩形・自由選択・選択範囲変形・ShortcutManager効率化活用
├── クリップボード連携・Phase1.5基盤統合・非破壊編集完全対応
└── Phase3アニメーション基盤設計・全Manager統合活用計画
```

## 📋 各Phase成功指標（修正完了版・Phase1.5強化）

### ✅ Phase1完了指標（達成済み・修正強化済み）
- [x] 基本描画成功（ペンで線が引ける）✅
- [x] 座標精度（ズレ問題解決済み）✅
- [x] 消しゴム動作（ERASEブレンドモード）✅
- [x] エラーフリー（✅修正完了・構文エラー解決済み）
- [x] ファイル配置統一（✅修正完了・責任分界明確化済み）
- [x] UI正常動作（✅修正完了・サイドバー・描画復旧済み）

### 🎯 Phase1.5完了指標（修正完了版・詳細実装目標）
- [x] **Phase1.5修正完了**: 構文エラー解決・Manager基盤整備・動作復旧（✅完了）
- [ ] **RecordManager完全実装**: Undo/Redo・操作履歴・非破壊編集（🔧最優先実装）
- [ ] **NavigationManager完全実装**: パン・ズーム・キーボード操作（🔧高優先実装）
- [ ] **ShortcutManager完全実装**: ショートカット・効率化・UI連携（🔧中優先実装）
- [x] **CoordinateManager最適化**: キャンバス外描画・座標統一（✅完了・品質向上継続）
- [ ] **統合テスト・品質確認**: 全機能統合・パフォーマンス・安定性（🔧最終実装）
- [ ] **Phase2基盤準備**: API拡張・設計完成・移行準備（🔧最終実装）

### 📦 Phase2完了指標（Phase1.5修正完了基盤前提）
- [ ] **レイヤー管理**: 作成・削除・順序変更・表示制御（Phase1.5基盤活用）
- [ ] **レイヤー変形**: 移動・回転・拡縮・反転（NavigationManager・CoordinateManager活用）
- [ ] **範囲選択**: 矩形・自由選択・選択範囲変形（CoordinateManager・RecordManager活用）
- [ ] **UI統合**: レイヤーパネル・変形ツール・選択ツール（ShortcutManager活用）

### 🎬 Phase3完了指標（全基盤統合）
- [ ] **アニメーション**: フレーム管理・再生・プレビュー（全Manager統合活用）
- [ ] **GIF出力**: 高品質アニメーションGIF生成（RecordManager・CoordinateManager活用）
- [ ] **最終UI**: 全機能統合・プロレベルUI（ShortcutManager・NavigationManager活用）
- [ ] **最適化**: 60FPS滑らか動作・メモリ効率化（全基盤最適化）

## 🚨 Phase1.5 Critical Decision Points（修正完了版）

### ✅ 構文エラー・未定義メソッド問題（解決済み）

**修正完了事項:**
- **shortcut-manager