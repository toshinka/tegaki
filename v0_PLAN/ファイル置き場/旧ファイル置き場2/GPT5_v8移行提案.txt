========================
Tegaki お絵描きツール 修正計画案（PixiJS v8前提）
========================

■ 現状問題点
------------------------
1. ペンツール描画
  - 問題: キャンバスからペンを離すまで線が描かれない
  - 原因: Graphics の path 更新が「最後の描画時点」にしか反映されていない
  - 影響: レスポンスが悪く、描き心地が損なわれる

2. ペン描画の記録
  - 問題: 描画を非破壊で保持する仕組みが複雑で、アンドゥやレイヤー移動に弱い
  - 影響: 後から編集・再描画がしにくい

3. レイヤー実装
  - 問題: v7 + @pixi/layers での管理は可能だが、Container階層やGraphics更新が複雑
  - 影響: AIによるコーディングが煩雑、描画順や非破壊管理の明示化が困難

------------------------
■ 修正方針（PixiJS v8）
------------------------
1. ペン描画リアルタイム化
  - Graphics.path.add() によるストロークをマウスmoveやタッチmoveごとに即更新
  - RenderTexture に逐次書き込み、描画と同時に非破壊的に記録
  - WebGPU活用によりGPUレンダリングでレスポンス向上
  - 描き途中パスは一時 Container で保持

2. レイヤー管理（Phase 2）
  - v8の Container/DisplayObject 階層で各レイヤーを独立管理
  - パスや描画更新も Container単位で処理
  - AIに「レイヤー単位での描画更新」を簡単に指示可能

3. AIコーディング指示の容易性
  - v8の整理された API により「ペンmove → パス追加 → Container更新 → RenderTexture更新」の流れを明確に指示可能
  - v7の依存ライブラリや描画順制御の煩雑さがなく、生成コードがシンプル

------------------------
■ v7 vs v8 比較（得点：5点満点）
------------------------
| 項目                        | v7                     | v8                     |
|------------------------------|-----------------------|-----------------------|
| ペンリアルタイム描画        | ⭐⭐（離すまで反映）   | ⭐⭐⭐⭐（moveごと即描画） |
| ペン描画の非破壊保持        | ⭐⭐                    | ⭐⭐⭐⭐（RenderTexture + Container管理） |
| レイヤー管理の明快さ        | ⭐⭐（@pixi/layers依存） | ⭐⭐⭐⭐（Container階層ネイティブ） |
| AIによるコーディング容易さ  | ⭐⭐                    | ⭐⭐⭐⭐                  |
| WebGPU対応・高速描画        | ⭐                     | ⭐⭐⭐⭐                  |
| GIFアニメ生成対応            | ⭐⭐                    | ⭐⭐⭐（RenderTexture活用可） |
| アンドゥ/編集対応           | ⭐⭐                    | ⭐⭐⭐⭐                  |
| 総合点                      | 7/35                  | 27/35                 |

------------------------
■ 推奨ステップ
------------------------
1. v8化・短期改善
  - ペン描画を move ごとに Graphics.path に追加、即描画
  - 描き途中パスを一時 Container に保持
  - RenderTexture に随時書き出し、非破壊的に記録

2. 中期進化
  - Phase2レイヤー実装
  - 描画パスの非破壊管理と Container階層化
  - GIFアニメ生成との統合

3. 長期
  - WebGPU / Pathfinder 等による高速化・アニメ変形対応
  - 物理演算統合・複雑レイヤー管理

------------------------
■ コメント
------------------------
- v8化はペン描画問題の直接解決と、レイヤー実装・非破壊管理の容易化に大きく寄与
- AI指示でのコーディングも v8なら整理されたAPIを利用して明快に生成可能
- v7では描画遅延や外部依存のため、AI生成コードの安定性や拡張性に制限がある

========================
