📑 ヘッダーフォーマット提案
/**
 * 📄 FILE: pen-tool.js
 * 📌 RESPONSIBILITY: ベクター描画処理のみ（ペンツール）
 *
 * @provides
 *   - drawLine(x1, y1, x2, y2)
 *   - setStrokeStyle(style)
 *
 * @uses
 *   - CanvasManager.registerTool()
 *   - InputHandler.getPointerPosition()
 *
 * @initflow
 *   1. init() → 2. listenEvents() → 3. draw() → 4. cleanup()
 *
 * @forbids
 *   - 双方向依存 (💀)
 *   - フォールバック禁止
 *   - フェイルセーフ禁止
 *   - v7/v8 両対応による二重管理禁止
 *
 * @manager-key
 *   window.Tegaki.ToolRegistry.PenTool
 */

🔎 各タグの意味

@provides
→ そのファイルで外部に公開しているメソッド（一次情報）。

@uses
→ 他ファイルから呼び出すメソッド。依存関係が一目でわかる。

@initflow
→ 初期化から終了までの順序。AIにとって「どこから処理を開始すべきか」の手掛かりになる。

@forbids
→ 禁止事項。明示することでAIが「やってはいけないこと」を避けやすい。

@manager-key
→ Managerに登録するキー。グローバル登録の一貫性を担保。

🛠 運用ポイント

必ずヘッダーに記述 → 一次情報はここ。

シンボル辞典は自動生成 → 後からスクリプトやAIに「全ファイルの @provides, @uses, @manager-key を走査して一覧化」させる。

タグ名は固定英語、説明は日本語OK → 英語タグは機械集約向け、日本語説明は人間向け。

📊 シンボル辞典の自動生成イメージ

（ヘッダーから集約）

=== SYMBOL DICTIONARY (AUTO-GENERATED) ===

[pen-tool.js]
  @provides: drawLine, setStrokeStyle
  @uses: CanvasManager.registerTool, InputHandler.getPointerPosition
  @manager-key: window.Tegaki.ToolRegistry.PenTool

[canvas-manager.js]
  @provides: registerTool, initCanvas, clearCanvas
  @uses: none
  @manager-key: window.Tegaki.CanvasManagerInstance


✅ これなら ヘッダーを「正」として、辞典は派生ドキュメントにできますし、更新遅延問題も回避できます。