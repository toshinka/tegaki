# 🚀 Tegaki Phase段階進化計画 - Phase1.5統合版

> **段階的書き直し戦略** - 実装が先、文書が後の順序厳守
> **Phase1.5重点:** キャンバス外描画対応・ペンツール戦略統合・剛直構造維持

## 📋 Phase管理方針

### 🎯 「今決めない勇気」の原則
- **必要になったら定義** - 時期尚早な複雄化を避ける
- **実装主導** - 動作するコードが正解、文書は後から合わせる
- **段階的複雑化** - 車輪の再発明防止
- **AI開発最適化** - 混乱しない文書構造

### 📚 文書更新戦略
```
Phase1: 現在特化版（今すぐ作成）✅完了
├── ルールブック v1.2-Current ✅
├── シンボル辞典 v1.2-Current ✅ 
└── コーディングルール v1-剛直版（ルールブックに吸収合併済み）✅

Phase1.5: ナビゲーション・非破壊基盤版（現在計画中）
├── ルールブック v1.5-Navigation（座標系・キャンバス外描画対応）
├── シンボル辞典 v1.5-Navigation（座標系・ナビゲーション追加）
└── 進化計画 v1.5-Navigation（本文書）

Phase2: レイヤー拡張版（レイヤー実装時）
├── ルールブック v2-Layer（v1.5に追記）
├── シンボル辞典 v2-Layer（レイヤーメソッド追加）
└── コーディングルール v2-Layer（レイヤー管理追加）

Phase3: GIF対応版（最終段階）  
├── ルールブック v3-Complete（全機能統合）
├── シンボル辞典 v3-Complete（全メソッド完備）
└── コーディングルール v3-Complete（最終規約）
```

## 🏗️ Phase1-Current（現在）✅完了

### ✅ 実装済み機能
- **PixiJS基盤**: キャンバス作成・表示・イベント処理
- **座標システム**: 座標ズレ問題完全解決済み ✅
- **ベクターペン**: 基本線描画（直線・円・スムーズ曲線）✅
- **消しゴムツール**: ERASEブレンドモード実装済み ✅
- **ツール切り替え**: ペン・消しゴムボタン完全動作 ✅
- **エラーシステム**: ErrorManager による一元化 ✅
- **UI基盤**: ふたば風デザイン・ステータス表示・アイコンシステム ✅

### 📋 Phase1 成功指標
- [x] 基本描画成功（ペンで線が引ける）
- [x] 座標精度（ズレ問題解決済み）
- [x] 消しゴム動作（ERASEブレンドモード）
- [x] エラー透明性（エラー発生時に詳細表示）
- [x] コード可読性（ファイル見て役割理解可能）
- [x] 拡張準備（Phase1.5追加の基盤完成）
- [x] AI改修対応（構造明確で千日手化しない）

### 🎯 Phase1 最終調整（Phase1.5準備）
- **軽微エラー修正**: eraser-tool.js末尾の不正テキスト除去
- **基本設定**: 色・線幅変更UI（簡易版）
- **安定化**: 描画品質向上・ブラッシュアップ

## 📦 Phase1.5-Navigation（キャンバス・非破壊基盤・座標系強化）⚠️最重要

### 🎯 Phase1.5の重要性
Phase1.5は**単なる機能追加ではなく、根幹システムの確立**です：

- **座標系の完成**: キャンバス外描画対応・変形基盤・精密座標管理
- **非破壊編集の基盤**: Undo/Redo・操作履歴・状態管理システム
- **拡張性の保証**: Phase2以降の全機能がこの基盤に依存
- **ユーザビリティの向上**: 基本操作（パン・ズーム・Undo）は現代的お絵描きアプリの必須機能

### 🚀 Phase1.5 統合機能（ペンツール戦略含む）

#### 🎨 キャンバス外描画対応（最優先）
```javascript
// 座標系拡張（CoordinateManager新設）
window.Tegaki.CoordinateManager {
    // キャンバス外座標を内部座標に変換
    screenToCanvas(screenX, screenY)      // スクリーン→キャンバス座標
    canvasToScreen(canvasX, canvasY)      // キャンバス→スクリーン座標
    clampToDrawableArea(x, y)            // 描画可能エリアに制限
    isInsideCanvas(x, y)                 // キャンバス内判定
    getExtendedDrawArea()                // キャンバス外描画許可エリア取得
    
    // 座標変換設定
    setCanvasTransform(transform)        // キャンバス変形設定
    getCanvasTransform()                 // 現在の変形取得
    resetTransform()                     // 変形リセット
}

// TegakiApplication座標処理拡張
TegakiApplication {
    getCanvasCoordinates(e) {
        // 🔧 キャンバス外座標も受け入れ・内部座標に変換
        const coords = this.coordinateManager.screenToCanvas(e.clientX, e.clientY);
        
        // キャンバス外でも描画許可（縁から一定範囲内）
        const extendedArea = this.coordinateManager.getExtendedDrawArea();
        
        if (this.coordinateManager.isInsideCanvas(coords.x, coords.y)) {
            return coords; // キャンバス内：そのまま
        } else if (extendedArea.contains(coords.x, coords.y)) {
            // キャンバス外だが描画許可エリア：クランプして描画
            return this.coordinateManager.clampToDrawableArea(coords.x, coords.y);
        } else {
            // 描画許可エリア外：描画無効
            return null;
        }
    }
}

// 全ツール共通拡張
AbstractTool {
    onPointerDown(x, y, event) {
        if (x === null || y === null) {
            // キャンバス外すぎる場合は描画開始しない
            return;
        }
        // 通常の描画処理
    }
}
```

#### ⚡ キャンバス移動・変形システム
```javascript
// NavigationManager（キャンバス移動専任）
window.Tegaki.NavigationManager {
    // 基本移動・変形
    panCanvas(deltaX, deltaY)            // キャンバス移動
    zoomCanvas(scale, centerX, centerY)  // ズーム（中心指定）
    rotateCanvas(angle, centerX, centerY) // 回転（中心指定）
    resetCanvasTransform()               // 変形リセット
    
    // 変形状態管理
    getCanvasTransform()                 // 現在変形取得
    setCanvasTransform(transform)        // 変形設定
    saveTransformState()                 // 変形状態保存
    restoreTransformState(state)         // 変形状態復元
    
    // ナビゲーション操作
    startPan(x, y)                       // パン開始
    updatePan(x, y)                      // パン更新
    endPan()                             // パン終了
    
    // キーボード・マウスショートカット
    handleKeyboardNavigation(event)      // キーボード操作
    handleMouseWheelZoom(event)          // ホイールズーム
    handleMiddleClickPan(event)          // 中ボタンパン
}
```

#### 🔄 非破壊編集システム（Undo/Redo基盤）
```javascript
// RecordManager（操作履歴・非破壊編集専任）
window.Tegaki.RecordManager {
    // 操作記録
    recordOperation(operation)           // 操作記録
    startOperationGroup(name)            // 操作グループ開始
    endOperationGroup()                  // 操作グループ終了
    
    // Undo/Redo
    canUndo()                           // Undo可能判定
    canRedo()                           // Redo可能判定
    undo()                              // 操作取り消し
    redo()                              // 操作やり直し
    
    // 履歴管理
    getHistory()                        // 操作履歴取得
    clearHistory()                      // 履歴クリア
    setMaxHistorySize(size)             // 最大履歴数設定
    
    // 状態管理
    saveCurrentState()                  // 現在状態保存
    restoreState(stateId)               // 状態復元
    getStateList()                      // 保存状態一覧
}

// 全Tool共通拡張（非破壊編集対応）
AbstractTool {
    recordOperation(operation) {
        return window.Tegaki.RecordManager.recordOperation({
            tool: this.constructor.name,
            operation: operation,
            timestamp: Date.now(),
            canUndo: true,
            undoFunction: operation.undo,
            redoFunction: operation.redo
        });
    }
}
```

#### ⌨️ ショートカット・入力システム
```javascript
// ShortcutManager（キーボード・ショートカット専任）
window.Tegaki.ShortcutManager {
    // ショートカット登録・管理
    registerShortcut(key, action, context) // ショートカット登録
    unregisterShortcut(key, context)      // ショートカット削除
    handleKeydown(event)                  // キーボードイベント処理
    handleKeyup(event)                    // キー離し処理（Space等）
    
    // Phase別ショートカット設定
    setupPhase1Shortcuts() {
        // 🎯 Phase1: 基本操作のみ
        'Ctrl+Z': this.undo,              // アンドゥ
        'Ctrl+Y': this.redo,              // リドゥ
        'P': () => this.selectTool('pen'), // ペンツール
        'E': () => this.selectTool('eraser'), // 消しゴムツール
        'Space': this.startPanMode,       // パンモード開始（keydown）
    }
    
    setupPhase15Shortcuts() {
        // ⚡ Phase1.5: ナビゲーション・操作効率化
        'DEL': this.clearActiveLayer,     // アクティブレイヤー消去
        'Ctrl+0': this.resetCanvasView,   // ビューリセット
        'Space+Drag': this.panCanvas,     // キャンバス移動
        'Space+Arrow': this.panByKeyboard, // キーボード移動
        '[': this.decreaseBrushSize,      // ブラシサイズ縮小
        ']': this.increaseBrushSize,      // ブラシサイズ拡大
    }
    
    setupPhase2Shortcuts() {
        // 📦 Phase2: レイヤー操作
        'ArrowUp': this.moveLayerUp,      // レイヤー上移動
        'ArrowDown': this.moveLayerDown,  // レイヤー下移動
        'V+Drag': this.moveLayerContent,  // レイヤー内容移動
        'V+H': this.flipLayerHorizontal,  // レイヤー水平反転
        'V+Shift+H': this.flipLayerVertical, // レイヤー垂直反転
        'M': () => this.selectTool('select'), // 範囲選択ツール
        'G': () => this.selectTool('fill'),   // 塗りつぶしツール
        'TAB': this.toggleToolPanel,      // ツールパネル切り替え
    }
    
    setupPhase3Shortcuts() {
        // 🎬 Phase3: アニメーション（将来実装）
        'ArrowLeft': this.previousFrame,  // 前フレーム
        'ArrowRight': this.nextFrame,     // 次フレーム
        'Alt+Space': this.togglePlayback, // 再生/停止
        'Alt+O': this.toggleOnionSkin,    // オニオンスキン切り替え
        'Shift+ArrowLeft': this.jumpFrames(-5), // 5フレーム戻る
        'Shift+ArrowRight': this.jumpFrames(5), // 5フレーム進む
    }
    
    // コンテキスト管理（操作モード切り替え）
    pushContext(context)                 // ショートカットコンテキスト追加
    popContext()                         // コンテキスト削除
    getCurrentContext()                  // 現在コンテキスト取得
    setActivePhase(phase)                // アクティブPhase設定
}
```

### 🎨 ペンツール将来実装戦略統合

#### Phase1.5でのペンツール拡張
```javascript
// PenTool Phase1.5拡張
PenTool {
    // 既存機能（Phase1完成済み）
    onPointerDown/Move/Up()              // 基本描画 ✅
    setPenColor/Width/Opacity()          // 基本設定 ✅
    
    // Phase1.5新機能
    // ストローク管理（非破壊編集対応）
    startStroke(x, y) {
        const strokeId = this.generateStrokeId();
        const strokeData = {
            id: strokeId,
            tool: 'pen',
            points: [{x, y, timestamp: Date.now()}],
            settings: this.getSettings(),
            layerId: this.canvasManager.getActiveLayerId()
        };
        
        // 🔄 操作記録（Undo/Redo対応）
        this.recordOperation({
            type: 'stroke_start',
            data: strokeData,
            undo: () => this.removeStroke(strokeId),
            redo: () => this.restoreStroke(strokeData)
        });
        
        return strokeId;
    }
    
    // キャンバス外描画対応
    isValidDrawPosition(x, y) {
        return x !== null && y !== null; // CoordinateManager判定結果
    }
    
    // ストローク履歴（Phase2レイヤー移動準備）
    getStrokeHistory()                   // ストローク履歴取得
    moveStrokeToLayer(strokeId, layerId) // ストローク移動（Phase2準備）
    
    // Phase2準備機能
    enableAdvancedBrushes()              // 高度ブラシ有効化
    setBrushType(type)                   // ブラシタイプ設定
    enablePressureSupport()              // 筆圧対応有効化
}
```

## ⌨️ ショートカットキー仕様（Phase別実装）

### 🎯 Phase1: 基本操作（現在実装対象）
```javascript
// 最小限の基本操作・混乱を避けるため必要最低限のみ
基本編集:
- Ctrl+Z: アンドゥ（非破壊編集基盤）
- Ctrl+Y: リドゥ（非破壊編集基盤）

ツール切り替え:
- P: ペンツール選択
- E: 消しゴムツール選択

キャンバス操作:
- Space+ドラッグ: パンモード（Phase1.5で実装）
```

### ⚡ Phase1.5: ナビゲーション強化（次期実装対象）
```javascript
// ナビゲーション・効率化機能追加
拡張キャンバス操作:
- Space+方向キー: キーボードでキャンバス移動
- Ctrl+0: キャンバスビューリセット
- DEL: アクティブレイヤー内容消去

ツール効率化:
- [: ブラシサイズ縮小
- ]: ブラシサイズ拡大
- P+ドラッグ: ペンサイズ調整（Phase2準備）
- E+ドラッグ: 消しゴムサイズ調整（Phase2準備）
```

### 📦 Phase2: レイヤー・選択操作（将来実装）
```javascript
// レイヤー管理・範囲選択機能
レイヤー操作:
- ↑/↓: レイヤー選択移動
- Shift+↑/↓: レイヤー順序変更

レイヤー内変形:
- V+ドラッグ: レイヤー内容移動
- V+Shift+ドラッグ: レイヤー内容拡縮・回転（※排他制御）
- V+H: レイヤー内容水平反転
- V+Shift+H: レイヤー内容垂直反転

ツール追加:
- M: 範囲選択ツール
- G: 塗りつぶしツール
- I: スポイトツール
- TAB: ツールパネル切り替え
```

### 🎬 Phase3: アニメーション操作（最終実装）
```javascript
// アニメーション・フレーム制御
フレーム操作:
- ←/→: フレーム移動
- Shift+←/→: 5フレーム単位移動
- Alt+Space: 再生/停止切り替え
- Alt+O: オニオンスキン切り替え

高度なアニメーション:
- Alt+J/L: シャトル操作
- Alt+←/→: フレーム精密移動
- Ctrl+Shift+P: 性能監視表示
```

### 🔧 操作設計原則

#### 排他制御原則（Phase2以降）
```javascript
// 拡縮・回転の混在防止設計
操作開始判定:
- 最初の移動方向で操作モード固定
- 縦移動開始 → 拡縮モードで固定（途中の横移動無視）
- 横移動開始 → 回転モードで固定（途中の縦移動無視）
- モード変更時はペンを離して操作し直し

実装方法:
startTransform(initialDirection) {
    if (Math.abs(deltaY) > Math.abs(deltaX)) {
        this.transformMode = 'scale';    // 縦移動：拡縮固定
    } else {
        this.transformMode = 'rotate';   // 横移動：回転固定
    }
    // 以後、transformModeを変更しない
}
```

### 📋 Phase別実装優先度

#### 🎯 Phase1実装（必須・即座）
- **Ctrl+Z/Y**: 非破壊編集の根幹
- **P/E**: 基本ツール切り替え
- **Space+ドラッグ**: パン操作基盤

#### ⚡ Phase1.5実装（高優先・ナビゲーション基盤）
- **[/]**: ブラシサイズ調整（使用頻度高）
- **Ctrl+0**: ビューリセット（迷子防止）
- **DEL**: レイヤークリア（基本操作）
- **Space+方向キー**: キーボードナビゲーション

#### 📦 Phase2実装（中優先・レイヤー機能と同時）
- **V系操作**: レイヤー変形の根幹
- **↑/↓**: レイヤー選択（UI効率化）
- **M/G/I**: 新ツール（機能拡張）

#### 🎬 Phase3実装（低優先・アニメーション機能と同時）
- **Alt系操作**: アニメーション専用
- **←/→**: フレーム制御
- **性能監視**: 最適化段階で実装

### 🚨 実装注意事項

#### Phase1.5での重要判断
```javascript
// ShortcutManager実装時の配慮事項
1. **段階的有効化**: Phase進行に合わせて段階的にショートカット追加
2. **コンテキスト管理**: 描画中・UI操作中での動作分離
3. **競合回避**: ブラウザデフォルトショートカットとの競合チェック
4. **国際化対応**: キーボードレイアウトの違いに配慮
5. **アクセシビリティ**: 代替操作方法の確保
```

#### GPU最適化・WebAPI活用（Phase3準備）
```javascript
// 将来の高性能化準備（設計段階で考慮）
パフォーマンス設計:
- Chrome Scheduling API: ショートカット処理の高優先度実行
- WebGPU Transform: キャンバス変形のGPU加速
- OffscreenCanvas: レイヤー操作の並列処理
- WebCodecs: アニメーション処理の最適化

※ただしPhase1-1.5では基本実装に集中・最適化は段階的に
```

## 🔧 Phase1.5 実装計画（ショートカット統合版）

#### Step1: 座標系強化・キャンバス外描画対応
```
🎯 目標: クリスタ風のキャンバス外描画を実現

実装ファイル:
├── js/utils/coordinate-manager.js     // 新規：座標変換専任
├── js/app-core.js                     // 修正：キャンバス外座標対応
├── managers/canvas-manager.js         // 修正：拡張描画エリア対応
└── tools/*.js                         // 修正：座標null対応

設計方針:
1. **シンプルさ維持**: 座標変換を単一クラスに集約
2. **AI管理対応**: CoordinateManagerで座標処理を統一
3. **剛直構造**: 複雑な座標計算を隠蔽・明確なAPI提供
4. **拡張性**: Phase2レイヤー変形の基盤

座標系設計:
- キャンバス内座標: (0, 0) ～ (width, height)
- 拡張描画エリア: キャンバス外20px範囲まで描画許可
- クランプ処理: 拡張エリア外座標をキャンバス端にクランプ
```

#### Step2: ナビゲーション・変形システム
```
🎯 目標: パン・ズーム・回転の基本実装

実装ファイル:
├── managers/navigation-manager.js     // 新規：ナビゲーション専任
├── js/app-core.js                     // 修正：ナビゲーション統合
├── managers/canvas-manager.js         // 修正：キャンバス変形対応
└── js/utils/shortcut-manager.js       // 新規：ショートカット専任

機能実装:
1. **マウスホイールズーム**: Ctrl+Wheel でズーム
2. **中ボタンパン**: 中ボタンドラッグでパン
3. **キーボードショートカット**: Space+ドラッグでパン
4. **リセット機能**: ダブルクリックで変形リセット
```

#### Step3: 非破壊編集基盤
```
🎯 目標: Undo/Redo・操作履歴の基本実装

実装ファイル:
├── managers/record-manager.js         // 新規：操作履歴専任
├── tools/abstract-tool.js            // 新規：ツール基底クラス
├── tools/pen-tool.js                  // 修正：非破壊編集対応
├── tools/eraser-tool.js              // 修正：非破壊編集対応
└── js/app-core.js                     // 修正：Undo/Redoボタン連携

履歴管理設計:
1. **操作単位**: 1ストローク = 1操作
2. **履歴制限**: 最大100操作（メモリ節約）
3. **状態保存**: 定期的なスナップショット作成
4. **エラー耐性**: 操作失敗時の自動ロールバック
```

#### Step4: 統合・最適化・Phase2準備（ショートカット統合）
```
🎯 目標: ショートカット統合・Phase1.5機能統合・パフォーマンス最適化・Phase2基盤準備

ショートカット統合:
├── ShortcutManager実装・統合
├── Phase1基本ショートカット（Ctrl+Z/Y, P/E）
├── Phase1.5ナビゲーションショートカット（[/], Ctrl+0, DEL）
├── コンテキスト管理（描画中・UI中での動作分離）
└── ブラウザ競合回避・アクセシビリティ配慮

統合テスト:
1. **座標精度**: キャンバス外描画の座標精度確認
2. **変形動作**: パン・ズーム中の描画動作確認
3. **Undo/Redo**: 大量操作での動作確認
4. **ショートカット**: 全Phase1.5ショートカット動作確認
5. **メモリ使用量**: 長時間利用での安定性確認

Phase2準備:
1. **レイヤー変形基盤**: NavigationManagerをレイヤー変形に拡張
2. **範囲選択準備**: CoordinateManagerに選択エリア機能追加
3. **変形UI基盤**: 変形ハンドル・UI要素の基盤設計
4. **Phase2ショートカット基盤**: V系操作・レイヤー選択の準備設計
```

## 🎯 キャンバス外描画の実装判断

### 🤔 実装時期と複雑性の検討

**Phase1.5での実装推奨理由:**
1. **ユーザビリティ**: キャンバス縁描画時のストレス軽減は基本機能
2. **実装の単純性**: 座標クランプのみで実現可能・複雑な座標系は不要
3. **拡張性**: Phase2レイヤー変形の基盤として必要
4. **AI管理**: 座標処理をCoordinateManagerに集約することで管理しやすくなる

**座標系ファイルの必要性:**
- **必要**: CoordinateManager 1つのみ追加
- **理由**: 座標変換ロジックを散在させると後で修正困難
- **剛直構造**: 座標処理を単一責任に集約・デバッグ・保守が容易

**シンプルさ vs AI管理のバランス:**
```javascript
// ❌ 複雑化する例（避けるべき）
class ComplexCoordinateSystem {
    transformWorldToScreen() { /* 複雑な変換 */ }
    transformScreenToWorld() { /* 複雑な変換 */ }
    transformLayerToCanvas() { /* 複雑な変換 */ }
    // ... 10個以上の座標変換メソッド
}

// ✅ シンプルで剛直な実装（推奨）
class CoordinateManager {
    screenToCanvas(screenX, screenY) {
        // シンプルな変換・明確な責任
        const canvas = this.canvasElement;
        const rect = canvas.getBoundingClientRect();
        return {
            x: screenX - rect.left,
            y: screenY - rect.top
        };
    }
    
    clampToDrawableArea(x, y) {
        // 明確な制限・デバッグしやすい
        const extendArea = 20; // キャンバス外20px許可
        return {
            x: Math.max(-extendArea, Math.min(this.canvasWidth + extendArea, x)),
            y: Math.max(-extendArea, Math.min(this.canvasHeight + extendArea, y))
        };
    }
}
```

## 📦 Phase2-Layer（レイヤー機能）

### 🎯 Phase1.5基盤活用
Phase1.5で確立した基盤をフル活用：
- **CoordinateManager**: レイヤー座標変換に活用
- **NavigationManager**: レイヤー変形・移動に活用
- **RecordManager**: レイヤー操作のUndo/Redoに活用

### 🔧 実装計画（Phase1.5基盤前提）
```javascript
// Phase2新規追加（Phase1.5基盤活用）
window.Tegaki.LayerManager {
    // レイヤー管理（基本）
    createNamedLayer(name, index)
    deleteLayer(layerId)  
    setLayerVisibility(layerId, visible)
    moveLayerOrder(layerId, newIndex)
    
    // レイヤー変形（NavigationManager活用）
    transformLayer(layerId, transform)
    moveLayerContent(layerId, deltaX, deltaY)
    rotateLayerContent(layerId, angle)
    scaleLayerContent(layerId, scaleX, scaleY)
    flipLayerContent(layerId, horizontal, vertical)
}

window.Tegaki.SelectTool {
    // 範囲選択（CoordinateManager活用）
    startSelection(x, y)
    updateSelection(x, y)
    endSelection()
    
    // 選択変形（NavigationManager・RecordManager活用）
    transformSelection(transform)
    moveSelection(deltaX, deltaY)
}
```

## 🎬 Phase3-Complete（アニメーション・GIF）

### 🎯 追加機能スコープ（変更なし）
- **アニメーション**: フレーム管理・再生・プレビュー
- **GIF出力**: 作画内容をシーケンス化・エクスポート
- **高度UI**: GSAP/TweedleによるアニメーションUI
- **最適化**: パフォーマンス向上・メモリ管理

## 🔄 Phase間依存関係（更新版）

```
Phase1 → Phase1.5（必須・根幹）→ Phase2 → Phase3
   ↓         ↓                    ↓        ↓
基本描画 → 座標系・非破壊基盤 → レイヤー機能 → アニメーション
   ↓         ↓                    ↓        ↓
ツール → キャンバス外描画 → 範囲選択 → GIF出力
   ↓         ↓                    ↓        ↓
   UI  → ショートカット・ナビ → 変形UI → 最終UI
   ↓         ↓                    ↓        ↓
座標精度 → Undo/Redo基盤 → レイヤー変形 → 最適化
```

### ⚠️ Phase1.5の決定的重要性

**Phase1.5を飛ばすリスク:**
- Phase2でレイヤー変形実装時に座標系を根本から作り直す必要
- Undo/Redo無しでの複雑な操作は非現実的
- キーボードショートカット無しの現代的UIは困難

**Phase1.5実装の利点:**
- Phase2以降の実装が大幅に簡単になる
- ユーザビリティが劇的に向上
- 座標・変形・履歴の一貫した基盤が確立

## 📅 開発ロードマップ（Phase1.5重点版）

### 🎯 Phase1 最終調整（現在→Phase1.5準備）
```
Step1: 軽微エラー修正 ⚡即座実行
├── eraser-tool.js末尾の不正テキスト除去
├── 全ファイルの構文チェック・完全性確認
└── エラーフリー状態でPhase1.5準備完了

Step2: Phase1.5設計完了
├── CoordinateManager設計書作成
├── NavigationManager設計書作成
├── RecordManager設計書作成
└── ShortcutManager設計書作成

Step3: Phase1.5実装準備
├── 新規ファイル構造決定
├── 既存ファイル改修箇所特定
├── 実装優先順位決定
└── テスト項目作成
```

### ⚡ Phase1.5実装（根幹システム・4週間想定）
```
週1: 座標系強化
├── CoordinateManager実装・テスト
├── キャンバス外描画対応
├── TegakiApplication座標処理修正
└── 全ツール座標対応修正

週2: ナビゲーション基盤
├── NavigationManager実装・テスト  
├── パン・ズーム・回転基本機能
├── マウス・キーボード操作対応
└── 変形状態管理・保存・復元

週3: 非破壊編集基盤
├── RecordManager実装・テスト
├── Undo/Redo基本機能
├── 操作履歴システム
└── 全ツール非破壊編集対応

週4: 統合・最適化・Phase2準備
├── ShortcutManager実装・統合
├── パフォーマンス最適化
├── 統合テスト・バグ修正
└── Phase2基盤確認・設計書更新
```

### 📦 Phase2実装（6週間想定・Phase1.5基盤前提）
```
週1-2: レイヤー基本機能
├── LayerManager実装（Phase1.5基盤活用）
├── 複数レイヤー作成・削除・管理
├── レイヤーパネルUI（ドラッグ・順序変更）
└── Phase1.5 RecordManager連携

週3-4: レイヤー変形機能
├── TransformTool実装（NavigationManager活用）
├── レイヤー移動・回転・拡縮・反転
├── Phase1.5座標系との完全連携
└── リアルタイム変形プレビュー

週5-6: 範囲選択・Phase3準備
├── SelectTool実装（CoordinateManager活用）
├── 矩形・自由選択・選択範囲変形
├── クリップボード連携準備
└── Phase3アニメーション基盤設計
```

### 📋 各Phase成功指標（Phase1.5重点版）

#### Phase1完了指標 ✅
- [x] 基本描画成功（ペンで線が引ける）
- [x] 座標精度（ズレ問題解決済み）
- [x] 消しゴム動作（ERASEブレンドモード）
- [x] エラーフリー（軽微エラー除去要）

#### Phase1.5完了指標（最重要）
- [ ] **キャンバス外描画**: 縁付近で自然な描画体験
- [ ] **パン・ズーム**: マウス・キーボードでの自然な操作
- [ ] **Undo/Redo**: Ctrl+Z/Ctrl+Y での確実な操作取り消し
- [ ] **ショートカット**: P(ペン)・E(消しゴム)・Space(パン)等の動作
- [ ] **座標系統一**: 全座標処理がCoordinateManager経由
- [ ] **パフォーマンス**: 1000回操作でもスムーズ動作
- [ ] **メモリ管理**: 長時間利用での安定性

#### Phase2完了指標
- [ ] **レイヤー管理**: 作成・削除・順序変更・表示制御
- [ ] **レイヤー変形**: 移動・回転・拡縮・反転（Phase1.5基盤活用）
- [ ] **範囲選択**: 矩形・自由選択・選択範囲変形
- [ ] **UI統合**: レイヤーパネル・変形ツール・選択ツール

#### Phase3完了指標
- [ ] **アニメーション**: フレーム管理・再生・プレビュー
- [ ] **GIF出力**: 高品質アニメーションGIF生成
- [ ] **最終UI**: 全機能統合・プロレベルUI
- [ ] **最適化**: 60FPS滑らか動作・メモリ効率化

## 🚨 Phase1.5 Critical Decision Points

### 🤔 キャンバス外描画の実装アプローチ

#### Option A: シンプル実装（推奨）
```javascript
// メリット: シンプル・AI管理しやすい・デバッグ容易
class CoordinateManager {
    clampToDrawableArea(x, y) {
        const margin = 20; // キャンバス外20px許可
        return {
            x: Math.max(-margin, Math.min(this.width + margin, x)),
            y: Math.max(-margin, Math.min(this.height + margin, y))
        };
    }
}
```

#### Option B: 複雑実装（非推奨）
```javascript
// デメリット: 複雑・管理困難・バグの温床
class ComplexCoordinateSystem {
    // 10以上の座標変換メソッド
    // 複雑なマトリックス変換
    // デバッグ困難な座標計算
}
```

**決定: Option A採用**
- **理由**: シンプルさ維持・AI Claude による管理のしやすさ
- **剛直構造**: 明確な責任分離・単一責任原則
- **拡張性**: Phase2で必要に応じて段階的に拡張

### 📁 ファイル構造の拡張計画

#### Phase1.5で追加するファイル
```
📁 v2_phase1.5/
├── 🌐 index.html                          # 既存：読み込み順序修正のみ
├── 🚀 js/bootstrap.js                     # 既存：変更なし
├── 🖊️ js/main.js                          # 既存：変更なし
├── 🎯 js/app-core.js                      # 修正：座標処理・ナビ統合
├── 🚨 js/utils/error-manager.js           # 既存：変更なし
├── ⚙️ js/utils/config-manager.js          # 既存：変更なし
├── 📡 js/utils/event-bus.js               # 既存：変更なし
├── 📐 js/utils/coordinate-manager.js      # 🆕 新規：座標変換専任
├── ⌨️ js/utils/shortcut-manager.js        # 🆕 新規：ショートカット専任
├── 🎨 managers/canvas-manager.js          # 修正：拡張描画エリア対応
├── 🖊️ managers/tool-manager.js           # 既存：軽微修正のみ
├── 🧭 managers/navigation-manager.js      # 🆕 新規：ナビゲーション専任
├── 🔄 managers/record-manager.js          # 🆕 新規：操作履歴専任
├── 🎯 tools/abstract-tool.js              # 🆕 新規：ツール基底クラス
├── ✏️ tools/pen-tool.js                   # 修正：非破壊編集対応
├── 🧹 tools/eraser-tool.js                # 修正：非破壊編集対応・軽微エラー除去
└── 🎯 assets/icons.js                     # 既存：変更なし
```

#### ファイル追加の妥当性
- **新規4ファイル**: coordinate-manager, navigation-manager, record-manager, shortcut-manager
- **基底1ファイル**: abstract-tool（共通処理集約）
- **合計5ファイル追加**: 機能に対して適切・責任分離明確
- **AI管理**: 各ファイル単一責任・理解しやすい構造

### 🔄 Phase間の互換性保証

#### API安定性の保証
```javascript
// Phase1.5で追加・Phase2以降も安定
CoordinateManager {
    screenToCanvas(screenX, screenY)    // 🔒 安定API
    clampToDrawableArea(x, y)          // 🔒 安定API
    isInsideCanvas(x, y)               // 🔒 安定API
}

NavigationManager {
    panCanvas(deltaX, deltaY)          // 🔒 安定API
    zoomCanvas(scale, centerX, centerY) // 🔒 安定API
    resetCanvasTransform()             // 🔒 安定API
}

RecordManager {
    undo()                             // 🔒 安定API
    redo()                             // 🔒 安定API
    recordOperation(operation)         // 🔒 安定API
}
```

#### 既存機能の保護
- **Phase1機能**: 全て動作保証・API変更なし
- **既存ツール**: PenTool・EraserToolの基本動作維持
- **UI一貫性**: ボタン・操作方法の変更なし

## ⚠️ 各Phase注意事項（Phase1.5強化版）

### 🎯 Phase1（現在完了・最終調整のみ）
- **✅ DO**: 軽微エラー修正・最終品質確認・Phase1.5設計
- **🚫 DON'T**: 大きな機能変更・アーキテクチャ変更・Phase2への早期着手

### ⚡ Phase1.5（現在最重要・根幹システム）
- **✅ DO**: 座標系・ナビゲーション・非破壊編集・ショートカット
- **✅ DO**: シンプル実装・剛直構造・明確な責任分離
- **✅ DO**: キャンバス外描画・Undo/Redo・パン/ズーム
- **🚫 DON'T**: レイヤー機能・アニメーション・複雑な座標変換

### 📦 Phase2（レイヤー・Phase1.5基盤前提）
- **✅ DO**: レイヤー管理・非破壊編集・UI拡張・Phase1.5基盤活用
- **🚫 DON'T**: GIF・アニメーション・Phase1.5の根本変更

### 🎬 Phase3（完成・最終最適化）
- **✅ DO**: アニメーション・GIF・最終UI・最適化
- **🚫 DON'T**: 基本アーキテクチャの大幅変更・Phase1-1.5-2の破壊

## 🚨 怪物コード撲滅継続（Phase1.5対応版）

### 💀 Phase1.5特有の注意事項
1. **座標変換の複雑化禁止** - CoordinateManagerに集約・シンプル実装
2. **ナビゲーション状態の散在禁止** - NavigationManagerに一元化
3. **Undo/Redo実装の複雑化禁止** - RecordManagerに責任集約
4. **ショートカット処理の散在禁止** - ShortcutManagerに一元化
5. **Phase2機能の早期実装禁止** - Phase1.5完了まで厳禁

### 🎯 Phase1.5品質基準
- **動作する**: 全基本機能がスムーズに動作
- **理解できる**: AI Claude が各ファイルの役割を即座に理解可能
- **拡張できる**: Phase2実装時に基盤として確実に活用可能
- **保守できる**: バグ修正・機能改善が容易

### 📝 Phase1.5完了確認項目
1. **機能確認**: キャンバス外描画・パン/ズーム・Undo/Redo動作
2. **性能確認**: 1000回操作・長時間利用での安定性
3. **コード品質**: 全ファイルが単一責任・可読性高い
4. **AI確認**: Claude が全ファイル理解・修正可能
5. **Phase2準備**: レイヤー機能実装の基盤が整っている

## 📋 実装優先度（Phase1.5）

### 🚨 最優先（Phase1.5 Week1）
1. **eraser-tool.js軽微エラー修正**: 即座実行必要
2. **CoordinateManager実装**: 全ての基盤
3. **キャンバス外描画対応**: ユーザビリティ向上

### ⚡ 高優先（Phase1.5 Week2）
1. **NavigationManager実装**: パン・ズーム基盤
2. **基本ナビゲーション**: マウスホイール・中ボタンパン

### 🔄 中優先（Phase1.5 Week3）
1. **RecordManager実装**: Undo/Redo基盤
2. **操作履歴システム**: 基本的な非破壊編集

### ⌨️ 低優先（Phase1.5 Week4）
1. **ShortcutManager実装**: キーボードショートカット
2. **統合・最適化**: 全機能の統合・性能向上

## 🎯 Phase1.5成功の定義

Phase1.5は「使いやすいお絵描きアプリの基盤完成」を意味します：

### ✅ ユーザー体験の向上
- **自然な描画**: キャンバス縁でもストレスなく描画
- **直感的操作**: マウス・キーボードでの自然なナビゲーション
- **安心感**: Undo/Redoによる安心した作画体験
- **効率性**: ショートカットによる高効率作業

### 🔧 開発基盤の確立
- **座標系統一**: 全座標処理の一貫性・デバッグ容易性
- **変形基盤**: Phase2レイヤー変形の確実な基盤
- **非破壊編集**: 複雑な操作の安全な実行基盤
- **拡張性**: Phase3までの全機能実装基盤

### 🤖 AI開発効率化
- **単一責任**: 各Managerが明確な責任・理解しやすい
- **剛直構造**: 予測可能な動作・修正しやすい設計
- **統一API**: 一貫した命名・使用方法
- **文書同期**: 実装と文書の完全一致

---

📝 **Phase1.5は妥協のない品質で実装する**
🎯 **成功の鍵**: シンプルさと機能性の両立
💀 **基本原則**: 怪物コード撲滅をPhase1.5でも継続徹底