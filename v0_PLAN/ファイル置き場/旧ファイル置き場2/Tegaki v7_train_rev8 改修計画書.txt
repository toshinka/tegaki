<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🎨 ふたば☆ちゃんねる風ベクターお絵かきツール v8 列車型 (軽量版)</title>
</head>
<body>
    <!-- Pixi.js ライブラリ -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/7.3.2/pixi.min.js"></script>
    
    <script>
        /**
         * ============================================================
         * Tegaki v8 列車型 - メイン制御車両 (軽量版)
         * 各車両のロードと統合制御のみを担当
         * ============================================================
         */

        // ==== Train Controller - 車両管理システム ====
        class TrainController {
            constructor() {
                this.cars = [];
                this.loadedCars = new Set();
                this.isInitialized = false;
            }

            /**
             * 車両順次ロード（依存関係を考慮）
             */
            async loadCars() {
                console.log('[Main] 🚂 列車型システム開始 - 車両ロード開始');

                // Phase 1: 基盤車両（スタイル + A1ヘッダー）
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-styles.html');
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-a1-header.html');
                
                // A1初期化完了待ち
                await this.waitForCarReady('a1Ready');

                // Phase 2: コア車両（A2）
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-a2-core.html');
                
                // A2初期化完了待ち
                await this.waitForCarReady('a2Ready');

                // Phase 3: 統合車両（A3）
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-a3-integration.html');
                
                // A列車完成待ち
                await this.waitForCarReady('aTrainReady');

                // Phase 4: UI・ステータス車両（B1, B2）
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-b1-ui.html');
                await this.loadCar('https://raw.githubusercontent.com/toshinka/tegaki/refs/heads/main/v7_train_rev7/tegaki-b2-status.html');

                console.log('[Main] ✅ 全車両ロード完了');
            }

            /**
             * 車両準備完了待ち
             */
            async waitForCarReady(readyFlag) {
                return new Promise((resolve) => {
                    const checkReady = () => {
                        if (window.TEGAKI_STATE?.[readyFlag]) {
                            console.log(`[Main] ✅ ${readyFlag} 準備完了確認`);
                            resolve();
                        } else {
                            setTimeout(checkReady, 50);
                        }
                    };
                    checkReady();
                });
            }

            /**
             * 個別車両ロード
             */
            async loadCar(url) {
                try {
                    const response = await fetch(url);
                    const content = await response.text();
                    
                    // HTMLパース
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(content, 'text/html');
                    
                    // スタイル追加
                    const styles = doc.querySelectorAll('style');
                    styles.forEach(style => {
                        if (!document.querySelector(`style[data-source="${url}"]`)) {
                            const newStyle = document.createElement('style');
                            newStyle.textContent = style.textContent;
                            newStyle.setAttribute('data-source', url);
                            document.head.appendChild(newStyle);
                        }
                    });
                    
                    // HTML要素追加
                    const bodyContent = doc.body.innerHTML;
                    if (bodyContent.trim()) {
                        const container = document.createElement('div');
                        container.innerHTML = bodyContent;
                        container.setAttribute('data-car', this.getCarName(url));
                        document.body.appendChild(container);
                    }
                    
                    // スクリプト実行
                    const scripts = doc.querySelectorAll('script');
                    for (const script of scripts) {
                        if (script.src) {
                            await this.loadExternalScript(script.src);
                        } else if (script.textContent.trim()) {
                            this.executeScript(script.textContent, url);
                        }
                    }

                    const carName = this.getCarName(url);
                    this.loadedCars.add(carName);
                    console.log(`[Main] 🚃 ${carName} 車両ロード完了`);

                } catch (error) {
                    console.error(`[Main] ⚠ 車両ロード失敗: ${url}`, error);
                }
            }

            /**
             * 外部スクリプトロード
             */
            loadExternalScript(src) {
                return new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = src;
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                });
            }

            /**
             * スクリプト実行
             */
            executeScript(content, sourceUrl) {
                try {
                    const script = document.createElement('script');
                    script.textContent = content;
                    script.setAttribute('data-source', sourceUrl);
                    document.head.appendChild(script);
                } catch (error) {
                    console.error(`[Main] スクリプト実行エラー ${sourceUrl}:`, error);
                }
            }

            /**
             * 車両名取得
             */
            getCarName(url) {
                const filename = url.split('/').pop();
                const match = filename.match(/tegaki-(.+)\.html$/);
                return match ? match[1] : filename;
            }

            /**
             * 初期化完了チェック
             */
            async waitForInitialization() {
                return new Promise((resolve) => {
                    const checkInterval = setInterval(() => {
                        // 基本的な車両システムが利用可能かチェック
                        if (window.TEGAKI_STATE?.a2Ready && 
                            window.TEGAKI_CanvasManager?.app &&
                            document.getElementById('drawing-canvas')) {
                            
                            clearInterval(checkInterval);
                            this.isInitialized = true;
                            resolve();
                        }
                    }, 50);
                });
            }

            /**
             * システム統合開始
             */
            async initializeSystem() {
                await this.loadCars();
                await this.waitForInitialization();
                
                console.log('[Main] 🎯 システム統合完了 - 描画システム準備完了');
                
                // デバッグ情報表示
                this.showDebugInfo();
            }

            /**
             * デバッグ情報表示
             */
            showDebugInfo() {
                console.log(`[Main] 📊 ロード済み車両: ${Array.from(this.loadedCars).join(', ')}`);
                console.log(`[Main] 🖼 キャンバス状態:`, window.TEGAKI_CanvasManager?.app ? '✅ 正常' : '❌ 未初期化');
                console.log(`[Main] 🎛 UI状態:`, document.querySelector('.main-layout') ? '✅ 正常' : '❌ 未配置');
            }
        }

        // ==== Bootstrap - システム起動 ====
        window.addEventListener('DOMContentLoaded', async () => {
            try {
                console.log('[Main] 🚀 Tegaki v8 列車型システム起動');
                
                window.trainController = new TrainController();
                await window.trainController.initializeSystem();
                
                console.log('[Main] ✨ システム起動完了');
                
            } catch (error) {
                console.error('[Main] ⚠ システム起動エラー:', error);
            }
        });
    </script>
</body>
</html>