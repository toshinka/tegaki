📋 Undo/Redo システム段階的改修計画書
🎯 改修方針

既存機能を一切破壊しない
ファイルは1つずつ完全版で提出
各ファイルは元のコード + 最小限の改修のみ
段階的に統合テスト可能な順序


📊 改修優先順位と依存関係
Phase 1: コア履歴システム
  └─ system/history.js (完全書き換え)

Phase 2: イベントバス強化
  └─ system/event-bus.js (優先度機能追加)

Phase 3: 状態管理統合
  └─ system/state-manager.js (commit API追加)

Phase 4: レイヤーシステム統合
  └─ system/layer-system.js (既存の History.push 呼び出しを新API対応)

Phase 5: 描画システム統合
  └─ core-engine.js (描画完了時の履歴記録を新API対応)

Phase 6: クリップボード統合
  └─ system/drawing-clipboard.js (ペースト操作の履歴記録を新API対応)

📝 各Phase詳細
Phase 1: system/history.js（完全書き換え）
現状の問題:

currentIndex の定義が曖昧（最後に適用済みか、次に適用するか不明確）
saveState() が状態スナップショット方式で巨大化
undo/redo 実行中の再入防止が不完全

改修内容:

コマンドパターン方式に完全移行
index = 最後に適用済みのインデックス（初期値 -1） に統一
push(entry) → entry.do() 実行 → 配列追加 → index++
isApplying フラグで再入防止
CompositeEntry サポート

互換性:

古い saveState() API は削除
新しい push() API のみ提供

テスト項目:

 push → undo → redo の循環
 CompositeEntry の動作
 例外発生時のロールバック


Phase 2: system/event-bus.js（優先度機能追加）
現状の問題:

イベント発火順序が不定
undo/redo 実行中の識別が困難

改修内容:

リスナー登録時に priority パラメータ追加
優先度順（降順）でソート実行
emit() に internal フラグサポート（既存ペイロードに追加）

互換性:

既存コードは一切変更不要（priority 省略時はデフォルト0）
既存の on(), off(), emit() の引数はそのまま

テスト項目:

 優先度順の実行確認
 既存イベントリスナーが正常動作


Phase 3: system/state-manager.js（commit API追加）
現状の問題:

状態変更が直接行われ、履歴に記録されない箇所がある

改修内容:

commit(action) API を追加（action = { name, do, undo, meta }）
既存の状態取得関数（getState() 等）はそのまま維持
軽量な状態変更（ツール選択等）は履歴化しない設計を維持

互換性:

既存の状態読み取りコードは一切変更不要
新規に commit() を使う箇所のみ追加

テスト項目:

 commit() 経由で History に記録されるか
 既存の getState() が正常動作


Phase 4: system/layer-system.js（最小限改修）
現状:

既に一部で History.push() を使用（reorderLayers, createLayer, deleteLayer, exitLayerMoveMode）
しかし window.History._manager.isApplying という古いAPIを参照

改修内容:

window.History._manager.isApplying → History.isApplying() に統一
entry の構造を新API仕様に適合（name, do, undo, meta）
その他の既存コードは一切変更しない

改修箇所（4箇所のみ）:

reorderLayers() - 既存の History.push 呼び出しを新API対応
createLayer() - 同上
deleteLayer() - 同上
exitLayerMoveMode() - 同上

互換性:

他のメソッドは一切変更しない
UI更新ロジック、サムネイル生成、座標変換等は全て維持

テスト項目:

 レイヤー移動 → undo → redo
 レイヤー作成/削除 → undo → redo
 レイヤー変形確定 → undo → redo


Phase 5: core-engine.js（描画完了時の履歴記録改修）
現状の問題:

stopDrawing() で window.History.saveState() を呼んでいる
layer:clear-active イベントハンドラでも同様

改修内容:

stopDrawing() 内の描画完了時に新しい History.push() を使用
layer:clear-active ハンドラ内のレイヤークリアを履歴化

改修箇所（2箇所のみ）:

DrawingEngine.stopDrawing() - 履歴記録ロジックを新API対応
CoreEngine.setupSystemEventIntegration() の layer:clear-active ハンドラ

具体的実装:
javascript// stopDrawing() 内
if (this.currentPath) {
    this.currentPath.isComplete = true;
    
    const layerIndex = this.layerManager.activeLayerIndex;
    const pathSnapshot = structuredClone(this.currentPath);
    
    History.push({
        name: 'draw-stroke',
        do: () => {
            // 既に追加済みなので何もしない
        },
        undo: () => {
            const activeLayer = this.layerManager.getActiveLayer();
            if (activeLayer) {
                const pathIndex = activeLayer.layerData.paths.findIndex(p => p.id === pathSnapshot.id);
                if (pathIndex !== -1) {
                    const path = activeLayer.layerData.paths[pathIndex];
                    activeLayer.removeChild(path.graphics);
                    if (path.graphics?.destroy) path.graphics.destroy();
                    activeLayer.layerData.paths.splice(pathIndex, 1);
                }
            }
            this.layerManager.requestThumbnailUpdate(layerIndex);
        },
        meta: { type: 'stroke', pathId: pathSnapshot.id }
    });
}
互換性:

他のメソッドは一切変更しない
DrawingEngine の他のメソッド、UnifiedKeyHandler、CoreEngine の初期化ロジック等は全て維持

テスト項目:

 1ストローク描画 → undo → redo
 レイヤークリア → undo → redo


Phase 6: system/drawing-clipboard.js（ペースト履歴改修）
現状:

recordHistory() メソッドで独自の履歴管理
window.History.push() を呼んでいるが、古いAPI形式

改修内容:

recordHistory() メソッドのエントリ構造を新API対応
その他のコードは一切変更しない

改修箇所（1箇所のみ）:

recordHistory() メソッド

互換性:

他のメソッドは一切変更しない
コピー/ペーストのロジック、トランスフォーム処理、スナップショット作成等は全て維持

テスト項目:

 ペースト → undo → redo
 上書きペースト → undo → redo


🔄 統合テスト計画
各Phaseごとに以下をテスト:

Phase 1完了後:

History単体テスト（HistoryTest() 実行）


Phase 2完了後:

EventBus の既存イベント動作確認


Phase 3完了後:

StateManager の commit() 動作確認


Phase 4完了後:

レイヤー操作の undo/redo 確認


Phase 5完了後:

描画 → undo/redo 確認


Phase 6完了後:

ペースト → undo/redo 確認
全機能統合テスト




📦 提出形式
各Phaseごとに:

元のファイル全体を提示
改修箇所のみをコメントで明示
動作確認方法を記載

