🚉 Tegaki v8 トレイン化計画書（改訂版）
基本理念（不変）

シンプル特化: 手描き・ペン描画に特化した設計

高品質描画: 60FPS安定・WebGPU活用・レスポンス最優先

非破壊編集: TPF（TegakiPathFormat）による完全可逆操作

拡張性確保: 段階的進化・プラグイン対応・アニメーション基盤

ブラウザネイティブ: HTML直開き・ES2023準拠・車輪の再発明をしないよう相性の良いライブラリの積極活用

構文完整性とDRY・SOLID原則を遵守、ファイルの明確な責任分界化

🚂 駅（Station）設計
index.html 構成要素
<!DOCTYPE html>
<html lang="ja">
<head>
  <!-- 総則ヘッダー（改修ルール全文） -->
  <!-- Styles読み込み -->
</head>
<body>
  <!-- 初期DOM構造 -->
  <!-- 車両読み込み（順序固定） -->
  <!-- 駅制御スクリプト -->
</body>
</html>

🚂 車両編成と責務
A1-Core（基盤エンジン）

@provides: Canvas管理、描画エンジン、リサイズ処理

@depends: Station DOM

@role: 描画基盤

移植対象（v7rev2より）:

DrawingEngine クラス全体

PIXI.js初期化処理

Canvas生成・リサイズロジック

基本描画メソッド（createPath, drawLine）

A2-Integration（統合制御）

@provides: イベント配線、車両間API、全体制御

@depends: A1

@role: 統合層

移植対象（v7rev2より）:

メインアプリケーションクラスの初期化部分

車両間のデータ受け渡し

イベントハンドリングの配線

B1-UI（ユーザーインターフェース）

@provides: サイドバー、ポップアップ、ツール選択

@depends: A1, A2

@role: UI制御

移植対象（v7rev2より）:

UIController クラス全体

ツールボタンのHTML生成・イベント

ポップアップ制御

スライダー・プリセット機能

ドラッグ機能

B2-Status（ステータス表示）

@provides: ステータスバー、FPS監視、座標表示

@depends: A1, A2

@role: 監視・表示

移植対象（v7rev2より）:

PerformanceMonitor クラス

ステータスバー更新ロジック

リアルタイム情報表示

B3-Tools（ツールシステム）

@provides: ペン設定、描画ツール、設定管理

@depends: A1, A2

@role: ツール管理

移植対象（v7rev2より）:

ToolSystem クラス全体

ブラシ設定・色設定

ツール切り替えロジック

Styles（スタイル定義）

@provides: 全体CSS、レスポンシブ対応

@depends: なし

@role: 視覚設計

移植対象（v7rev2より）:

全CSS（完全移植、省略禁止）

ふたば風カラーテーマ

アニメーション定義

🔄 初期化シーケンス
[Station] 🚉 boot
├─ A1.initCore()     # Canvas生成・基盤初期化
├─ A2.wireUp()       # 車両間API結線
├─ B1.initUI()       # UI構築・イベント設定  
├─ B2.initStatus()   # ステータス監視開始
├─ B3.initTools()    # ツール初期化
└─ [Station] ✅ ready

📋 完全移植チェックリスト
必須移植項目

 PIXI.js 初期化（解像度・アンチエイリアス設定）

 Canvas生成・リサイズ処理

 描画エンジン（円形ブラシ方式）

 ツールシステム（ペン・消しゴム）

 UIコントローラー（全ポップアップ・スライダー）

 サイズプリセット（6項目、動的更新）

 スライダー微調整ボタン（±0.1, ±1, ±10）

 チェックボックス機能

 ドラッグ可能ポップアップ

 リサイズ機能

 ステータスバー（座標・筆圧・FPS・メモリ）

 パフォーマンス監視

 全CSS（ふたばカラーテーマ）

設定値の完全継承

 初期ブラシサイズ: 16.0px

 初期不透明度: 85%

 初期筆圧: 50%

 初期線補正: 30%

 初期キャンバス: 400x400px

 カラー: #800000（ふたば茶）

イベント・インタラクション

 pointerdown/move/up イベント

 座標追跡・表示

 筆圧モニタリング

 ツール切り替え

 ポップアップ開閉

 ドラッグ・ドロップ

🚫 禁止事項（完全移植原則）

機能削除禁止: v7rev2の機能を一切削除しない

簡略化禁止: 「とりあえず」「後で」による省略を行わない

設定変更禁止: 初期値・動作を勝手に変更しない

依存追加禁止: 新しいライブラリを追加しない

変更が必要な場合の対応

駅の差分記録に以下を明記：

変更理由

影響範囲

代替手段

復旧手順

🔧 実装手順
Phase 1: 駅・基盤構築

index.html（駅）作成

A1-Core 移植

基本描画機能確認

Phase 2: 統合・UI構築

A2-Integration 作成

B1-UI 移植

ポップアップ・スライダー動作確認

Phase 3: 拡張機能・ツール統合

B2-Status 移植

ステータスバー、FPS、座標、筆圧などを常時監視

v7rev2 の表示ロジックを完全コピー

consoleログは必要最低限に抑える

B3-Tools 移植

ツール切替、ブラシ設定、色設定、描画プリセット

ポップアップやスライダー、ドラッグ可能なUIを完全継承

Styles 適用

CSS を tegaki-styles.css に集約

v7rev2 のふたばカラーテーマ、アニメーションも完全移植

レスポンシブ対応、サイドバーとキャンバスの整列保持

Phase 4: 最終検証

完全移植チェックリスト確認

初期値・動作・イベント・描画精度をすべてチェック

動作比較テスト

v7rev2 vs v8 トレイン版

FPS、描画精度、ツール操作、ステータス表示を比較

パフォーマンス検証

メモリ消費、レスポンス速度、キャンバスリサイズ時の描画安定性

🔑 トレイン化指示文（作業AI向け）

各車両は 前方依存のみ、横断依存禁止

A1 は描画基盤のみ、A2 は統合制御、B車両は拡張機能

ファイル頭に必ず <!-- File: ファイル名 --> を記載

v7rev2 の機能を 省略せず完全移植

consoleログは必要最低限、フォールバック・多重化は禁止

UI、ステータス、ツールは CSSと分離

Symbol Dictionary を参照し、描画・ツール名・設定値を統一

ルールブックに従い、エラーは隠蔽せず構造上で対処

📖 Symbol Dictionary（ミニヘッダー辞典）

筆サイズ (brushSize): px 単位、初期16.0

不透明度 (opacity): %, 初期85%

筆圧 (pressure): %, 初期50%

線補正 (stabilizer): %, 初期30%

カラー (color): #800000（ふたば茶）

ツール (tool): pen, eraser, fill, shape

ステータス (status): FPS, memory, coords, pressure

注意: 辞典に載せたキー・値を変更すると v7rev2 完全移植性が損なわれる

🚂 ファイル構成（最終案）
tegaki-v8/
├── index.html              # 🚉 駅（総則 + 車両順序制御）
├── tegaki-a1-core.html     # 🚂 A1 基盤エンジン（Canvas管理・描画）
├── tegaki-a2-integration.html # 🚂 A2 統合制御（イベント・車両間API）
├── tegaki-b1-ui.html       # 🚋 B1 UI制御（サイドバー・ポップアップ）
├── tegaki-b2-status.html   # 🚋 B2 ステータス表示（FPS/座標/筆圧）
├── tegaki-b3-tools.html    # 🚋 B3 ツール管理（ブラシ/色/プリセット）
└── tegaki-styles.css       # 🎨 CSS・レスポンシブ・テーマ

成功条件

v7rev2 の全機能を完全移植

車両ごとに局所改修可能で、main に依存しすぎない

FPS・メモリ消費などパフォーマンスは v7rev2 と同等以上

consoleログ・冗長化禁止、構造を剛直に維持

Symbol Dictionary の初期値・設定を保持

この計画書に従い、v7rev2 の機能を損なわず、トレイン型構造で安全かつ局所的に改修可能な Tegaki v8 を構築します。

🔄 初期化順序フロー（依存関係付き）
[Station] 🚉 boot
│
├─ A1-Core.initCore()        # Canvas生成・描画基盤初期化
│    └─ PIXI.js初期化
│
├─ A2-Integration.wireUp()   # 車両間API結線・イベント配線
│    └─ A1-Coreに依存
│
├─ B1-UI.initUI()            # サイドバー・ポップアップ・ツールUI構築
│    └─ A1-Core, A2-Integration に依存
│
├─ B2-Status.initStatus()    # FPS、座標、筆圧、メモリ監視
│    └─ A1-Core, A2-Integration に依存
│
├─ B3-Tools.initTools()      # ツール設定・ブラシ切替・色設定
│    └─ A1-Core, A2-Integration に依存
│
└─ [Station] ✅ ready

🚂 車両間依存図（ASCIIベース）
        ┌───────────┐
        │ Station   │
        │ (index.html)
        └─────┬─────┘
              │ boot
              ▼
        ┌───────────┐
        │ A1-Core   │
        │ Canvas &  │
        │ Drawing   │
        └─────┬─────┘
              │
              ▼
        ┌───────────┐
        │ A2-Integration │
        │ 統合制御       │
        └─────┬─────┘
              │
      ┌───────┴────────┐
      ▼                ▼
  ┌───────────┐    ┌───────────┐
  │ B1-UI     │    │ B2-Status │
  │ UI制御    │    │ ステータス │
  └─────┬─────┘    └─────┬─────┘
        │                │
        ▼                ▼
      ┌───────────┐
      │ B3-Tools  │
      │ ツール管理 │
      └───────────┘


解説:

矢印は 依存関係 を示す

上位車両は下位車両を必ず先に初期化

B車両（UI/Status/Tools）は A1-Core と A2-Integration に依存

Station（index.html）は 全体の順序制御 を担う

📝 追加指示（作業AI向け）

車両初期化はフローに沿うこと

フロー順を崩すと描画やUIが正しく表示されない

依存関係を守ること

B車両は A車両が初期化完了するまで待機

分割ファイル先頭にファイル名を記載

<!-- File: tegaki-xxx.html -->

差し替え・バージョン管理の誤差防止

完全移植原則を守る

v7rev2 の機能省略禁止

初期値・設定を勝手に変更禁止

コンソールログ制御

必要最低限のみ

冗長化・フォールバック禁止

このフローと依存図を使えば、作業AIが どの車両をいつ初期化するか、どの順序で依存関係を解決するか を正確に把握できます。

🚫 原則（フォールバック・フェイルセーフ禁止）  
- フォールバックや多重化で誤魔化さず、エラーは検知した上で隠蔽せず、構造上の責務で対処すること。  
- 構造は剛直かつシンプルに保ち、冗長化を避ける。  
- consoleログは必要最低限とし、肥大化を防ぐ。  
- ES2023+最新chromeAPI使用で、後方互換性は気にしない。
- バージョン混在 - v7/v8同時対応・二重管理禁止
- 外部ビルドツール - Vite/TypeScript/ESM/Webpack禁止 

