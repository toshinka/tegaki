🔧 改修統合手順書（左上直線バグ・責務分離 + AbstractTool対応）
1. AbstractTool の導入と読み込み順序確認

tools/abstract-tool.js を pen-tool.js や eraser-tool.js より前に読み込む。

HTMLスクリプトタグの順序を PHASE 5 内で修正：

<script src="tools/abstract-tool.js"></script>
<script src="tools/pen-tool.js"></script>
<script src="tools/eraser-tool.js"></script>

これにより、各ツールは AbstractTool を継承可能になる。

2. 各ツールの修正

PenTool は AbstractTool を継承する形に書き換える。

CanvasManager接続、CoordinateManager統合、描画Graphics作成・委譲のロジックは基底クラスと統合する。

左上直線バグ対応はツール固有座標管理 (lastPoint、lastValidX/Y など) を残す。

イベントハンドラー (onPointerDown/Move/Up) は AbstractTool の統一仕様に合わせてオーバーライド。

3. CanvasManager のグローバル登録・統合

CanvasManager は AppCore で生成後、各ツールに setCanvasManager で接続。

Graphics作成はツール側が行い、CanvasManager に委譲。

これにより、ツールは描画主導権を持ちつつ責務分離が実現。

4. CoordinateManager 統合

座標統合はツール・CanvasManager両方で行う。

AbstractTool のメソッドを利用し、PenTool などは座標変換・バリデーションを行う。

5. 初期化順序の保証

CanvasManager 初期化

CoordinateManager 初期化

BoundaryManager 初期化

ToolManager 初期化（各ツールに CanvasManager/CoordinateManager を接続）

UIManager 初期化

6. エラーハンドリング・イベント通知

各ツールで描画エラー発生時は ErrorManager で通知。

描画完了時は EventBus でイベント通知。

これにより座標統合やGraphics配置の失敗を可視化。

7. テストとデバッグ

左上直線バグが解消されているか確認。

CanvasManager/CoordinateManager統合後の描画やUIイベントが正しく動作するか検証。

コンソール警告・エラーがなくなることを確認。