# 🛠 Tegaki Phase1.4stepEX 改修ToDo & 作業手順書

## 🚨 現在の問題分析

### 📊 座標バグの根本原因
- **問題**: ペン描画で0,0座標から描画位置への直線が描かれる
- **原因**: CanvasManager と PenTool の描画責任分界が曖昧
- **影響**: AbstractTool の座標処理とCanvasManagerの描画処理が混在

### 🔍 現状の構造問題
1. **名前空間統一不完全**: `window.*` と `Tegaki.*` が混在
2. **初期化順序問題**: レジストリ方式未適用で依存関係エラー
3. **座標処理責任分散**: 座標変換がTool/Manager間で分散
4. **catch文構文エラー**: 一部ファイルで構文不整合

## 📋 改修戦略（指示文テンプレート準拠）

### 🎯 Phase1: 根幹Manager先行初期化
**目的**: 堂々巡りエラー防止のため、基盤システムを先に確保

#### ✅ Step1: 根幹Manager統一（最優先）
- [ ] ErrorManager → `Tegaki.ErrorManagerInstance`
- [ ] ConfigManager → `Tegaki.ConfigManagerInstance` 
- [ ] StateManager → `Tegaki.StateManagerInstance`
- [ ] EventBus → `Tegaki.EventBusInstance`
- [ ] 初期化レジストリ `Tegaki._registry` 導入

#### ✅ Step2: CoordinateManager座標処理統一
- [ ] 座標変換責任を CoordinateManager に集約
- [ ] PenTool から座標処理責任を分離
- [ ] CanvasManager は Graphics配置のみに専念

### 🎯 Phase2: Tegaki名前空間完全統一
**目的**: 改修手順書Phase1.4stepEX完全適用

#### ✅ Step3: 各ファイルの名前空間統一
- [ ] 全ファイルに `window.Tegaki = window.Tegaki || {};` 追加
- [ ] クラス定義 → `Tegaki.ClassName = ClassName;`
- [ ] インスタンス化 → `Tegaki._registry.push(() => { ... });`

#### ✅ Step4: 座標バグ完全修正
- [ ] PenTool座標処理をCoordinateManager委譲
- [ ] CanvasManager描画メソッド整理
- [ ] 0,0座標問題の根本修正

### 🎯 Phase3: UI・ポップアップ保持
**目的**: 既存機能・デザインの保持

#### ✅ Step5: ふたば☆ちゃんねるカラー・レイアウト保持
- [ ] CSS変数でふたばカラー定義維持
- [ ] @tabler/icons アイコン使用継続
- [ ] サイドバーレイアウト構造保持

#### ✅ Step6: ポップアップ機能保持・改良
- [ ] ベクターペンツール設定パネル保持
- [ ] サイズプリセット・スライダー機能保持
- [ ] ドラッグ可能ポップアップ機能保持

## 🔧 詳細実装手順

### 📂 ファイル別改修順序（依存関係考慮）

#### 🥇 最優先ファイル群（根幹Manager）
1. **js/utils/error-manager.js**
   - `window.Tegaki` 名前空間追加
   - `Tegaki.ErrorManager = ErrorManager;`
   - レジストリ初期化追加

2. **js/utils/config-manager.js**
   - 同様の名前空間統一
   - ふたばカラー設定保持

3. **js/utils/state-manager.js** 
   - 状態管理の名前空間統一

4. **js/utils/event-bus.js**
   - イベント通信の名前空間統一

#### 🥈 座標処理ファイル群
5. **js/utils/coordinate-manager.js**
   - 座標変換責任の完全集約
   - PenTool用座標メソッド強化

#### 🥉 Manager・UI系ファイル群
6. **managers/canvas-manager.js**
   - Graphics配置専門化
   - 描画処理をTool委譲
   
7. **managers/tool-manager.js**
   - Tool統合制御の名前空間統一

8. **js/ui/popup-manager.js**
   - ポップアップ機能保持

9. **js/ui/slider-manager.js** 
   - スライダー機能保持

#### 🏅 Tool実装ファイル群
10. **tools/abstract-tool.js**
    - 統一インターフェース確立
    - catch文構文修正

11. **tools/pen-tool.js**
    - 座標処理をCoordinateManager委譲
    - 描画責任明確化

#### 🎯 統合・起動ファイル群
12. **js/main.js**
    - DOMContentLoaded内でレジストリ実行
    - 初期化順序保証

13. **index.html**
    - スクリプト読み込み順序修正
    - ふたばカラー・@tabler/icons保持

## 🎨 重要な保持事項

### 🌈 ふたば☆ちゃんねるカラー定義
```css
--futaba-maroon: #800000;     
--futaba-light-maroon: #aa5a56;     
--futaba-medium: #cf9c97;
--futaba-light-medium: #e9c2ba;      
--futaba-cream: #f0e0d6;     
--futaba-background: #ffffee;
```

### 🎨 UI要素保持項目
- [ ] サイドバーレイアウト（左側ツールバー）
- [ ] @tabler/icons アイコン使用
- [ ] ベクターペンツール設定ポップアップ
- [ ] サイズプリセット（1px〜32px）
- [ ] スライダー操作（サイズ・不透明度・筆圧・線補正）
- [ ] ドラッグ可能ポップアップ
- [ ] ステータスパネル（下部情報表示）

### 📱 機能保持項目
- [ ] PixiJS v7 利用継続
- [ ] GPU加速対応
- [ ] 筆圧感知機能
- [ ] 120Hz対応
- [ ] リアルタイムFPS/メモリ表示

## ⚠️ 実装上の注意事項

### 🚫 禁止事項
- [ ] 架空のメソッド・シンボル定義使用禁止
- [ ] 既存機能の破壊的変更禁止
- [ ] PixiJS v8への勝手な移行禁止
- [ ] ふたばカラー・レイアウトの変更禁止

### ✅ 必須遵守事項
- [ ] 既存コード保持・問題箇所のみ修正
- [ ] 責務分離原則厳守
- [ ] 統一システム活用必須
- [ ] コメントアウトでの変更箇所明記

### 🔄 PixiJS v8対応準備
- [ ] 将来対応コメントアウト追加
- [ ] 非互換メソッド特定・代替準備
- [ ] モジュール化対応設計

## 📊 成功判定基準

### ✅ 基本動作確認
- [ ] ペン描画で直線バグが発生しない
- [ ] ポップアップが正常に動作する
- [ ] ツール切り替えが正常に動作する
- [ ] 初期化エラーが発生しない

### 📈 品質確認
- [ ] catch文構文エラーなし
- [ ] 未定義参照エラーなし  
- [ ] console.error 出力なし
- [ ] FPS/メモリ表示正常

### 🎯 コード品質確認
- [ ] 責務分離遵守率100%
- [ ] 統一システム活用率100%
- [ ] 重複コード数0個
- [ ] 循環依存数0個

## 💻 実装参考シンボル・メソッド一覧

### 🔧 Tegaki統一システムAPI
```javascript
// 利用可能なインスタンス（レジストリ初期化後）
Tegaki.ErrorManagerInstance.handle(error)
Tegaki.ConfigManagerInstance.getDebugInfo()
Tegaki.StateManagerInstance.getState(key), setState(key,val)
Tegaki.EventBusInstance.on(event,cb), emit(event,data)
Tegaki.CoordinateManagerInstance.screenToCanvas(x,y,rect)
Tegaki.CanvasManagerInstance.initialize(container), addLayer(name)
Tegaki.ToolManagerInstance.setTool(name), apply(event)
```

### 🖊️ Tool系統一インターフェース
```javascript
// AbstractTool継承必須メソッド
onPointerDown(event, canvasManager, coordinateManager)
onPointerMove(event, canvasManager, coordinateManager)  
onPointerUp(event, canvasManager, coordinateManager)

// PenTool具体実装メソッド
startDrawing(x, y, pressure)
updateStroke(x, y, pressure) 
endStroke()
createGraphicsForCanvas()
```

### 📐 CoordinateManager座標API
```javascript
// 座標変換統一API（必須使用）
extractPointerCoordinates(event, rect, app)
screenToCanvas(screenX, screenY, rect)
canvasToPixi(canvasX, canvasY, pixiApp)
validateCoordinateIntegrity(coords)
```

## 🎯 最終目標

### 🏆 成功状態
1. **座標バグ完全解消**: 0,0直線問題の根本解決
2. **責務分離達成**: CanvasManager（配置）+ Tool（描画）の明確分離
3. **統一システム完成**: Tegaki名前空間での統合管理
4. **既存機能保持**: UI・ポップアップ・ふたばデザイン完全保持
5. **Phase2準備完了**: 次段階への安全な移行基盤確立

### 📈 品質指標目標
- **座標処理精度**: 100%（0,0バグなし）
- **初期化成功率**: 100%（依存関係エラーなし）
- **UI機能保持率**: 100%（既存機能全保持）
- **責務分離遵守率**: 100%（Manager/Tool分離）
- **統一システム活用率**: 100%（Tegaki名前空間統一）

---

*📅 作成日: 2025年8月23日*  
*🎯 対象: Tegaki Phase1.4stepEX 座標バグ修正・名前空間統一*  
*📚 参考: 改修手順書Phase1.4stepEX.txt + Claude4用指示文テンプレート.txt*  
*🏆 目標: 座標バグ解消 + 責務分離達成 + 既存機能完全保持*