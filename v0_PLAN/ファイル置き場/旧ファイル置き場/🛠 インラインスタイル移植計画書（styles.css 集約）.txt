1. 目的

HTML のインラインスタイルを CSS に移植し、一元管理することで DRY / SOLID 原則を遵守

メンテナンス性・拡張性・再利用性を向上

将来的に Tabler Icons やツールUIの変更が容易になる

2. 対象範囲

index.html 内の全ての style 属性

<style> タグ内に書かれた固定スタイル

ただし、JavaScript で動的に変更されるスタイルは一部残す場合あり

3. 移植方針

共通クラスの作成

同じ色・サイズ・フォントが複数箇所にある場合は、CSSクラスにまとめる

例:
.futaba-maroon { background-color: var(--futaba-maroon); }
.tool-button { width: 36px; height: 36px; border-radius: 4px; }

CSS変数の活用

色やサイズは :root で変数化

例:
:root {
  --futaba-maroon: #800000;
  --tool-button-size: 36px;
}

既存クラスとの統合

すでに styles.css にある .tool-button 等のスタイルと統合し、重複を削除

移植後はインラインスタイルは原則削除

動的スタイルの扱い

JS で動的に変化するスタイル（アクティブボタンや色変更など）は CSS クラスと JS の classList.toggle() に置き換え可能

例:
button.classList.toggle('active');

4. 手順

現状把握

index.html 内の全 style 属性と <style> タグをリスト化

共通化できるスタイルを分類

色・サイズ・パディング・マージン・フォントなど

CSSクラスに移植

共通化されたスタイルを styles.css に追記

CSS変数を適用

HTML の書き換え

インラインスタイルを削除

新しいクラス名を追加

動作確認

レイアウト崩れ、色・サイズの誤差、Tabler Icons 表示の確認

JS動的操作も含めて確認

重複チェック

styles.css 内の既存スタイルとの重複や冗長な定義を整理

最終レビュー

DRY原則に沿って整理されているか

SOLID的にコンポーネント単位でスタイルが分離されているか確認

5. 補足

Tabler Icons の SVG 個別色指定は、CSSクラスにまとめると動的変更時も管理しやすい

初期段階では「動的変更部分は残す、固定スタイルのみ移植」する方針が安全

将来的に :root 変数や CSS クラスを拡張して、アイコンやツールボタンのテーマ変更にも対応可能

💡 この計画に沿って作業すれば、

HTML は 構造と意味のみに集中

CSS に デザイン・スタイルが集約

DRY / SOLID 原則に沿った状態を確実に確保
