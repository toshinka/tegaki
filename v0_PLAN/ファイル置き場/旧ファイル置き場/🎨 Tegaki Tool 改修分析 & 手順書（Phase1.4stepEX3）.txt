# 🎨 Tegaki Tool 改修分析 & 手順書（Phase1.4stepEX3）

## 1. 理想モデル（再掲）

理想のフローは次のような一本筋：

入力 (mouse/touch)  
   → ToolManager（アクティブツールへ委譲）  
      → Tool（Pen/Eraser …）  
         → EventBus（描画命令イベントを発行）  
            → CanvasManager（描画レイヤーに適用）  
               → StateManager（履歴として記録）  
                  → ErrorManager（復旧可能なエラー処理）

---

## 2. 現状との差分（v1_Phase1.4stepEX3）

### ✅ 良い点
- 抽象化ツールクラス（abstract-tool.js）が存在し、ペン・消しゴムが継承している。  
- EventBus / StateManager / ErrorManager が導入済み。  
- CanvasManager が PixiJS のステージ管理を担う。  
- UI とロジックの分離（UIManager / PopupManager / SliderManager）が進んでいる。  

### ⚠ 差分・課題
1. **入力 → ツール**  
   - main.js にまだ直接 pointerdown/pointermove をバインドしている箇所あり。  
   - 本来は ToolManager を経由すべき。

2. **ツール → EventBus**  
   - PenTool や EraserTool が CanvasManager を直接呼んでいる部分あり。  
   - 命令オブジェクト（DrawCommand 的なもの）を EventBus に発行する形になっていない。

3. **EventBus → StateManager**  
   - StateManager が「設定保存」寄りで、描画イベントの履歴は未実装。  
   - Undo/Redo の下地が不足。

4. **ErrorManager**  
   - console.error が多用され、フロー復旧処理に統合されていない。

5. **CSS/HTML**  
   - index.html 内にインラインスタイルが散見され、styles.css へ集約されていない（DRY/SOLID 的に課題）。

---

## 3. 改修手順書（短期安定 → 中期基盤強化）

### 🥇 Step 1: 入力フローの統一
- [ ] main.js での pointerdown 等の直接処理を削除。  
- [ ] 代わりに ToolManager.handlePointerDown/Move/Up を呼ぶ。  
- [ ] ToolManager 内で現在のツール (PenTool など) に委譲する。  

👉 効果: 入力処理が常に ToolManager 経由になり、直接描画との混在が消える。

---

### 🥈 Step 2: ツールからの描画命令を EventBus 経由にする
- [ ] PenTool / EraserTool は CanvasManager を直接触らず、イベント発行に専念する。  
  例:  

EventBus.emit('draw:stroke', { tool: 'pen', points, color, size });

- [ ] CanvasManager が EventBus.on('draw:stroke') を購読し、描画を反映する。  

👉 効果: 描画経路が一本化され、ログ収集・履歴保存・エラーハンドリングが容易になる。

---

### 🥉 Step 3: StateManager に描画履歴を追加
- [ ] StateManager に pushAction(action) / undo() / redo() を実装。  
- [ ] CanvasManager が描画を適用するたびに StateManager に記録。  
- [ ] Ctrl+Z / Ctrl+Y で操作可能にする。  

👉 効果: Undo/Redo が自然に拡張可能になり、後々のレイヤー操作にも対応できる。

---

### 🏅 Step 4: ErrorManager を描画フローに統合
- [ ] PenTool や EraserTool 内の console.error を排除。  
- [ ] 代わりに ErrorManager.handle(error, context) を呼ぶ。  
- [ ] 例: NaN 座標なら「スキップ」イベントを EventBus に通知。  

👉 効果: 異常が発生しても描画が止まらず、安全に継続できる。

---

### 🏆 Step 5: CSS の集約
- [ ] index.html に残存する style="..." を styles.css に移植。  
- [ ] Tabler Icons など外部リソースの表示制御もクラス指定 + CSS で統一。  

👉 効果: HTML がロジックと UI 構造に専念でき、CSS が見通しよくなる。

---

## 4. 最終像（目標アーキテクチャ）

[Pointer Input]  
 → ToolManager  
    → Tool(Pen/Eraser/…)  
       → EventBus ("draw:stroke", "draw:end", …)  
          → CanvasManager (PixiJS stage, layer管理)  
             → StateManager (Undo/Redo, replay)  
                ↔ ErrorManager (例外復旧)

---

## 5. 推奨進め方
1. Step1（入力統一）だけを先にやる → ペン復帰の安定版が動く。  
2. Step2（EventBus経由化） → レイヤー対応や履歴対応の布石になる。  
3. Step3以降は段階的に追加してよい（後戻りが少なくなる）。  

---

📌 まとめると：  
- 今は「ペン復帰」を急ぐより、Step1 の「入力統一」から入るのが正解。  
- その後 Step2 で EventBus 経由に切り替えれば、Undo/Redo やレイヤー追加にも耐えられる基盤ができます。



