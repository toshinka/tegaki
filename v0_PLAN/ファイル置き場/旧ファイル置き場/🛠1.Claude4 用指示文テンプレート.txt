==========================
💡 Claude4 用指示文テンプレート
==========================

目的:
- 既存の Tegaki Phase1.4stepEX の分割ファイル群で発生している初期化エラーや SyntaxError を修正する。
- ただし、依存関係の順序や未定義クラス参照による「堂々巡りエラー」が発生しやすいため、まず根幹Managerのみ先に初期化する。

作業手順（順序重視）:
1. 根幹Managerを Tegaki 名前空間に登録
   - ErrorManager → Tegaki.ErrorManagerInstance
   - ConfigManager → Tegaki.ConfigManagerInstance
   - StateManager → Tegaki.StateManagerInstance
   - EventBus → Tegaki.EventBusInstance
   - これを _registry に積むことで初期化順序を保証
   - 目的は「最低限の依存ルートを確保して、堂々巡りエラーを防ぐこと」

2. DOMContentLoaded 内で _registry を順次実行し、根幹Managerのインスタンスを生成
   - これで CanvasManager や ToolManager、PenTool/AbstractTool が参照しても Class未定義エラーが発生しにくくなる

3. この段階では **SyntaxError や catch 文の微修正は後回し**  
   - 根幹Managerの初期化後にやることで、エラーが連鎖して堂々巡りする事態を避ける

4. このテンプレートを適用したら、その後に 🛠 改修手順書Phase1.4stepEX に従い、
   - window.* → Tegaki.* に名前空間統一
   - 初期化レジストリ導入
   - 各ツール・マネージャーの順序依存の解消
   を進める

補足:
- まず根幹Managerだけ確保することで、「これからエラー直すよ！」という宣言を兼ねる。
- この順序で作業すれば、現状構造でも堂々巡りに陥らず、安全に全面改修へ進める。
- 将来的に AI が全体改修やリファクタリングを行いやすくなる。

==========================
💻 根幹Manager初期化テンプレート（Claude4 に渡すコード）
==========================
window.Tegaki = window.Tegaki || {};
Tegaki._registry = Tegaki._registry || [];

// ErrorManager
class ErrorManager { handle(error) { console.error("[ErrorManager]", error); } }
Tegaki.ErrorManager = ErrorManager;
Tegaki._registry.push(() => { Tegaki.ErrorManagerInstance = new Tegaki.ErrorManager(); });

// ConfigManager
class ConfigManager { getDebugInfo() { return { version:"Phase1.4EX", mode:"dev" }; } }
Tegaki.ConfigManager = ConfigManager;
Tegaki._registry.push(() => { Tegaki.ConfigManagerInstance = new Tegaki.ConfigManager(); });

// StateManager
class StateManager { constructor(){this.state={};} getState(k){return this.state[k];} setState(k,v){this.state[k]=v;} }
Tegaki.StateManager = StateManager;
Tegaki._registry.push(() => { Tegaki.StateManagerInstance = new Tegaki.StateManager(); });

// EventBus
class EventBus { 
  constructor(){this.listeners={};} 
  on(ev,cb){this.listeners[ev]=this.listeners[ev]||[];this.listeners[ev].push(cb);} 
  emit(ev,d){(this.listeners[ev]||[]).forEach(cb=>cb(d));} 
}
Tegaki.EventBus = EventBus;
Tegaki._registry.push(() => { Tegaki.EventBusInstance = new Tegaki.EventBus(); });

// 初期化呼び出し
document.addEventListener("DOMContentLoaded",()=>{
  if(Tegaki._registry){Tegaki._registry.forEach(init=>init()); delete Tegaki._registry;}
  console.log("根幹Manager初期化完了:", Tegaki.ErrorManagerInstance, Tegaki.ConfigManagerInstance, Tegaki.StateManagerInstance, Tegaki.EventBusInstance);
});
