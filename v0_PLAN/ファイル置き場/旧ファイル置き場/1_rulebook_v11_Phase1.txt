# 🎨 JavaScript + PixiJS v7 Rulebook v11 - 責務分離・恒久指針版

## 1. 基本設計理念（恒久原則）

### 1.1 責務分離の絶対原則

#### 🎯 CanvasManager：「紙とレイヤーの管理者」
**許可される責務**:
- PixiJS Application, Stage, Container, Layer の生成・破棄
- レイヤーの追加／削除／順序制御・表示切り替え  
- **ツールが生成したGraphicsを正しいレイヤーに配置**
- undo/redo対応（MemoryManager連携）
- 出力保存（画像化、動画書き出し）
- 全体的なレンダリング制御

**絶対禁止事項**:
- ❌ 直接的な描画処理（moveTo/lineTo/Graphics生成）
- ❌ 座標変換・筆圧処理
- ❌ ツール固有の描画ロジック実装

#### 🖊️ Tool群：「筆・消しゴム・スプレー」
**許可される責務**:
- ユーザー入力解釈・描画オブジェクト生成
- Graphics/Spriteの座標・色・線幅制御
- **座標変換・moveTo/lineTo制御（バグ修正の主戦場）**
- CanvasManagerに完成した描画オブジェクトを渡す
- ツール固有状態の保持（描画中フラグ、前回座標など）

**絶対禁止事項**:
- ❌ レイヤー直接操作・選択変更
- ❌ 他ツールのGraphics操作
- ❌ 全体レンダリング制御

#### 🎯 ToolManager：「配信制御・統合管理」
**許可される責務**:
- 現在のツール選択・切り替え管理
- イベント配信（CanvasManager → 適切なTool）
- ツールインスタンス管理・Graphics接続制御
- 座標統合処理の統一窓口

**絶対禁止事項**:
- ❌ 直接的な描画処理（Tool委譲必須）
- ❌ レイヤー直接操作

### 1.2 アーキテクチャ設計原則

#### 📏 抽象化・継承原則
- **1ツール1ファイル**: `tools/pen-tool.js`、`tools/eraser-tool.js`
- **AbstractTool継承**: 全ツールはAbstractTool基底クラス継承必須
- **統一インターフェース**: `onPointerDown/Move/Up(event, canvasManager, coordinateManager)`

#### 🔄 依存関係・統合原則
- **統一システム必須**: ConfigManager、ErrorManager、StateManager、EventBus
- **Manager統合**: CoordinateManager、MemoryManager等の専門Manager活用
- **循環依存禁止**: EventBus疎結合・一方向依存

#### 📂 ディレクトリ・命名原則
```
/managers     - インフラ管理層（レイヤー、ツール選択、メモリ等）
/tools        - 描画実装層（ペン、消しゴム、スプレー等）
/layers       - データ抽象層（将来：レイヤー種別管理）
/utils        - 基盤システム層（座標、エラー、設定等）
/ui          - プレゼンテーション層
```

---

## 2. 品質保証基準（恒久基準）

### 2.1 ファイル・コード品質基準

#### 📏 ファイル構造基準
- **500行制限**: 1ファイル最大500行厳守
- **責務単一**: 1ファイル1責務・混在禁止
- **命名規約**: ケバブケース（file-name.js）、PascalCase（ClassName）

#### 🚫 絶対禁止事項
- **重複関数作成**: 統一システム迂回禁止
- **直接クラス通信**: EventBus疎結合必須
- **循環依存作成**: 依存方向の一方向化必須
- **責務越境**: Manager/Toolの責務混在禁止

#### ✅ 必須遵守事項
- **統一システム活用**: ConfigManager等経由での実装
- **DRY・SOLID原則**: 重複排除・責務分離
- **ES2023構文推奨**: モダン構文活用・後方互換不要
- **非破壊的変形**: ベクターベース変形によるアニメ制作品質確保
- **PixiJSエコシステム活用**により、車輪の再発明を避け、標準実装を採用する

### 2.2 ヘッダーコメント記載規約

#### 🔄 CanvasManager系ファイル
```javascript
/**
 * 🎨 [FileName] - レイヤー・ステージ管理専門
 * 🚫 DRAWING_PROHIBITION: 直接的な描画処理は禁止
 * ✅ LAYER_MANAGEMENT: レイヤー生成・管理・Graphics配置のみ
 * 🔄 TOOL_INTEGRATION: Toolが生成したオブジェクトの受け皿
 * 📋 RESPONSIBILITY: 「紙とレイヤー」の管理者
 * 
 * 📏 DESIGN_PRINCIPLE: Tool → Graphics生成, CanvasManager → レイヤー配置
 * 🎯 FUTURE_PROOF: レイヤーシステム・動画機能対応設計
 */
```

#### 🖊️ Tool系ファイル
```javascript
/**
 * 🖊️ [ToolName] - [ツール名]専門ツール
 * ✅ DRAWING_AUTHORITY: 描画処理の主導権保持
 * 🔧 COORDINATE_CONTROL: 座標変換・moveTo/lineTo制御
 * 📋 RESPONSIBILITY: 「[ツール種別]」としての描画オブジェクト生成
 * 
 * 📏 DESIGN_PRINCIPLE: ユーザー入力 → Graphics生成 → CanvasManagerに渡す
 * 🎯 ARCHITECTURE: AbstractTool継承・1ファイル1ツール設計
 * 🚫 COORDINATE_BUG_NOTES: 左上直線バグ等の座標問題対策済み
 */
```

#### 🎯 Manager系ファイル
```javascript
/**
 * 🎯 [ManagerName] - [管理対象]専門管理システム
 * 🔄 [CORE_FUNCTION]: [主要機能説明]
 * 📋 RESPONSIBILITY: 「[管理範囲]」の専門管理
 * 
 * 📏 DESIGN_PRINCIPLE: [設計原則]
 * 🚫 [PROHIBITION]: [禁止事項]
 * ✅ [PERMISSION]: [許可事項]
 */
```

### 2.3 診断・品質監視基準

#### 📊 必須品質指標
- **統一システム活用率**: 100%維持必須
- **重複関数数**: 0個維持必須  
- **循環依存数**: 0個維持必須
- **責務分離遵守率**: 100%維持必須
- **ファイルサイズ制限遵守**: 100%維持必須

#### 🔍 品質監視手順
1. **日次**: 基本品質指標確認
2. **週次**: 統一システム健全性チェック
3. **月次**: 責務分離・アーキテクチャ検証
4. **Phase移行時**: 全品質指標総合検証

---

## 3. 統合システム運用規約（恒久規約）

### 3.1 統一システム活用規約

#### 🔧 ConfigManager活用規約
- **設定値ハードコード禁止**: 全設定値はConfigManager経由
- **デフォルト値設定必須**: `get(path, defaultValue)`形式必須
- **設定構造化**: ドット記法による階層化必須

#### 🚨 ErrorManager活用規約  
- **独自エラー処理禁止**: ErrorManager経由でのエラー処理必須
- **エラー分類必須**: type指定によるエラー分類必須
- **診断情報付与**: options引数での詳細情報提供推奨

#### 📊 StateManager活用規約
- **状態管理統一**: 独自状態管理システム禁止
- **Component/System分離**: 適切な状態種別選択必須
- **更新通知必須**: 状態変更時のupdateState実行必須

#### 🔄 EventBus活用規約
- **直接通信禁止**: クラス間直接通信の禁止
- **safeEmit推奨**: エラー安全性重視時はsafeEmit使用
- **イベント名統一**: 命名規約準拠必須

### 3.2 専門Manager活用規約

#### 📐 CoordinateManager活用規約
- **独自座標変換禁止**: 座標処理はCoordinateManager経由必須
- **精度設定遵守**: applyPrecision使用による精度統一必須
- **座標妥当性確認**: 重要な座標処理での妥当性確認推奨

#### 💾 MemoryManager活用規約（将来）
- **メモリ監視統合**: 重要なオブジェクト生成時のメモリ確認
- **リーク防止**: 大量オブジェクト処理でのcleanup実行

#### 🎯 BoundaryManager活用規約（将来）
- **境界チェック統合**: 座標・領域処理での境界確認
- **安全性確保**: 範囲外操作の防止

---

## 4. AI協働開発運用規約（恒久ガイドライン）

### 4.1 ファイル分業・効率化規約

#### 📂 分業パターン分類
- **A型**: 単一Manager改修（3-5ファイル）
- **B型**: Tool群改修（5-8ファイル）  
- **C型**: 統合システム改修（8-12ファイル）
- **D型**: 新機能実装（10-15ファイル）

#### 🔍 必要ファイル特定規約
1. **依存関係確認**: ヘッダーコメントDEPENDENCIES参照
2. **責務範囲確認**: RESPONSIBILITY記載内容確認
3. **影響範囲分析**: 変更による影響ファイル特定
4. **最小集合選択**: 必要最小限のファイル選択

### 4.2 品質保証・検証規約

#### ✅ 実装品質チェック手順
1. **責務分離確認**: ヘッダーコメント記載規約準拠確認
2. **統一システム統合**: 必須システム活用確認
3. **禁止事項遵守**: 絶対禁止事項違反確認
4. **品質指標測定**: 必須品質指標達成確認

#### 🔧 動作品質検証手順
1. **基本動作確認**: 基本機能の正常動作確認
2. **統合動作確認**: 他システムとの連携動作確認
3. **エラー処理確認**: 異常系での安全動作確認
4. **パフォーマンス確認**: 性能劣化なし確認

---

## 5. Phase移行・発展戦略（恒久戦略）

### 5.1 Phase移行原則

#### 🚀 Phase移行基準
- **前Phase完了**: 100%品質達成確認必須
- **基盤活用度**: 既存基盤90%以上活用必須
- **責務分離維持**: アーキテクチャ原則維持必須
- **品質基準継承**: 品質基準レベル維持・向上必須

#### 📈 発展可能性確保
- **拡張設計**: 新機能追加への対応設計必須
- **互換性維持**: 既存機能への影響最小化必須
- **保守性向上**: メンテナンス効率の向上必須

### 5.2 将来技術対応原則

#### 🔮 PixiJS v8移行対応
- **移行準備設計**: v8対応を見据えた実装必須
- **互換性戦略**: 段階的移行が可能な設計必須
- **機能活用**: v8新機能の積極活用計画必須

#### 🎮 新技術統合原則
- **WebGPU対応**: 高性能化技術への対応準備
- **120FPS対応**: 高フレームレート対応設計
- **モバイル最適化**: タッチ・筆圧対応強化

---

## 6. 緊急対応・トラブルシューティング規約（恒久手順）

### 6.1 緊急バグ対応原則

#### 🚨 責務分離に基づく問題分類
- **Canvas系問題**: レイヤー・レンダリング問題→CanvasManager範囲
- **Tool系問題**: 描画・座標問題→Tool範囲
- **Manager系問題**: 統合・管理問題→ToolManager範囲
- **System系問題**: 基盤・統一システム問題→utils範囲

#### 🔧 問題特定・修正手順
1. **責務範囲特定**: 問題の責務範囲を明確化
2. **該当コンポーネント特定**: 責務分離に基づく対象特定
3. **影響範囲分析**: 責務境界に基づく影響範囲確認
4. **修正実装**: 責務範囲内での修正実装
5. **統合テスト**: 責務境界を越えた動作確認

### 6.2 設計原則違反対応

#### ⚠️ 責務越境・設計違反発見時
1. **即座修正**: 責務分離原則への即座復帰
2. **影響調査**: 違反による影響範囲の全調査
3. **再発防止**: 同種違反防止のための規約強化
4. **品質確認**: 全品質指標の再確認・達成確認

#### 🔄 継続改善サイクル
- **週次レビュー**: 責務分離・品質基準遵守確認
- **月次改善**: 規約・基準の改善・強化
- **Phase移行時**: 全体アーキテクチャの検証・最適化

---

## 7. 恒久品質基準・成功指標（継続評価）

### 7.1 恒久品質指標

#### 📊 アーキテクチャ品質
- **責務分離遵守率**: 100%維持必須
- **統一システム活用率**: 100%維持必須
- **重複コード数**: 0個維持必須
- **循環依存数**: 0個維持必須

#### 🚀 開発効率品質
- **AI協働効率**: 80%以上維持目標
- **バグ修正効率**: 70%以上向上目標
- **新機能開発効率**: 60%以上向上目標
- **保守・拡張効率**: 75%以上向上目標

### 7.2 継続評価・改善基準

#### 📈 継続改善目標
- **責務分離明確性**: 継続的向上
- **コード可読性**: 継続的向上
- **AI協働効率**: 継続的向上
- **品質保証自動化**: 段階的向上

#### 🎯 長期成功指標
- **Phase移行効率**: 各Phase50%以上の期間短縮
- **品質安定性**: 品質指標95%以上安定維持
- **拡張容易性**: 新ツール追加1ファイルで完了
- **保守効率**: メンテナンス工数70%削減

---

## 8. 結論：恒久的開発指針

### 8.1 基本哲学

**「責務分離による持続可能な開発」**
- CanvasManager: 紙とレイヤーの管理者
- Tool: 筆としての描画手段
- Manager: 専門領域の統合管理
- 統一システム: 全体の基盤・品質保証

### 8.2 成功への道筋

1. **責務分離の徹底遵守**: アーキテクチャ原則の厳格適用
2. **統一システムの活用**: DRY・SOLID原則による重複排除
3. **品質基準の継続維持**: 恒久品質指標の達成・維持
4. **AI協働効率の向上**: 分業・効率化による開発加速
5. **継続改善の実践**: 週次・月次での品質向上サイクル

### 8.3 持続可能性の確保

- **明確な責務分離**: 混乱・複雑化の防止
- **恒久的品質基準**: 品質劣化の防止
- **効率的AI協働**: 開発効率の持続的向上
- **継続的改善**: 技術進歩・要求変化への対応

---

*🎨 JavaScript + PixiJS v7 Rulebook v11 - 責務分離・恒久指針版*  
*策定日: 2025年8月23日*  
*対象: 恒久的開発指針・品質基準・責務分離原則*  
*目的: 持続可能で効率的な開発体制の確立*  
*適用: 全Phase・全開発段階での厳格適用必須*
