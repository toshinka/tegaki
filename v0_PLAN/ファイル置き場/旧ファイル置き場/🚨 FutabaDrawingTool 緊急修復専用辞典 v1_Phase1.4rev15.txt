# 🚨 FutabaDrawingTool 緊急修復専用辞典 v1_Phase1.4rev15

## 📋 現状分析：根本的問題の洗い出し

### 🔍 エラー分析結果

#### 🚨 CRITICAL ERROR 1: DOM構造不一致
```
❌ canvas-manager.js:154 - canvas-container 要素が見つかりません
```
**原因**: CanvasManagerは `canvas-container` を要求するが、HTMLには `drawing-canvas` しか存在しない

#### 🚨 CRITICAL ERROR 2: AppCoreクラス未登録  
```
❌ main.js:310 - AppCore クラス未登録
```
**原因**: app-core.jsで文法エラーが発生し、クラス定義が失敗している

#### 🚨 CRITICAL ERROR 3: 文法エラー継続
```
❌ app-core.js:838 - Invalid or unexpected token
```
**原因**: 修正した筈のapp-core.jsで別の文法エラーが発生

#### 🚨 CRITICAL ERROR 4: 初期化順序破綻
各Managerが正しく初期化される前に相互依存呼び出しが発生

## 🔧 責務分離に基づくシンボル定義辞典

### 📋 RULEBOOK準拠：絶対遵守事項
#### 🚫 絶対禁止事項
- **重複関数作成**: 統一システム迂回禁止
- **直接クラス通信**: EventBus疎結合必須
- **循環依存作成**: 依存方向の一方向化必須
- **責務越境**: Manager/Toolの責務混在禁止

#### ✅ 必須遵守事項
- **統一システム活用**: ConfigManager等経由での実装
- **DRY・SOLID原則**: 重複排除・責務分離
- **ES2023構文推奨**: モダン構文活用・後方互換不要

### 🎨 CanvasManager：「紙とレイヤーの管理者」

#### ✅ 許可される責務
- PixiJS Application, Stage, Container, Layer の生成・破棄
- レイヤーの追加／削除／順序制御・表示切り替え  
- **ツールが生成したGraphicsを正しいレイヤーに配置**
- undo/redo対応（MemoryManager連携）

#### 🚫 絶対禁止事項
- ❌ 直接的な描画処理（moveTo/lineTo/Graphics生成）
- ❌ 座標変換・筆圧処理
- ❌ ツール固有の描画ロジック実装

#### 📐 実際のメソッド定義（canvas-manager.js確認済み）
```javascript
// ✅ 存在する公開メソッド
async initialize(config = {})           // 初期化メソッド
createGraphicsForTool(toolName)         // ツール用Graphics作成
addGraphicsToLayer(graphics, layerId)   // Graphics配置
removeGraphicsFromLayer(graphics, layerId) // Graphics削除
getCanvasElement()                      // キャンバス要素取得
getCanvasBounds()                       // キャンバス境界取得
clearCanvas(layerId = null)             // キャンバスクリア
dispose()                               // 破棄

// ❌ 存在しないメソッド
init()                                  // 存在しない
setup()                                 // 存在しない
```

#### 🎯 DOM要求仕様
```html
<!-- ❌ 現在のHTML構造 -->
<div id="drawing-canvas"></div>

<!-- ✅ CanvasManager要求構造 -->
<div id="canvas-container"></div>
```

### 🖊️ Tool群：「筆・消しゴム・スプレー」

#### ✅ 許可される責務
- ユーザー入力解釈・描画オブジェクト生成
- Graphics/Spriteの座標・色・線幅制御
- **座標変換・moveTo/lineTo制御（バグ修正の主戦場）**
- CanvasManagerに完成した描画オブジェクトを渡す

#### 🚫 絶対禁止事項
- ❌ レイヤー直接操作・選択変更
- ❌ 他ツールのGraphics操作
- ❌ 全体レンダリング制御

### 📐 CoordinateManager：「座標変換専門」

#### 📐 実際のメソッド定義（coordinate-manager.js確認済み）
```javascript
// ✅ 存在する公開メソッド
updateCanvasSize(width, height)          // キャンバスサイズ更新
extractPointerCoordinates(event, canvasRect, pixiApp) // 座標抽出
screenToCanvasSafe(screenX, screenY, canvasRect) // 安全な座標変換
canvasToPixiSafe(canvasX, canvasY, pixiApp) // PixiJS座標変換
getIntegrationStatus()                   // 統合状態取得
getCoordinateState()                     // 座標状態取得

// ❌ 存在しないメソッド
initialize()                             // 存在しない（constructorで自動初期化）
init()                                   // 存在しない
setup()                                  // 存在しない
```

### 🎯 ToolManager：「配信制御・統合管理」

#### 📐 推定メソッド定義（要確認）
```javascript
// ✅ 期待される公開メソッド
initialize()                             // 初期化
setCanvasManager(canvasManager)          // CanvasManager接続
setCoordinateManager(coordinateManager)  // CoordinateManager接続
getCurrentTool()                         // 現在のツール取得
getToolState()                          // ツール状態取得

// ❓ 要確認メソッド
startDrawing(event)                      // 描画開始（存在するか要確認）
continueDrawing(x, y, pressure)         // 描画継続（存在するか要確認）
finishDrawing(event)                     // 描画終了（存在するか要確認）
```

## 🔧 緊急修復計画：段階的アプローチ

### 🎯 PHASE 1: 文法エラー完全根絶（最優先）
1. **app-core.js文法検証**: 全行の文法チェック
2. **文字化け・エンコーディング確認**: UTF-8正常化
3. **JavaScriptパーサー検証**: 構文解析ツールでの確認

### 🎯 PHASE 2: DOM構造統一（緊急）
```html
<!-- 修正前 -->
<div id="drawing-canvas"></div>

<!-- 修正後 -->
<div id="canvas-container">
    <div id="drawing-canvas"></div>
</div>
```

### 🎯 PHASE 3: 初期化順序再設計（重要）
```javascript
// ✅ 正しい初期化順序
1. 基盤システム確認（ConfigManager, ErrorManager, StateManager, EventBus）
2. CoordinateManager作成（constructorで自動初期化）
3. CanvasManager初期化（DOM統合含む）
4. BoundaryManager初期化（CanvasManager依存）
5. ToolManager初期化（Canvas/Coordinate Manager接続）
6. AppCore初期化（全Manager統合）
```

### 🎯 PHASE 4: メソッド呼び出し正規化（重要）
```javascript
// ❌ 間違い：存在しないメソッド呼び出し
await this.coordinateManager.initialize();

// ✅ 正しい：実際に存在するメソッド使用
if (typeof this.coordinateManager.updateCanvasSize === 'function') {
    this.coordinateManager.updateCanvasSize(width, height);
}
```

## 📊 Manager別修復チェックリスト

### 🎨 CanvasManager修復チェックリスト
- [ ] **DOM要素ID統一**: `canvas-container`要素の確保
- [ ] **initialize()メソッド動作確認**: 正常な初期化処理
- [ ] **Graphics作成・配置機能確認**: Tool連携機能
- [ ] **キャンバス要素取得機能確認**: getCanvasElement()動作

### 📐 CoordinateManager修復チェックリスト  
- [ ] **constructor初期化確認**: 自動初期化動作
- [ ] **updateCanvasSize()動作確認**: キャンバスサイズ連携
- [ ] **座標変換機能確認**: extractPointerCoordinates()動作
- [ ] **統合状態確認**: getIntegrationStatus()動作

### 🎯 ToolManager修復チェックリスト
- [ ] **初期化メソッド確認**: initialize()存在・動作確認
- [ ] **Manager接続確認**: set*Manager()メソッド動作
- [ ] **描画メソッド確認**: 描画制御メソッド存在確認
- [ ] **状態取得確認**: getToolState()動作確認

### ⚡ AppCore修復チェックリスト
- [ ] **文法エラー完全解消**: 838行目エラー原因特定・修正
- [ ] **クラス定義完了**: window.AppCore正常登録
- [ ] **Manager統合確認**: 全Manager正常接続
- [ ] **初期化順序確認**: 依存関係順序遵守

## 🔍 実装時の必須確認事項

### 📋 コーディング時必須チェック
1. **文法検証**: ESLint/JSHint等での構文チェック
2. **メソッド存在確認**: `typeof obj.method === 'function'`
3. **DOM要素確認**: `document.getElementById()` null チェック
4. **初期化順序**: 依存関係グラフ準拠
5. **責務分離遵守**: RULEBOOK違反チェック

### 🚨 エラー処理強化パターン
```javascript
// ✅ 推奨パターン
try {
    if (!window.TargetClass) {
        throw new Error('TargetClass クラス未登録');
    }
    
    const instance = new window.TargetClass();
    
    if (typeof instance.targetMethod === 'function') {
        await instance.targetMethod();
    } else {
        console.warn('⚠️ targetMethod メソッドが見つかりません（続行）');
    }
    
} catch (error) {
    console.error('❌ 処理エラー:', error);
    window.ErrorManager?.showErrorMessage('処理失敗', error.message);
    return false;
}
```

## 🎯 SUCCESS CRITERIA：修復成功基準

### ✅ 必須達成項目（Phase 1）
- [ ] **コンソールエラー0件**: 全文法エラー・実行時エラー解消
- [ ] **キャンバス表示復旧**: canvas要素正常表示
- [ ] **基本システム起動**: AppCore正常初期化
- [ ] **Manager間連携**: Canvas↔Tool↔Coordinate連携動作

### 🏆 理想達成項目（Phase 2）
- [ ] **描画機能復旧**: ペンツール・消しゴムツール動作
- [ ] **座標統合動作**: 左上直線バグ完全解消
- [ ] **責務分離完全遵守**: RULEBOOK完全準拠
- [ ] **パフォーマンス最適化**: 60FPS安定動作

## 💡 修復戦略：段階的実行計画

### 🔧 STEP 1: 緊急文法修復（30分）
1. app-core.js 838行目エラー原因特定
2. 文法チェッカーでの全行検証
3. 文字化け・エンコーディング問題解決

### 🔧 STEP 2: DOM構造修正（15分）  
1. index.html の canvas-container 要素追加
2. CanvasManager DOM統合テスト
3. 基本表示確認

### 🔧 STEP 3: 初期化順序修正（45分）
1. main.js 初期化順序見直し
2. 各Manager初期化メソッド正規化
3. 依存関係チェーン確認

### 🔧 STEP 4: 統合テスト（30分）
1. 基本起動テスト
2. Manager間連携テスト  
3. 描画機能基本テスト

### 🎯 TOTAL: 2時間での緊急修復完了目標

---

*🚨 緊急修復専用辞典 v1_Phase1.4rev15*  
*作成日: 2025年8月23日*  
*対象: 致命的エラー群の根本解決*  
*基準: RULEBOOK v11 完全準拠*  
*目標: 2時間での基本機能復旧*