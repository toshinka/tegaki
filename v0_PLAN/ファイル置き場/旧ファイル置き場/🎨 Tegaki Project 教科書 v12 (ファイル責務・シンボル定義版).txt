📌 目的

本教科書は バラバラなファイル構成を整理し、責務とシンボル定義を明確化 することを目的とします。
ペン描画の安定化や今後のレイヤー実装の土台として、各ファイルの役割、主要メソッド、イベント伝達フローを体系化しています。
ショートカット類は将来拡張のための補足情報として最後に軽く触れます。

1. ファイル責務一覧
ファイル	主な責務	備考
abstract-tool.js	ツール共通の抽象クラス定義。ストローク管理や共通ユーティリティを提供。	新規ツール追加時に継承。
pen-tool.js / eraser-tool.js	各ツール固有の描画処理。AbstractToolを継承。	CanvasManager と連携して描画。
tool-manager.js	現在アクティブなツールの管理、ツール切替、ツール固有イベントの中継。	EventBus 経由で CanvasManager に伝達。
canvas-manager.js	実際のキャンバス描画（stage.position, stage.scale, 描画命令の適用）	Pointerイベントはここで受け取り、ToolManagerに転送。
memory-manager.js	Undo/Redo 管理。ストローク単位のスナップショットを保持。	Tool終了時に保存。
state-manager.js	現在状態管理（アクティブツール、描画中フラグなど）。	SettingsManager と混同しない。
settings-manager.js	ユーザー設定管理（ブラシサイズ、色、レイヤー設定）。	StateManagerとは責務を分離。
boundary-manager.js	キャンバス描画範囲の制限管理。	CanvasManagerと協調。
ui-manager.js / popup-manager.js / slider-manager.js	UI表示・操作管理。	ツール設定やポップアップ管理。
coordinate-manager.js	入力座標変換・補正。タブレットペン対応。	CanvasManager と密接連携。
icon-manager.js	ツール・UIアイコン管理。	UI表示用。
config-manager.js	設定値の保存・読み込み。	JSONやローカル保存。
event-bus.js	Manager間の疎結合通信。	ShortcutやUIイベントも将来集約。
error-manager.js	エラー・例外処理、ログ。	開発者通知とユーザー通知を分離。
2. メソッド・シンボル定義

・AbstractTool 共通メソッド例
class AbstractTool {
startStroke(point) {}
addPoint(point) {}
endStroke(point) {}
}

startStroke(point) : ストローク開始

addPoint(point) : 描画点追加

endStroke(point) : ストローク終了、MemoryManagerに通知

・CanvasManager 主なメソッド

pan(dx, dy) {}
setZoom(scale, centerPoint) {}
resetView() {}
getTransform() {}

EventBus イベント例

tool:change → ToolManager がアクティブツールを切替

canvas:pan / canvas:zoom / canvas:reset → CanvasManager が実処理

shortcut:* → 将来のショートカット入力用フック

MemoryManager 主なメソッド

saveSnapshot() : ストローク単位でUndo/Redo保存

undo() / redo() : Undo/Redo 実行

LayerManager（STEP2で導入予定）

addLayer() / removeLayer() / moveLayer(index)

レイヤー単位で描画指示を分離

3. ファイル間フロー例（ペン描画時）

ユーザーが PointerDown → CanvasManager がイベント受け取り

CanvasManager → ToolManager.activeTool.startStroke(point) に転送

ツール（PenTool）内で座標補正 → CanvasManager に描画命令発行

PointerMove → Tool.addPoint → CanvasManager描画

PointerUp → Tool.endStroke → MemoryManager.saveSnapshot

UI・状態の更新は EventBus 経由

4. STEP整理

STEP1：ペン・消しゴム安定化、座標補正、CanvasManager整備、EventBus経由の責務整理

STEP2：レイヤー実装、LayerManager導入、描画フロー拡張

STEP3以降：アニメーションや高度編集機能、ショートカット詳細実装

5. 補足：ショートカット（将来拡張）

ShortcutManager でキー入力を集約 → EventBus に通知する設計を予約

現段階では種としてフックポイントのみ設定

Phase2以降に詳細マッピングを決定予定（Ctrl+Z, Space+Drag, P/E/I など）

教科書 v12 を作成しました。

ファイルの責務、主要メソッド・シンボル、描画フローを整理

STEP1/STEP2/STEP3の段階的計画を明示

ショートカットは補足として軽く触れる形にしています
