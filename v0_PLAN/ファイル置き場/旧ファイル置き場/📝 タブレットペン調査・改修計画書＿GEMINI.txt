📝 調査・改修計画書
1. 現象

マウスでは描画可能だが、タブレットペンではキャンバスに描画されない。

ペンを近づけるとカーソルは動き、UIボタン押下も反応する。

筆圧値も取得されない。

2. 技術的調査結果
(1) イベントリスナーの二重構造

PenTool は DOM要素（canvas要素）に対して pointerdown/move/up を直接 addEventListener している
。

一方、AppCore は PixiJS の stage に pointerdown/move/up をバインドしている
。
👉 両方が別々のイベント経路を使っており、衝突や片方のイベントが消費される可能性。

(2) イベント座標解決の相違

PenTool は getCanvasCoordinates(event) を呼び出しているが、この定義は pen-tool.js 内に未確認（別ユーティリティ依存）。

AppCore は getLocalPointerPosition(event) で PIXI.InteractionEvent を使い正しくステージ座標を計算している。
👉 ペン入力の場合、event.data.originalEvent を参照しないと Pixi 側の座標解決が行われない。ここが原因で 座標が常に null となり描画開始されない可能性が高い。

(3) isActive フラグ

PenTool の描画開始条件に if (!this.isActive) return; がある
。

しかし、main.js / AppCore 側で penTool.isActive = true を設定している箇所が確認できない。
👉 ペンツール自体が常に非アクティブ状態で、pointerdown が無視されている可能性。

(4) 筆圧対応

PenTool は event.pressure をそのまま利用している。

ただし、Pixi の InteractionEvent を経由した場合、event.data.originalEvent.pressure を参照しないと値が取れない。
👉 筆圧が常に 0 か undefined となり無効化される。

3. 根本原因まとめ

PenTool のイベントリスナーが DOM直付け方式、PixiJS 側とは別経路 → スタイラス入力が取りこぼされる。

isActive が true にされていない → pointerdown を無視。

筆圧値の参照元が誤り → event.pressure ではなく event.data.originalEvent.pressure が必要。

4. 改修計画
フェーズA: 即効性パッチ

main.js のツール選択処理で必ず penTool.isActive = true を設定。

PenTool.extractPointerInfo() 内で event.data?.originalEvent?.pressure ?? event.pressure を参照するよう修正。

PenTool.setupEventListeners() で PixiJS stage をターゲットにする（appCore.app.stage）か、少なくとも appCore.app.view に統一。

フェーズB: 構造整理

イベント経路を PixiJS の InteractionManager に統一。

AppCore.handlePointerDown/Move/Up で PenTool にイベントを委譲する方式へ移行。

// app-core.js 内
handlePointerDown(event) {
    const point = this.getLocalPointerPosition(event);
    this.toolSystem.getCurrentTool().onPointerDown(event, point);
}


PenTool 側では 座標を自前計算せず AppCore から受け取る。

フェーズC: 筆圧システム最適化

PointerEvent.getCoalescedEvents() に対応し、スタイラスの高精度追従を活用。

筆圧補間を導入して滑らかなストロークを実現。

5. 改修優先度

致命的不具合修正

isActive フラグ強制ON

originalEvent.pressure 参照修正

イベント経路統一 (PixiJS stage)

筆圧・coalescedEvents 最適化

6. 期待される効果

タブレットペン（Wacom, Surface Pen, Apple Pencil 等）で描画可能になる。

筆圧の反映（線の太さ変化）が有効化。

イベント二重管理を解消し、安定性・拡張性向上。


🔧 パッチ内容
1. pen-tool.js

extractPointerInfo() が pressure を正しく取れていないので修正します。

    /**
     * 🎯 Pointer 情報抽出
     */
    extractPointerInfo(event) {
-       return {
-           pointerId: event.pointerId || 0,
-           pointerType: event.pointerType || 'mouse',
-           isPrimary: event.isPrimary !== false,
-           pressure: event.pressure || 0.5
-       };
+       const original = event.data?.originalEvent || event.originalEvent || event;
+       return {
+           pointerId: original.pointerId || event.pointerId || 0,
+           pointerType: original.pointerType || event.pointerType || 'mouse',
+           isPrimary: original.isPrimary !== false,
+           // 筆圧を必ず originalEvent から優先取得
+           pressure: (typeof original.pressure === 'number')
+               ? original.pressure
+               : (typeof event.pressure === 'number' ? event.pressure : 0.5)
+       };
    }

2. main.js

ペンツールが常に isActive = false なので、ツール選択時に有効化。

    /**
     * ペンツール選択（エラー処理付き）
     */
    selectPenTool() {
        try {
            if (!this.appCore || !this.appCore.toolSystem) {
                this.logWarning('⚠️ ツールシステム未初期化');
                return;
            }
            
-           this.appCore.toolSystem.setTool('pen');
+           this.appCore.toolSystem.setTool('pen');
+           // 即効パッチ: PenTool を有効化
+           if (this.appCore.toolSystem.currentTool?.name === 'pen') {
+               this.appCore.toolSystem.currentTool.isActive = true;
+           }
            
            // UI更新
            this.updateToolUI('pen-tool', 'ベクターペン');

📋 適用後の効果

スタイラスで描画開始可能（isActive が有効化されるため）。

筆圧反映（originalEvent.pressure を正しく参照）。

マウスとペンの両方で挙動が統一。

👉 このパッチを当てれば 「描けない／筆圧効かない」症状はすぐ解消するはずです。
