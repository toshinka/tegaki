index.html:327 ✅ PIXI読み込み成功
bootstrap.js:20 🚀 Tegaki Bootstrap 開始
bootstrap.js:227 📋 DOM状態: loading
bootstrap.js:230 📋 DOM読み込み待機中...
bootstrap.js:262 🚀 Bootstrap スクリプト登録完了（構文エラー解決版）
index.html:366 🎉 Tegaki REV系 Bootstrap 読み込み完了
index.html:367 🚀 依存関係解決後にmain.js初期化が自動実行されます
bootstrap.js:232 📋 DOMContentLoaded - Bootstrap開始
bootstrap.js:217 ✅ PIXI.js 読み込み確認
bootstrap.js:182 📦 20個の依存関係を順次読み込み中...
config-manager.js:548 🔧 ConfigManager (Phase1修正版) Loaded
config-manager.js:549 ✨ 修正完了: getCanvasConfig/getPixiConfig追加・CanvasManager連携強化
config-manager.js:550 🔧 使用例: const config = new ConfigManager(); const canvasConfig = config.getCanvasConfig();
bootstrap.js:79 ✅ [1/20] js/utils/config-manager.js
error-manager.js:481 🚨 ErrorManager (v11-phase1-fix) Loaded - ループ防止・UI統合・完全版
bootstrap.js:79 ✅ [2/20] js/utils/error-manager.js
state-manager.js:567 [StateManager] ✅ Tegaki名前空間統一・レジストリ登録完了
bootstrap.js:79 ✅ [3/20] js/utils/state-manager.js
event-bus.js:344 [EventBus] ✅ Tegaki名前空間統一・レジストリ登録完了
bootstrap.js:79 ✅ [4/20] js/utils/event-bus.js
coordinate-manager.js:851 📐 CoordinateManager (Phase1修復版) Loaded - 座標統合・0,0バグ修正・重複排除完了
bootstrap.js:79 ✅ [5/20] js/utils/coordinate-manager.js
performance.js:211 🎮 GPU情報取得完了: Object
performance.js:57 📊 PerformanceMonitor 初期化完了
performance.js:422 🧹 MemoryOptimizer 初期化完了
performance.js:502 ✅ Performance Utils グローバル公開完了
performance.js:541 📊 PerformanceMonitor 準備完了 - FPS・メモリ・GPU監視システム
performance.js:542 💡 使用例: window.performanceMonitor.start(), window.performanceMonitor.getMetrics()
bootstrap.js:79 ✅ [6/20] js/utils/performance.js
icon-manager.js:1059 ✅ IconManager グローバル公開完了
bootstrap.js:79 ✅ [7/20] js/utils/icon-manager.js
popup-manager.js:673 ✅ PopupManager DRY・SOLID準拠版 グローバル公開完了
popup-manager.js:674 💡 使用例: const pm = new PopupManager(); pm.initialize();
popup-manager.js:675 🔧 デバッグ: window.testPopupManager() で動作確認
bootstrap.js:79 ✅ [8/20] js/ui/popup-manager.js
slider-manager.js:884 ✅ SliderManager DRY・SOLID準拠版 グローバル公開完了
slider-manager.js:885 💡 使用例: const sm = new SliderManager(); sm.initialize();
slider-manager.js:886 🔧 デバッグ: window.testSliderManager() で動作確認
slider-manager.js:887 📊 値確認: window.getAllSliderValues() でスライダー値一覧取得
bootstrap.js:79 ✅ [9/20] js/ui/slider-manager.js
ui-manager.js:909 🎨 UIManager (Phase1修正版) Loaded
ui-manager.js:910 ✨ 修正完了: ErrorManager重複宣言解消・UIManager本来責務集中・境界線透明化
ui-manager.js:911 🔧 使用例: const uiManager = new UIManager(); uiManager.initialize();
bootstrap.js:79 ✅ [10/20] managers/ui-manager.js
memory-manager.js:434 ✅ MemoryManager v12 グローバル公開完了
memory-manager.js:437 🧠 MemoryManager v12-step3 準備完了
memory-manager.js:438 📋 STEP3実装: Undo/Redo・メモリ管理・履歴保存
memory-manager.js:439 💡 使用例: const memoryManager = new window.MemoryManager(); memoryManager.initialize();
bootstrap.js:79 ✅ [11/20] managers/memory-manager.js
settings-manager.js:718 ✅ SettingsManager v12 グローバル公開完了
settings-manager.js:721 ⚙️ SettingsManager v12-step3 準備完了
settings-manager.js:722 📋 STEP3実装: 設定UI・永続化・プリセット管理
settings-manager.js:723 💡 使用例: const settingsManager = new window.SettingsManager(); settingsManager.initialize();
bootstrap.js:79 ✅ [12/20] managers/settings-manager.js
pixi-extensions.js:15 🔧 PixiJS拡張ライブラリ統合システム Lodash遅延検出エラー修繕版 読み込み開始...
pixi-extensions.js:830 📦 PixiJS拡張機能グローバル登録 Lodash遅延検出エラー修繕版...
pixi-extensions.js:32 🎨 PixiExtensionsManager 構築開始... Lodash遅延検出エラー修繕版
pixi-extensions.js:890 🎉 Phase1: PixiJS拡張統合基盤構築完了 Lodash遅延検出エラー修繕版
pixi-extensions.js:891 🏗️ Phase2: UI統合・描画機能強化準備完了
pixi-extensions.js:892 📋 次のステップ: app-core.js・main.js の作成・修正
pixi-extensions.js:893 💡 使用方法例（Lodash遅延検出エラー修繕版）:
pixi-extensions.js:894   await window.PixiExtensions.initialize();
pixi-extensions.js:895   const hasUI = window.PixiExtensions.hasFeature("ui");
pixi-extensions.js:896   const button = window.PixiExtensions.createAdvancedButton({text: "テスト"});
pixi-extensions.js:897   const layer = window.PixiExtensions.createAdvancedLayer({zIndex: 1});
pixi-extensions.js:898   const processedData = window.PixiExtensions.processDataWithLodash([1,2,3,4], "chunk", 2);
pixi-extensions.js:899   const stats = window.PixiExtensions.getStats();
pixi-extensions.js:900 🔧 修繕機能: Lodash遅延検出・フォールバックモード・エラーハンドリング強化・詳細ログ
bootstrap.js:79 ✅ [13/20] libs/pixi-extensions.js
canvas-manager.js:847 🎨 CanvasManager (Phase1キャンバス出現確実化版) Loaded
canvas-manager.js:848 ✨ 修正完了: 構文エラー完全排除・ConfigManager警告解消・キャンバス出現確実化
canvas-manager.js:849 🚀 Phase1目標: キャンバス基本表示・責務分離維持
canvas-manager.js:850 🔧 使用例: const cm = new CanvasManager(); await cm.initialize({appCore, canvasElement});
bootstrap.js:79 ✅ [14/20] managers/canvas-manager.js
boundary-manager.js:508 ✅ BoundaryManager v12 グローバル公開完了
boundary-manager.js:511 🎯 BoundaryManager v12-step3 準備完了
boundary-manager.js:512 📋 STEP3実装: 描画範囲制限・境界検知・ポインタートラッキング
boundary-manager.js:513 💡 使用例: const boundaryManager = new window.BoundaryManager(); boundaryManager.initialize(canvasElement);
bootstrap.js:79 ✅ [15/20] managers/boundary-manager.js
tool-manager.js:973 [ToolManager] Loaded and ready for registry initialization (v12 enhanced)
bootstrap.js:79 ✅ [16/20] managers/tool-manager.js
abstract-tool.js:773 [AbstractTool] ✅ Loaded and registered to window.AbstractTool for inheritance
bootstrap.js:79 ✅ [17/20] tools/abstract-tool.js
pen-tool.js:484 [PenTool] ✅ Tegaki名前空間統一・レジストリ登録完了
bootstrap.js:79 ✅ [18/20] tools/pen-tool.js
eraser-tool.js:548 [EraserTool] Loaded and ready for registry initialization
bootstrap.js:79 ✅ [19/20] tools/eraser-tool.js
app-core.js:640 🎯 AppCore (Phase1 ConfigManager統合確実化版) Loaded
app-core.js:641 ✨ 修正完了: ConfigManager → CanvasManager統合確実化・キャンバス出現警告解消
app-core.js:642 🛡️ エラーループ防止機能強化・緊急フォールバック改善
app-core.js:643 🔧 使用例: const appCore = new AppCore(); await appCore.initialize();
bootstrap.js:79 ✅ [20/20] js/app-core.js
bootstrap.js:189 ✅ 基盤依存関係読み込み完了
bootstrap.js:95 🎯 main.js読み込み開始...
main.js:979 🎨 Tegaki Main (キャンバス表示問題解決版) Loaded
main.js:980 ✨ 修正完了: 初期化条件緩和・AppCore確実実行・キャンバス表示確実化
main.js:981 🚀 Phase1.5目標: キャンバス100%表示・初期化信頼性・診断機能完備
main.js:982 🔧 診断コマンド: window.checkTegakiHealth(), window.debugREVSystem(), window.checkCanvasDisplay()
main.js:983 🆘 緊急修復: window.emergencyCanvasFix()
bootstrap.js:103 ✅ main.js読み込み完了
bootstrap.js:107 ✅ TegakiApplication定義確認
bootstrap.js:194 ✅ 全依存関係読み込み完了
bootstrap.js:126 🎯 初期化トリガー発火試行...
bootstrap.js:137 ⚠️ AppInstance未作成 - DOM待機中
bootstrap.js:146 🚀 依存関係完了イベント発火
bootstrap.js:157 ✅ 依存関係完了イベント発火成功
performance.js:508 🧪 Performance Utils 自動テスト
performance.js:515 ✅ メトリクス取得: Object
performance.js:522 ✅ WebGLサポート: 対応
performance.js:348 🚀 パフォーマンスベンチマーク開始...
performance.js:532 🎉 Performance Utils テスト完了
performance.js:369 ✅ ベンチマーク完了: Object
performance.js:526 ✅ ベンチマーク完了: Object
bootstrap.js:167 ⚠️ AppInstance未作成 - 手動作成試行
(anonymous) @ bootstrap.js:167
main.js:47 🎨 TegakiApplication インスタンス作成完了
main.js:48 ⏱️ 初期化開始時刻: 3128.00ms
bootstrap.js:171 ✅ AppInstance手動作成完了
main.js:988 ⚠️ 10秒経過しても初期化未完了 - フォールバック起動
main.js:634 🆘 強制初期化開始...
main.js:163 🎨 Tegaki 初期化開始（キャンバス表示問題修正版）...
main.js:232 📡 初期化レジストリ実行中...
main.js:235 🔧 12個の初期化処理を実行
config-manager.js:288 ✅ ConfigManager - 設定を読み込みました
config-manager.js:34 🔧 ConfigManager インスタンス作成完了
config-manager.js:540 🔧 ConfigManager registered to Tegaki namespace
main.js:240 ✅ Registry[0] 初期化完了
error-manager.js:52 🚨 ErrorManager v11-phase1-fix 構築完了
error-manager.js:478 ✅ ErrorManager初期化完了 - Tegaki名前空間登録済み
main.js:240 ✅ Registry[1] 初期化完了
state-manager.js:564 [StateManager] ✅ Tegaki.StateManagerInstance 初期化完了
main.js:240 ✅ Registry[2] 初期化完了
event-bus.js:341 [EventBus] ✅ Tegaki.EventBusInstance 初期化完了
main.js:240 ✅ Registry[3] 初期化完了
coordinate-manager.js:797 📐 Input capabilities detected: {pressure: true, tilt: true, devicePixelRatio: 2}
coordinate-manager.js:65 📐 CoordinateManager初期化完了 (Phase1修復版) - 座標統合・重複排除対応
coordinate-manager.js:838 📐 Tegaki.CoordinateManagerInstance 初期化完了
main.js:240 ✅ Registry[4] 初期化完了
ui-manager.js:53 🎨 UIManager インスタンス作成完了（Phase1修正版）
ui-manager.js:901 🎨 UIManager registered to Tegaki namespace
main.js:240 ✅ Registry[5] 初期化完了
canvas-manager.js:65 🎨 CanvasManager インスタンス作成完了（Phase1キャンバス出現確実化版）
canvas-manager.js:839 🎨 CanvasManager registered to Tegaki namespace
main.js:240 ✅ Registry[6] 初期化完了
tool-manager.js:960 [ToolManager] Registered to Tegaki namespace
main.js:240 ✅ Registry[7] 初期化完了
abstract-tool.js:765 [AbstractTool] Registered to Tegaki namespace as base class
main.js:240 ✅ Registry[8] 初期化完了
pen-tool.js:61 [PenTool] ✅ Constructor completed successfully
pen-tool.js:473 [PenTool] ✅ Initialized and registered as Tegaki.PenToolInstance
main.js:240 ✅ Registry[9] 初期化完了
eraser-tool.js:49 [EraserTool] ✅ Constructor completed successfully
eraser-tool.js:537 [EraserTool] ✅ Initialized and registered as Tegaki.EraserToolInstance
main.js:240 ✅ Registry[10] 初期化完了
app-core.js:56 🎯 AppCore インスタンス作成完了（Phase1 ConfigManager統合確実化版）
app-core.js:632 🎯 AppCore registered to Tegaki namespace
main.js:240 ✅ Registry[11] 初期化完了
main.js:249 🗑️ 初期化レジストリ削除完了
main.js:261 ✅ 根幹Manager確認: 4/4個利用可能
main.js:272 🎯 AppCore初期化中（キャンバス表示問題修正版）...
main.js:285 📦 キャンバスコンテナ確認完了: {width: 400, height: 400, display: 'block', visibility: 'visible'}
main.js:295 ✅ 既存AppCoreインスタンス使用
main.js:309 🚀 AppCore本体初期化開始...
app-core.js:64 🎯 AppCore初期化開始（Phase1 ConfigManager統合確実化版）...
app-core.js:133 🔧 統一システム初期化中...
app-core.js:142 ✅ ConfigManager既存インスタンス取得
app-core.js:150 🔧 ConfigManager機能確認: {hasCanvasConfig: true, hasPixiConfig: true, ready: true}
app-core.js:179 ✅ 統一システム初期化完了: {configManager: true, configManagerFunctions: true, errorManager: true, stateManager: true, eventBus: true}
app-core.js:198 🎯 専門Manager初期化中...
app-core.js:224 ✅ 専門Manager初期化完了: {coordinateManager: true, canvasManager: true, toolManager: true}
app-core.js:241 🎨 PixiJS Application初期化中...
app-core.js:268 ✅ ConfigManager設定適用: {width: 400, height: 400, backgroundColor: 16777198, antialias: true, resolution: 2, …}
app-core.js:277 ✅ PixiJS Application作成完了: {width: 400, height: 400, backgroundColor: 16777198}
app-core.js:294 🎨 キャンバス統合中（ConfigManager統合確実化版）...
app-core.js:317 🔧 CanvasManager初期化開始 - ConfigManager統合付き
canvas-manager.js:79 🚀 CanvasManager初期化開始（Phase1キャンバス出現確実化版）... {appCore: AppCore, canvasElement: div#canvas-container.canvas-container, config: {…}}
canvas-manager.js:188 ✅ ConfigManager取得: options.config経由
canvas-manager.js:234 📋 初期化オプション検証完了: {appCore: true, configManager: true, canvasElement: true, canvasElementType: 'DIV'}
canvas-manager.js:96 ✅ AppCore & ConfigManager統合完了: {appCoreProvided: true, configManagerIntegrated: true, hasGetCanvasConfig: true, hasGetPixiConfig: true}
canvas-manager.js:275 ✅ ConfigManager設定適用完了（警告解消）: {backgroundColor: 16777198, antialias: true, resolution: 2}
canvas-manager.js:356 ✅ PIXI.Application作成完了: {width: 400, height: 400, backgroundColor: 16777198, antialias: true}
canvas-manager.js:392 ✅ PIXIキャンバスをコンテナに追加完了
canvas-manager.js:415 ✅ キャンバス表示設定完了 - Canvas should now be visible
canvas-manager.js:637 ✅ Layer added: background (graphics)
canvas-manager.js:637 ✅ Layer added: main_drawing (graphics)
canvas-manager.js:512 ✅ Layer system initialized
canvas-manager.js:532 ✅ 統一システム連携完了
canvas-manager.js:557 ✅ CoordinateManager統合完了
canvas-manager.js:583 ✅ 基本イベントハンドラー設定完了
canvas-manager.js:139 ✅ CanvasManager初期化完了（Phase1キャンバス出現確実化版） - Canvas visible and ready
app-core.js:332 ✅ CanvasManager初理化完了 - ConfigManager統合済み
app-core.js:339 ✅ キャンバス統合完了
app-core.js:423 🔧 ツール登録中...
pen-tool.js:61 [PenTool] ✅ Constructor completed successfully
tool-manager.js:159 [ToolManager] Tool registered: pen
app-core.js:437 ✅ ペンツール登録完了
eraser-tool.js:49 [EraserTool] ✅ Constructor completed successfully
tool-manager.js:159 [ToolManager] Tool registered: eraser
app-core.js:448 ✅ 消しゴムツール登録完了
pen-tool.js:155 [PenTool] Pen tool activated with settings: {size: 3, color: '#800000', opacity: 1, pressureSensitive: true, smoothing: 0.5, …}
abstract-tool.js:331 [penTool] Tool activated
tool-manager.js:250 [ToolManager] Tool changed to: pen
app-core.js:458 ✅ ツール登録完了
app-core.js:471 🎨 UI初期化中...
ui-manager.js:61 🎨 UIManager初期化開始...
ui-manager.js:144 ✅ UIManager - 統一システム参照取得完了: {configManager: true, errorManager: true, stateManager: true, eventBus: true}
ui-manager.js:188 ✅ UI要素登録完了: {toolButtons: 10, statusElements: 0, settingPanels: 2}
ui-manager.js:241 ✅ ツールボタン設定完了
ui-manager.js:349 ✅ ステータス表示設定完了
ui-manager.js:449 ✅ 設定パネル設定完了
ui-manager.js:522 ✅ ポップアップパネル設定完了
ui-manager.js:555 ✅ キーボードショートカット設定完了
ui-manager.js:588 ✅ レスポンシブ対応設定完了
ui-manager.js:623 ✅ キャンバス境界線透明化完了
ui-manager.js:106 ✅ UIManager初期化完了
app-core.js:482 ✅ UIManager初期化完了
app-core.js:101 ✅ AppCore初期化完了（Phase1 ConfigManager統合確実化版）
main.js:316 ✅ AppCore初期化完了
main.js:333 🔍 初期化後即座キャンバス確認開始...
main.js:338 🎨 キャンバス要素確認成功: {width: 800, height: 800, offsetWidth: 400, offsetHeight: 400, style: 'touch-action: none; width: 400px; height: 400px; c…air; display: block; border: none; outline: none;', …}
main.js:349 🔧 WebGLコンテキスト: 利用不可
main.js:368 🎯 キャンバス表示最終確認開始...
main.js:388 🎨 キャンバス表示状態確認: {element: true, dimensions: '800x800', visible: true, displayed: true, visibleCSS: true, …}
main.js:398 🎉 キャンバス表示最終確認: 成功
main.js:191 ✅ Tegaki 初期化完了（キャンバス表示確実化）
error-manager.js:334 📝 ErrorManager記録: [info] Tegakiアプリケーション起動完了 
error-manager.js:74 ✅ ErrorManager - PopupManager統合完了
error-manager.js:208 🚨 情報: Tegakiアプリケーション起動完了 
main.js:461 🔍 初期化完了後診断開始...
main.js:467 📊 健全性チェック結果: {healthy: true, functional: true, issues: Array(0), warnings: Array(0), score: 100, …}
main.js:471 📐 座標統合状態: {appInstance: true, appCore: true, appCoreInitialized: true, coordinateManager: true, canvasManager: true, …}
main.js:475 📋 アプリケーション状態: {version: 'Phase1.5-キャンバス表示修正版', initialized: true, initializationCompleted: true, dependenciesLoaded: false, canvasElementReady: false, …}
main.js:479 🎨 キャンバス表示診断: {containerExists: true, containerSize: '400x400', containerVisible: true, canvasExists: true, canvasSize: '800x800', …}
main.js:481 ✅ 初期化完了後診断完了