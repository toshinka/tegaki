# 🎨 Tegaki Project 実装ガイド v12 - 責務明確化版

## 📌 目的
ペン描画の問題解決のため、ファイル責務を明確化し、段階的に実装する作業手順書です。

## 🎯 問題解決の方針
1. **責務の明確化**: 各ファイルの役割を厳密に定義
2. **段階的実装**: コア→ツール→UI の順序で構築
3. **エラー防止**: 明確なインターフェース定義

---

## 📁 ファイル責務マトリックス

| ファイル | 主責務 | 依存先 | 公開シンボル |
|---------|-------|--------|-------------|
| **event-bus.js** | イベント中継 | なし | `EventBus` |
| **error-manager.js** | エラー処理 | なし | `ErrorManager` |
| **config-manager.js** | 設定管理 | ErrorManager | `ConfigManager` |
| **state-manager.js** | 状態管理 | EventBus, ErrorManager | `StateManager` |
| **coordinate-manager.js** | 座標変換 | ErrorManager | `CoordinateManager` |
| **canvas-manager.js** | Canvas制御 | EventBus, StateManager, CoordinateManager | `CanvasManager` |
| **abstract-tool.js** | ツール基底 | ErrorManager | `AbstractTool` |
| **pen-tool.js** | ペン描画 | AbstractTool, CanvasManager | `PenTool` |
| **eraser-tool.js** | 消しゴム | AbstractTool, CanvasManager | `EraserTool` |
| **tool-manager.js** | ツール管理 | EventBus, StateManager, ツール群 | `ToolManager` |
| **memory-manager.js** | Undo/Redo | EventBus, CanvasManager | `MemoryManager` |
| **settings-manager.js** | 設定UI | EventBus, ConfigManager | `SettingsManager` |
| **ui-manager.js** | UI制御 | EventBus, SettingsManager | `UIManager` |
| **boundary-manager.js** | 範囲制限 | CanvasManager | `BoundaryManager` |

---

## 🔧 メソッド・シンボル定義

### EventBus
```javascript
class EventBus {
    on(event, callback)
    off(event, callback) 
    emit(event, data)
}
```

### AbstractTool
```javascript
class AbstractTool {
    constructor(name, options)
    startStroke(point)      // ストローク開始
    addPoint(point)         // 点追加
    endStroke(point)        // ストローク終了
    activate()              // ツール有効化
    deactivate()            // ツール無効化
    getSettings()           // ツール設定取得
    updateSettings(settings) // ツール設定更新
}
```

### CanvasManager
```javascript
class CanvasManager {
    constructor()
    initialize(container)    // 初期化
    clear()                 // クリア
    drawLine(points, style) // 線描画
    drawPoint(point, style) // 点描画
    erase(area)            // 消去
    getPixiApp()           // PIXI.Application取得
    getStage()             // Stage取得
    pan(dx, dy)            // パン
    zoom(scale, center)    // ズーム
    resetView()            // ビューリセット
}
```

### ToolManager
```javascript
class ToolManager {
    constructor()
    initialize()
    setActiveTool(toolName) // ツール切替
    getActiveTool()        // 現在ツール取得
    handlePointerDown(event)
    handlePointerMove(event)
    handlePointerUp(event)
}
```

---

## 🚀 実装手順（段階的）

### STEP 1: コアシステム構築
**実装順序**: 依存関係に従って下から上へ

#### 1.1 基盤クラス
```
1. event-bus.js       # イベントシステム
2. error-manager.js   # エラー処理
3. config-manager.js  # 設定管理
4. state-manager.js   # 状態管理
```

#### 1.2 座標・Canvas
```
5. coordinate-manager.js  # 座標変換
6. canvas-manager.js      # Canvas制御（PIXI統合）
```

### STEP 2: ツールシステム構築
#### 2.1 ツール基盤
```
7. abstract-tool.js   # ツール基底クラス
```

#### 2.2 具体ツール
```
8. pen-tool.js        # ペンツール
9. eraser-tool.js     # 消しゴムツール
10. tool-manager.js   # ツール管理
```

### STEP 3: 機能拡張
```
11. memory-manager.js    # Undo/Redo
12. boundary-manager.js  # 描画範囲制限
13. settings-manager.js  # 設定UI
14. ui-manager.js        # UI統合管理
```

---

## 🔄 イベントフロー定義

### ペン描画フロー
```
1. PointerDown → CanvasManager.handlePointerDown
2. CanvasManager → ToolManager.handlePointerDown
3. ToolManager → activeTool.startStroke(point)
4. Tool → CoordinateManager.transform(point)
5. Tool → CanvasManager.drawPoint/drawLine
6. PointerMove → 同様のフロー (addPoint)
7. PointerUp → endStroke + MemoryManager.saveSnapshot
```

### EventBusイベント
```javascript
// ツール関連
'tool:change' → ToolManager
'tool:activate' → UI更新
'tool:deactivate' → UI更新

// Canvas関連  
'canvas:draw' → 描画通知
'canvas:clear' → クリア通知
'canvas:pan' → パン操作
'canvas:zoom' → ズーム操作

// 状態関連
'state:change' → StateManager
'settings:change' → SettingsManager

// 将来拡張用
'shortcut:*' → ショートカット処理
'layer:*' → レイヤー処理
```

---

## 💡 座標変換ルール

### CoordinateManager責務
```javascript
// ブラウザ座標 → Canvas座標変換
transformPoint(browserPoint) {
    return {
        x: (browserPoint.x - canvasOffset.x) / scale,
        y: (browserPoint.y - canvasOffset.y) / scale
    }
}

// タブレット圧力値正規化
normalizePressure(pressure) {
    return Math.max(0, Math.min(1, pressure || 0.5))
}
```

---

## 🎨 描画責務分離

### CanvasManager（描画実行者）
- PIXI.Application管理
- 実際のGraphics描画
- ビュー操作（pan/zoom）
- レンダリング最適化

### Tool（描画指示者）
- ストローク管理
- スタイル決定
- 描画命令生成
- CanvasManagerに描画指示

---

## 🔍 デバッグ・テスト方針

### 各段階での検証項目

#### STEP 1完了時
- [ ] EventBusでイベント送受信
- [ ] ErrorManagerでエラーキャッチ
- [ ] CanvasManagerでPIXI描画

#### STEP 2完了時  
- [ ] ペン描画（左上直線バグ解消）
- [ ] ツール切替動作
- [ ] PointerEvent正常処理

#### STEP 3完了時
- [ ] Undo/Redo動作
- [ ] UI操作反映
- [ ] 設定保存/読み込み

---

## 📋 実装チェックリスト

### ファイル作成
- [ ] event-bus.js
- [ ] error-manager.js  
- [ ] config-manager.js
- [ ] state-manager.js
- [ ] coordinate-manager.js
- [ ] canvas-manager.js
- [ ] abstract-tool.js
- [ ] pen-tool.js
- [ ] eraser-tool.js
- [ ] tool-manager.js
- [ ] memory-manager.js
- [ ] boundary-manager.js
- [ ] settings-manager.js
- [ ] ui-manager.js

### 統合テスト
- [ ] main.js での初期化順序
- [ ] window.*への公開確認
- [ ] 依存関係エラーなし
- [ ] ペン描画正常動作

---

## 🎯 成功基準

1. **左上直線バグ解消**: 正しい座標でペン描画
2. **ツール切替正常**: ペン/消しゴム切替可能
3. **エラーフリー**: コンソールエラーなし
4. **拡張準備完了**: レイヤー・ショートカット実装準備

---

## 📝 次フェーズ準備事項

### ショートカット仕込み
- EventBusに `'shortcut:*'` イベント予約
- ToolManagerでショートカット受信準備

### レイヤー仕込み  
- CanvasManagerでレイヤー概念考慮
- 描画命令にレイヤーID付与準備

---

このガイドに従って段階的に実装することで、責務が明確で拡張しやすい Tegaki プロジェクトを構築できます。