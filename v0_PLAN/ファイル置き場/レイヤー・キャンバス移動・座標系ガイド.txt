====================================================
Futaba Drawing Tool
レイヤー・キャンバス移動・座標系ガイド（統合版）
====================================================

■ 1. 基本方針
- **DOMパン（キャンバス移動系）**: 画面上でのビュー全体移動。canvas-containerのleft/topで制御。
- **PIXI Container操作（レイヤー移動系）**: 描画・アニメーション・物理演算用。Containerのx/y, scale, rotation, pivotで管理。
- 操作対象と座標系を明確に分離し、AIにも意図が伝わるようにコメントと状態管理を明示。

---

■ 2. フロー設計

1. **キャンバス表示フロー**
   AppInitializer.init()
   → PIXI.Application作成
   → DrawingEngine.setupContainers()
   → DOM配置完了

2. **ペン描画フロー**
   PointerDown → DrawingTools.startDrawing()
   → DrawingEngine.createPath()
   → PIXI.Graphics追加
   → 描画開始

3. **キャンバス移動（DOMパン）**
   Space + Drag → CanvasPanManager.updatePosition()
   → canvas-container left/top変更
   → 枠と描画内容が一体で移動

4. **レイヤー移動・変形フロー**
   ユーザー操作 → LayerTransformManager.applyTransform()
   → Container x/y, rotation, scale, flipX/Y更新
   → 描画に反映

5. **記憶・状態管理フロー**
   ユーザー操作 → InterfaceManager.updateState()
   → DrawingTools.applySettings()
   → 即座に描画に反映

---

■ 3. シンボル辞典（AI向け命名）

シンボル　　　　　　責任範囲　　　　　　　　　　　　　主要メソッド
-------------------------------------------------------------------------------------------------
AppInitializer　　　初期化・ライブラリ管理　　　　　　　init(), checkLibraries()
AppController　　　 アプリ全体制御　　　　　　　　　　　setupInputHandlers(), updateLoop()
DrawingEngine　　　 描画・Canvas管理　　　　　　　　　　createPath(), drawLine(), resize()
CanvasPanManager　　 DOMパンによるキャンバス移動　　　　updatePosition(dx, dy), resetPosition()
LayerTransformManager レイヤー移動・回転・拡縮・反転　　applyTransform(layerId, transform), resetTransform(layerId)
InterfaceManager　　 UI状態・ポップアップ管理　　　　　　togglePopup(), updateSliders()
DrawingTools　　　　 ツール・描画ロジック　　　　　　　startDrawing(), setBrushSize()
SystemMonitor　　　 パフォーマンス監視　　　　　　　　trackFPS(), updateStats()

---

■ 4. 座標系管理方針

| 操作タイプ | 対象 | 座標系 | 備考 |
|------------|------|--------|------|
| キャンバス移動 | canvas-container | DOMスクリーン座標 | 枠と描画内容を一体移動 |
| レイヤー移動 | PIXI Container | ワールド座標 | pivot/scale/rotationで管理 |
| 反転/回転/拡縮 | PIXI Container | ワールド座標 | pivot基準で描画位置調整 |
| DOMパン + PIXI操作 | 両方 | 明確に分離 | DOMはビュー、PIXIは内部描画 |

- 反転・回転・拡縮は全てPIXI内部で完結させる
- 状態オブジェクトで各操作を明示
- AI向けにコメント構造を統一

---

■ 5. 状態オブジェクト例（AIが扱いやすい形式）
javascript
this.state = {
    // キャンバス位置
    canvasPosX: 50,
    canvasPosY: 50,
    // レイヤー操作
    rotation: 0,
    scale: 1,
    isFlippedX: false,
    isFlippedY: false,
    posX: 0,
    posY: 0,
    // 描画状態
    isDrawing: false,
    currentTool: 'pen',
    brushSize: 16.0
};

---

■ 6. AI作業向けコメント例
javascript
// ==== CanvasPanManager: キャンバス移動（DOMパン） ====
// 【目的】ユーザー操作によるビュー全体移動
// 【入力】dx, dy
// 【出力】canvas-containerのleft/top更新
// 【副作用】キャンバス全体が移動

// ==== LayerTransformManager: レイヤー移動・変形 ====
// 【目的】レイヤー単位の移動・回転・拡縮・反転
// 【入力】layerId, transform情報
// 【出力】Container.transform更新
// 【副作用】pivotに基づき描画位置を調整

====================================================
