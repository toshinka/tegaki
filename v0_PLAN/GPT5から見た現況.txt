✅ 良い点

PixiJS v8.13 が全ファイルで統一されている（CDN読み込み確認済み）。

coordinate-system.js が既に導入されており、座標変換の統合が始まっている。

config.js と ui-panels.js は責務が比較的はっきりしている（UI系 vs Engine系）。

コードガイドに沿ったコメント（coord: screen -> world の明示）が一部反映済み。


⚠️ 問題点

ライブラリ使用の冗長化

core-engine.js 内で toLocal / toGlobal を直接呼んでいる部分が残っており、coordinate-system.js を経由していない箇所がある。

PixiJS の Point や Matrix を重複ラップしているメソッドが複数ある。

責務の混在

core-engine.js が 4000行級で、カメラ・レイヤー・描画・座標系が全部入りになっている。

core-runtime.js がファサードの役割を目指しているが、まだ core-engine.js と重複している部分が多い。

バージョン混在リスク

PixiJS v8.13 を使っているが、一部に v6 系コード（旧API互換の interaction 系処理や Graphics 描画フラグ）が混じっている。

特に ui-panels.js のイベントバインドで PixiJS v7+ 以降の正規 API に統一されていない。

冗長化

screenToCanvas / screenToCanvasForDrawing が分離して残っている。

core-runtime.js と core-engine.js の両方に「カメラ移動」「ズーム」メソッドがある（二重管理）。

🛠 改修計画（Phase1b → Phase2前整理）
改修ステップ (Phase1.5 相当)

1. 座標変換の完全統合
   - `core-engine.js` の全 `toLocal` / `toGlobal` 呼び出しを `CoordinateSystem` 経由に置換
   - `screenToCanvasForDrawing` を廃止し、`CoordinateSystem.screenToCanvas()` に統合

2. 重複APIの整理
   - `core-runtime.js` にだけ公開APIを残し、`core-engine.js` 側の直接呼び出しを段階的に削除
   - カメラ系 (`panCamera`, `zoomCamera`) は `core-runtime.js` に一本化

3. PixiJS v8.13 向けに統一
   - `ui-panels.js` のイベント処理を PixiJS v8 の `app.stage.eventMode = 'static'` 方式に変更
   - 古い `interactive = true` の記述を削除

4. ファイル責務の明確化
   - `core-engine.js` のコメントに「一時的に全責務を持っているが、Phase2で分割予定」と明記
   - `core-runtime.js` に「公開窓口のみ」とコメント追加
   - これにより Phase2 の分割（`layer-system.js`, `drawing-engine.js`）がスムーズになる

5. 冗長関数・旧APIの削除
   - `screenToCanvasForDrawing`
   - `getWorldCoords` 系の一時関数（CoordinateSystem と重複）
   - PixiJS v6 時代の fallback 処理

📌 結論

現状の Phase1b では「PixiJS v8.13 統一」自体は守られていますが、

旧バージョンAPI混在

座標変換の二重実装

core-engine と core-runtime の責務競合
が残っています。

👉 次のステップとしては「Phase2 の分割前に 座標変換とAPIを一元化」することが最重要です。