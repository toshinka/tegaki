layer-system.js 分割計画書
1. 背景と目的

layer-system.js は PixiJS のレイヤー管理・描画基盤を担う中核モジュール。

現在は レイヤー構造の定義とユーティリティ関数が混在しており、将来的にペンや描画機能を改修するときに「座標系・レイヤー制御」と「描画処理」が絡み合い混乱する恐れがある。

目的は以下：

座標系やレイヤー基盤を独立させて安全性を高める

ユーティリティを分割して AI 改修時の可視性と保守性を上げる

描画系との境界を明確化して、将来のペン改修に備える

2. 分割方針
(1) 残す部分（layer-system.js）

レイヤー構造そのものの定義

backgroundLayer, drawingLayer, uiLayer, overlayLayer 等

Pixi コンテナの生成と階層の管理

カメラ・座標系との直接結合部分

camera-system.js との依存箇所

レイヤーの初期化／破棄処理

👉 ここは座標系と直結しているため分割しない。座標系に触るコードは layer-system.js 内に閉じる。

(2) 切り出す部分（layer-utils.js）

レイヤー操作系ユーティリティ（描画以外）

clearLayer(layer) : レイヤーを空にする

addSprite(layer, sprite) : スプライトを特定レイヤーに追加

removeSprite(layer, sprite) : スプライト削除

座標系補助関数

toLocalCoordinates(layer, x, y) : グローバル座標 → ローカル座標

toGlobalCoordinates(layer, x, y) : ローカル座標 → グローバル座標

その他補助関数

レイヤー可視性切替 (showLayer, hideLayer)

レイヤー順序変更 (moveLayerUp, moveLayerDown)

👉 描画系（ブラシやペンのストローク描画処理）は入れない。
→ 将来ペンを改修するとき、座標系を巻き込まずに済む。

3. 技術的実装方針

従来型スクリプト読み込みを維持

layer-utils.js では window.LayerUtils にユーティリティ関数をまとめる

layer-system.js 内で LayerUtils.xxx() を利用する構造にする

index.html での <script> 順序は要調整：

layer-utils.js → layer-system.js の順でロード

他ファイル（core-engine.js, animation-system.js 等）は改修不要

4. 想定されるメリット

軽量化: layer-system.js が約20〜30%縮小し、責務が明確化

AI改修効率:

レイヤー基盤とユーティリティの切り口が明確なので「座標計算を直して」「レイヤークリア処理を追加して」といった依頼がしやすい

ペンを改修する際にも、ユーティリティを経由すれば座標系に直接触れなくて済む

拡張性: 今後 GIF やアニメーション機能でレイヤー操作を増やしても、ユーティリティに追加するだけで済む

5. 将来展望（ペン改修時の影響）

ペンやブラシを改修するとき、描画処理はペン側のファイルに残す。

レイヤー操作や座標変換はすべて LayerUtils 経由にすることで、座標系を誤って壊すリスクを減らす。

もし描画共通処理が増えたら、その時点で draw-basic.js のように別ユーティリティを作り、責務をさらに分割。

6. 結論

座標系直結のコードは layer-system.js に残す

レイヤー操作ユーティリティは layer-utils.js に切り出す

描画処理はペン側に留める（将来必要なら draw-basic.js へ分離）

この分割により、AI 改修時の可視性・保守性が向上し、座標系を巻き込むリスクを最小化できる。

📌 これを「第1段階の分割計画」として進めておけば、今後の GIF/アニメ拡張にも耐えやすくなります。

質問です：
この計画を実際に落とし込む形で、layer-utils.js の雛形コード（中身は clearLayer, toLocalCoordinates など最低限）を書きましょうか？