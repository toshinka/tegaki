# お絵かきツール改修・再分割計画書



### 以前の分割で発生してた主要問題
1. **キャンバス表示されない** - PixiJS初期化・DOM連携の断絶
2. **レイヤーパネル機能変更** - UIパネル連携の破綻
3. **API境界の混乱** - モジュール境界の曖昧性
4. **名前競合・二重定義** - 同名関数・変数の重複
5. **非モジュール環境でのモジュール的記述** - ESMではない環境での静的メソッド使用

### 根本原因
- **段階的分割による設計債務の蓄積**
- **互換性維持のための重複実装**
- **API境界設計の不徹底**
- **Core-Runtime統合の未完成**


#### 目的
- AIからの見通し・改修性が最大化
- 設計債務の完全除去
- 明確なAPI境界確立
- PixiJS v8.13完全対応

#### 作業期間
- 2-3日（AI改修想定）


---

## 📋：完全再構築計画

### Phase 1: コア設計（Day 1）

#### 1.1 段階的フォルダ構造（AI改修最適化）
```
/v8.13_CleanRefactor/
├── index.html              # エントリーポイント（簡潔化）
├── config.js               # 設定統合
├── coordinate.js           # 座標系統合（単独）
├── ui-panels.js            # UI統合（単独・大きめOK）
├── core-runtime.js         # PixiJS+Event+Runtime統合
├── camera-system.js        # カメラ制御（Phase2で分離）
├── layer-system.js         # レイヤー管理（Phase3で分離）
└── drawing-clipboard.js    # 描画+クリップボード統合
```

**分割段階戦略：**
- **Phase1**: core-runtime.js（PixiJS+Events+基本Runtime）
- **Phase2**: camera-system.js分離
- **Phase3**: layer-system.js分離  
- **Phase4**: drawing-clipboard.js分離

#### 1.2 API設計原則
```javascript
// 明確なAPI境界
window.TegakiRuntime = {
    // Core API
    init: () => Promise<void>,
    
    // System API
    camera: CameraAPI,
    layers: LayerAPI,
    drawing: DrawingAPI,
    clipboard: ClipboardAPI,
    
    // Event API
    on: (event, callback) => void,
    off: (event, callback) => void,
    
    // Debug API
    debug: DebugAPI
}
```

### Phase 2: 段階的システム実装（Day 1-2）

#### 2.1 統合コアランタイム（最優先）
```javascript
// core-runtime.js - PixiJS+Events+Runtime統合版
class TegakiRuntime {
    constructor() {
        this.pixiApp = null;
        this.eventBus = new Map(); // シンプルなEvent実装
        this.systems = {};
        this.coordinate = null;
    }
    
    async init(config) {
        // PixiJS初期化（統合）
        this.pixiApp = new PIXI.Application();
        await this.pixiApp.init({
            width: config.screen.width,
            height: config.screen.height,
            backgroundAlpha: 0,
            resolution: 1,
            antialias: true,
            eventMode: 'static'
        });
        
        // DOM統合
        const container = document.getElementById('drawing-canvas');
        container.appendChild(this.pixiApp.canvas);
        
        // 座標系初期化（coordinate.jsから取得）
        this.coordinate = new CoordinateSystem(this.pixiApp);
        
        return this;
    }
    
    // シンプルEvent実装
    on(event, callback) {
        if (!this.eventBus.has(event)) this.eventBus.set(event, []);
        this.eventBus.get(event).push(callback);
    }
    
    emit(event, data) {
        if (this.eventBus.has(event)) {
            this.eventBus.get(event).forEach(cb => cb(data));
        }
    }
}
```

#### 2.2 UI統合（大きめファイル許容）
```javascript
// ui-panels.js - UI統合版（400-500行OK）
class UIManager {
    constructor(runtime) {
        this.runtime = runtime;
        this.layerPanel = null;
        this.transformPanel = null;
        this.toolPanel = null;
        this.setupAllPanels();
    }
    
    setupAllPanels() {
        this.setupLayerPanel();
        this.setupTransformPanel();
        this.setupToolPanel();
        this.setupKeyboardShortcuts();
    }
    
    // レイヤーパネル、変形パネル、ツールパネル全部ここに統合
    // 段階的分離時の定義崩れを防ぐため
}
```

#### 2.3 段階的システム分離計画

**Phase2A: CameraSystem分離**
```javascript
// camera-system.js（既存から改修）
// core-runtime.jsから呼び出される形に変更
```

**Phase2B: LayerSystem分離**  
```javascript
// layer-system.js（既存から改修）
// camera-system.jsと連携する形に変更
```

**Phase2C: Drawing+Clipboard統合**
```javascript
// drawing-clipboard.js
// 描画とクリップボードは密結合のため統合保持
```

### Phase 3: UI統合（Day 2-3）

#### 3.1 UIパネル統合
```javascript
// panels.js - UIパネル完全版
class UIManager {
    constructor(runtime) {
        this.runtime = runtime;
        this.panels = new Map();
        this.setupLayerPanel();
        this.setupToolPanel();
        this.setupTransformPanel();
    }
    
    setupLayerPanel() {
        const panel = new LayerPanel(this.runtime.layers);
        this.panels.set('layers', panel);
        
        // レイヤーシステムとの連携
        this.runtime.on('layer-created', (data) => {
            panel.addLayerItem(data);
        });
    }
}
```

#### 3.2 変形パネル（Vキー対応）
```javascript
// transform.js - 変形UI完全版
class TransformPanel {
    constructor(layerSystem) {
        this.layerSystem = layerSystem;
        this.panel = document.getElementById('layer-transform-panel');
        this.visible = false;
        this.setupSliders();
        this.setupKeyboard();
    }
    
    show() {
        this.visible = true;
        this.panel.classList.add('show');
        this.updateValues();
    }
    
    hide() {
        this.visible = false;
        this.panel.classList.remove('show');
    }
}
```

### Phase 4: 統合テスト・UI連携（Day 3）

#### 4.1 統合ランタイム
```javascript
// runtime.js - 統合ランタイム
class TegakiRuntime {
    constructor() {
        this.pixiApp = null;
        this.coordinate = null;
        this.eventBus = new EventBus();
        this.systems = {};
        this.ui = null;
    }
    
    async init(config) {
        // Phase 1: PixiJS初期化
        this.pixiApp = await PixiApp.create(config);
        document.getElementById('drawing-canvas').appendChild(this.pixiApp.canvas);
        
        // Phase 2: 座標系初期化
        const worldContainer = new PIXI.Container();
        this.pixiApp.stage.addChild(worldContainer);
        this.coordinate = new CoordinateSystem(this.pixiApp, worldContainer);
        
        // Phase 3: システム初期化
        this.systems.camera = new CameraSystem(this.coordinate, this.eventBus);
        this.systems.layers = new LayerSystem(this.coordinate, this.eventBus);
        this.systems.drawing = new DrawingSystem(this.coordinate, this.systems.layers);
        
        // Phase 4: UI初期化
        this.ui = new UIManager(this);
        
        // Phase 5: 初期レイヤー作成
        const bgId = this.systems.layers.createLayer('背景', true);
        const layer1Id = this.systems.layers.createLayer('レイヤー1');
        this.systems.layers.setActive(layer1Id);
    }
}
```

## 🎯 実装優先順位

### 最優先（Day 1）
1. **PixiJS初期化の確実性確保**
2. **座標系の統合・簡潔化**
3. **基本的なキャンバス表示**

### 高優先（Day 2）
4. **レイヤーシステム完全刷新**
5. **描画エンジン統合**
6. **基本的なレイヤーパネル**

### 中優先（Day 2-3）
7. **変形パネル（Vキー）**
8. **カメラ制御統合**
9. **クリップボード機能**

### 低優先（Day 3）
10. **サムネイル生成**
11. **詳細UI調整**

## 🚀 開発方針

### コード品質原則
1. **単一責任原則** - 1クラス1責務
2. **明確なAPI境界** - パブリック/プライベートの明確化
3. **エラー無隠蔽** - フェイルファスト
4. **フォールバック禁止** - 曖昧な動作排除

### AI改修最適化
1. **短いファイル** - 1ファイル200行以下
2. **明確な命名** - 機能が名前から推測可能
3. **コメントは最小限** - 自己説明的コード
4. **デバッグフレンドリー** - console.logではなくthrow

### テスト戦略
1. **段階的統合** - システムごとの動作確認
2. **UIインタラクション** - キー・マウス操作の動作確認
3. **レイヤー操作** - 作成・削除・変形の動作確認

## 📊 見積もり・リスク

### 時間見積もり（AI改修）
- **Phase 1**: 4-6時間（コア設計・PixiJS初期化）
- **Phase 2**: 8-12時間（システム実装）
- **Phase 3**: 6-8時間（UI統合）
- **Phase 4**: 2-4時間（統合テスト）
- **合計**: 20-30時間（2-3日）

### 主要リスク
1. **PixiJS v8.13 API変更** - 公式ドキュメント確認必要
2. **レイヤー変形の複雑性** - 座標変換の精度
3. **UI連携の複雑性** - DOM操作とPixiJSの協調

### リスク軽減策
1. **最小機能で動作確認** - 段階的機能追加
2. **既存UIの最大限活用** - HTML/CSS流用
3. **デバッグ情報の充実** - 状態可視化

## 🏁 完了条件

### 必須機能
- [x] キャンバス表示
- [x] レイヤー作成・削除・選択
- [x] ベクターペン描画
- [x] レイヤーパネル表示・操作
- [x] 基本的なカメラ制御

### 目標機能
- [x] レイヤー変形（V+ドラッグ）
- [x] 変形パネル表示
- [x] コピー&ペースト
- [x] サムネイル表示

---

## 💡 結論・推奨事項

**完全再構築（戦略A）を強く推奨**

### 理由
1. **改修効率**: 既存コードの解析・修正より新規作成の方が効率的
2. **品質保証**: 設計債務・技術債務の完全除去
3. **AI可読性**: クリーンなアーキテクチャでAI改修が容易
4. **将来性**: 拡張性・メンテナンス性の確保

### 次回作業時の指示
```
「戦略A：完全再構築でお絵かきツールを作り直してください。
Phase1から順次実装し、各段階で動作確認を行ってください。
既存のHTML/CSS UIは最大限流用し、JavaScript部分のみ完全刷新してください。」
```