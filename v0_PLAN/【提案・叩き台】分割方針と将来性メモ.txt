```markdown
# 分割方針と将来性メモ

## 基本方針
- **index.html + main.js の二分割**をコアとする。
- **main.js は AI 改修の中枢**として一本にまとめて維持する。
- 外部化しても AI 改修に支障がない補助要素は **サテライトファイル**として分冊。

---

## ファイル構成案

### 1. index.html
- 役割：UIの土台、DOM要素、Canvas配置、スクリプト読込。
- 将来性：
  - UIレイアウト変更や2窓連携のビュー分離を吸収。
  - CSSや外部ライブラリの差し替えもここで統制可能。

### 2. main.js
- 役割：PixiJSベースの描画／レイヤー管理／ツールロジックの中枢。
- 将来性：
  - 非破壊ベクター保持、キャッシュ、アニメ化、GIF出力、ボーン変形の基盤をここに集約。
  - Live2D/Spine化の際も、**データ構造をこのファイルで一元管理**することで互換性を担保。

### 3. config.js（サテライト）
- 役割：定数、キャンバスサイズ、DPI設定、ツールのデフォルト値。
- 将来性：
  - デバイスごとの最適化や将来のエクスポート設定を柔軟に変更可能。
  - AIは main.js を読むだけでよく、config.js は値を確認すれば済む。

### 4. assets.js（サテライト）
- 役割：アイコン定義、テーマカラー、外部リソースの参照。
- 将来性：
  - スキン変更や国際化対応の拡張。
  - アニメーション用の外部パーツ管理への流用も可能。

### 5. i18n.js（サテライト）
- 役割：国際化文字列、UI文言辞書。
- 将来性：
  - 海外対応や2窓連携ツールでの統一表記に利用。
  - AI改修時は触る必要が少ないため、安全に外出し可能。

### 6. network.js（将来のサテライト）
- 役割：2窓連携やサーバ連携（WebSocket/RTC）専用。
- 将来性：
  - 将来的に動画ツールと描画ツールを別プロセス化した際の通信モジュールに昇格。
  - 単独で扱えるため、AIは main.js と独立して修正できる。

---

## 将来の進化ステージとファイル対応

### ステージ1：描画ツール強化
- main.js で非破壊ベクター保持とGIF出力実装。
- config.js でエクスポート解像度やFPSを調整可能にする。

### ステージ2：GIFアニメツール化
- main.js に Timeline/Frame 管理を追加。
- i18n.js にアニメーションUI文言を追加。

### ステージ3：2窓化連携（描画 + アニメ）
- network.js を追加し、両ツール間で JSON データをやり取り。
- index.html を2種類に分岐（draw.html, animate.html など）。

### ステージ4：Live2D/Spine的アニメ化
- main.js に Mesh/Bone 管理を追加。
- assets.js でモデルデータやテクスチャアトラスを参照。
- network.js を用いて複数アプリケーション間でモデルデータを共有。

---

## まとめ
- **main.js を一元管理の核**とし、AIが常に把握できるようにする。
- **補助的リソースや設定はサテライト化**し、人間・AI双方が安全に参照できる形に分割。
- RuleBook_v7 のサテライト方式と整合し、GIF化 → 2窓化 → Live2D/Spine化のロードマップを支援できる。
```
