================================================================================
Phase 2 診断結果と改修計画書
================================================================================
診断日時: 2025-10-05
対象: Phase 1修正後の残存問題

================================================================================
1. 現象の確認
================================================================================

[報告された問題]
✗ Ctrl+Z/Y でCUT移動が発生する（本来はUndo/Redo）
✗ 方向キー←→でのCUT移動が一つ飛ばしになることがある（不安定）
✗ キャンバスとレイヤーパネルが表示されない（Phase 1で修正したはずが未解決）

[正常動作している部分]
✓ 方向キーの左右の方向性は修正済み
✓ タイムラインは表示される

================================================================================
2. 根本原因の特定
================================================================================

[原因A: AnimationSystemのメソッド名不一致]

**問題:**
index.html で呼び出しているメソッド名と、実際のメソッド名が異なる

index.html (修正版):
```javascript
// ←: 前のCUTへ移動
window.animationSystem.goToNextCut();  // ← このメソッドは存在しない

// →: 次のCUTへ移動
window.animationSystem.goToPreviousCut();  // ← このメソッドは存在しない
```

animation-system.js (実際):
```javascript
goToPreviousFrame() { ... }  // ← 正しいメソッド名
goToNextFrame() { ... }      // ← 正しいメソッド名
```

**影響:**
- 方向キーを押してもメソッドが見つからず、エラーが発生
- エラーがキャッチされずに無視され、「一つ飛ばし」のような不安定な動作に見える
- 実際には何も実行されていない可能性が高い

[原因B: Ctrl+Z/YがCUT移動してしまう問題]

**問題の所在を特定:**
index.html の統合キーハンドラを確認すると、Ctrl+Z/Y の処理は正しく実装されている。
しかし、他の場所（layer-system.js や core-engine.js）でも方向キーやCtrl+Z/Yを
処理している可能性がある。

**確認が必要な箇所:**
1. layer-system.js: _setupLayerOperations() メソッド
   - 方向キーの処理が重複している可能性
2. core-engine.js: UnifiedKeyHandler
   - Phase 1-Cで削除したはずだが、他の処理が残っている可能性
3. animation-system.js: 独自のキーハンドラ
   - 独立したキーイベントリスナーがある可能性

[原因C: レイヤーパネル・キャンバスが表示されない]

**Phase 1で修正したはずが...**
window.drawingApp.layerManager の構造は修正済みのはず。
しかし、まだ表示されないということは：

**可能性1: ファイルの置き換えミス**
- 修正した index.html が正しく配置されていない
- ブラウザキャッシュが残っている

**可能性2: 初期化タイミングの問題**
- window.drawingApp.layerManager は存在するが、UIの初期化が失敗している
- updateLayerPanelUI() が呼ばれていない

**可能性3: StateManagerの未初期化**
- LayerSystemが StateManager に依存している
- StateManager が正しく初期化されていない場合、レイヤーパネルが空になる

================================================================================
3. 詳細診断
================================================================================

[A. メソッド名不一致の影響範囲]

影響を受けるファイル:
- index.html: 統合キーハンドラ（←→の処理）

修正内容:
```javascript
// 修正前（間違い）
window.animationSystem.goToNextCut();
window.animationSystem.goToPreviousCut();

// 修正後（正しい）
window.animationSystem.goToNextFrame();
window.animationSystem.goToPreviousFrame();
```

[B. キーイベントの重複処理]

**layer-system.js の問題:**
行1188-1215: _setupLayerOperations() 内で方向キーを処理

```javascript
case 'gifPrevFrame':
    if (!this.vKeyPressed && !e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {
        if (this.animationSystem?.goToPreviousFrame) {
            this.animationSystem.goToPreviousFrame();
        }
        e.preventDefault();
    }
    break;
```

**問題:**
- index.html の統合キーハンドラと重複している
- 両方が実行されるため、「二重実行」→「一つ飛ばし」に見える

**core-engine.js: UnifiedKeyHandler の残存処理:**
Phase 1-Cで削除したはずだが、以下が残っている可能性：

```javascript
case 'gifPrevFrame':
case 'gifNextFrame':
    // この処理が残っている場合、三重実行になる
```

[C. レイヤーパネル未表示の原因]

**Console確認コマンド:**
```javascript
// Step 1: window.drawingAppの構造確認
console.log('drawingApp:', window.drawingApp);
console.log('layerManager:', window.drawingApp?.layerManager);
console.log('typeof:', typeof window.drawingApp?.layerManager);

// Step 2: StateManager確認
console.log('StateManager:', window.StateManager);
console.log('stateManager instance:', window.drawingApp?.layerManager?.stateManager);

// Step 3: レイヤーパネル要素確認
console.log('layer-list element:', document.getElementById('layer-list'));
console.log('layer-panel-container:', document.getElementById('layer-panel-container'));

// Step 4: LayerSystemの初期化状態確認
console.log('currentCutContainer:', window.drawingApp?.layerManager?.currentCutContainer);
console.log('layers:', window.drawingApp?.layerManager?.getLayers());
```

**期待される結果:**
- layerManager: TegakiLayerSystem オブジェクト
- stateManager: StateManager インスタンス（または null）
- currentCutContainer: PIXI.Container オブジェクト
- layers: 配列（少なくとも1つのレイヤー）

**問題のパターン:**
1. layerManager が undefined → Phase 1-A修正が未反映
2. stateManager が undefined → StateManagerの初期化失敗
3. currentCutContainer が null → AnimationSystemとの連携失敗
4. layers が空配列 → 初期レイヤーが作成されていない

================================================================================
4. 改修計画
================================================================================

[Phase 2-A: メソッド名修正（CRITICAL）]

優先度: 🔥 CRITICAL
対象ファイル: index.html

修正箇所:
行113-124: 方向キーのCUT移動処理

```javascript
// 修正前
if (e.code === 'ArrowLeft' && !e.ctrlKey && !e.shiftKey && !e.altKey) {
    if (window.animationSystem?.goToNextCut) {
        window.animationSystem.goToNextCut();  // ← 存在しないメソッド
    }
    e.preventDefault();
    return;
}

if (e.code === 'ArrowRight' && !e.ctrlKey && !e.shiftKey && !e.altKey) {
    if (window.animationSystem?.goToPreviousCut) {
        window.animationSystem.goToPreviousCut();  // ← 存在しないメソッド
    }
    e.preventDefault();
    return;
}

// 修正後
if (e.code === 'ArrowLeft' && !e.ctrlKey && !e.shiftKey && !e.altKey) {
    if (window.animationSystem?.goToNextFrame) {
        window.animationSystem.goToNextFrame();  // ← 正しいメソッド名
    }
    e.preventDefault();
    return;
}

if (e.code === 'ArrowRight' && !e.ctrlKey && !e.shiftKey && !e.altKey) {
    if (window.animationSystem?.goToPreviousFrame) {
        window.animationSystem.goToPreviousFrame();  // ← 正しいメソッド名
    }
    e.preventDefault();
    return;
}
```

期待される結果:
✓ 方向キー←→が安定して動作
✓ 一つ飛ばしの問題が解消

[Phase 2-B: キーイベント重複削除（CRITICAL）]

優先度: 🔥 CRITICAL
対象ファイル: layer-system.js

修正箇所:
行1188-1330: _setupLayerOperations() メソッド

**方針:**
layer-system.js からは以下のキー処理を完全削除：
- Ctrl+Z / Ctrl+Y（Undo/Redo）
- 方向キー←→（修飾キーなし）でのCUT移動
- 方向キー↑↓（修飾キーなし）でのレイヤー階層移動

**残すべき処理:**
- V キー（レイヤー移動モード）
- V キー押下中の方向キー（レイヤー位置移動・回転・拡縮）
- V キー押下中の F キー（反転）

修正内容:
```javascript
_setupLayerOperations() {
    document.addEventListener('keydown', (e) => {
        const keyConfig = window.TEGAKI_KEYCONFIG_MANAGER;
        if (!keyConfig) return;
        
        const action = keyConfig.getActionForKey(e.code, {
            vPressed: this.vKeyPressed,
            shiftPressed: e.shiftKey
        });
        
        if (!action) return;
        
        switch(action) {
            // === Phase 2-B: 以下のケースを削除 ===
            // case 'gifPrevFrame':  // ← 削除
            // case 'gifNextFrame':  // ← 削除
            // case 'layerUp':       // ← 削除
            // case 'layerDown':     // ← 削除
            
            // === 残す処理 ===
            case 'layerMode':  // V キー
                if (!e.ctrlKey && !e.altKey && !e.metaKey) {
                    if (!this.vKeyPressed) {
                        this.enterLayerMoveMode();
                    }
                    e.preventDefault();
                }
                break;
            
            // V キー押下中の処理のみ残す
            case 'layerMoveUp':
            case 'layerMoveDown':
            case 'layerMoveLeft':
            case 'layerMoveRight':
            case 'layerScaleUp':
            case 'layerScaleDown':
            case 'layerRotateLeft':
            case 'layerRotateRight':
            case 'horizontalFlip':
                // これらは this.vKeyPressed === true の時のみ動作
                // 処理内容は変更なし
                break;
        }
    });
    
    // ... 以降のコードは変更なし
}
```

期待される結果:
✓ キーイベントの重複実行が解消
✓ Ctrl+Z/Y がUndo/Redoのみになる
✓ 方向キーが安定動作

[Phase 2-C: レイヤーパネル表示問題の診断と修正（HIGH）]

優先度: 🔥 HIGH
対象: 複数ファイル

**ステップ1: ブラウザキャッシュクリア**
1. Ctrl+Shift+Delete でキャッシュクリア
2. ハードリロード（Ctrl+Shift+R）
3. DevToolsのApplication → Clear storage → Clear site data

**ステップ2: Console診断**
以下のコマンドをConsoleで実行：

```javascript
// === 診断スクリプト ===
console.group('🔍 Phase 2 診断');

// A. window.drawingApp確認
console.log('A. drawingApp:', window.drawingApp);
console.log('   layerManager:', window.drawingApp?.layerManager);
console.log('   typeof:', typeof window.drawingApp?.layerManager);

// B. StateManager確認
console.log('B. StateManager class:', window.StateManager);
console.log('   stateManager instance:', window.drawingApp?.layerManager?.stateManager);

// C. AnimationSystem確認
console.log('C. animationSystem:', window.animationSystem);
console.log('   getCurrentCut:', typeof window.animationSystem?.getCurrentCut);

// D. レイヤー確認
console.log('D. currentCutContainer:', window.drawingApp?.layerManager?.currentCutContainer);
console.log('   layers count:', window.drawingApp?.layerManager?.getLayers()?.length);
console.log('   layers:', window.drawingApp?.layerManager?.getLayers());

// E. DOM要素確認
console.log('E. layer-list:', document.getElementById('layer-list'));
console.log('   layer-panel-container:', document.getElementById('layer-panel-container'));

// F. 初期化状態確認
console.log('F. initialCutCreated:', window.animationSystem?.initialCutCreated);
console.log('   hasInitialized:', window.animationSystem?.hasInitialized);

console.groupEnd();
```

**ステップ3: 問題パターン別の修正**

**パターン1: layerManager が undefined**
→ index.html の Phase 1-A修正が反映されていない
→ ファイルを再配置し、キャッシュクリア

**パターン2: stateManager が null**
→ StateManagerが初期化されていない
→ state-manager.js の読み込み確認

**パターン3: layers が空配列**
→ 初期レイヤーが作成されていない
→ animation-system.js の createInitialCutIfNeeded() が失敗している

修正方法（パターン3の場合）:
animation-system.js の初期化タイミングを調整

**パターン4: DOM要素が null**
→ HTML構造の問題
→ index.html の layer-panel-container 確認

[Phase 2-D: StateManager統合確認（MEDIUM）]

優先度: 🟡 MEDIUM
対象: state-manager.js, layer-system.js

LayerSystemが StateManager に正しく依存しているか確認：

```javascript
// layer-system.js: constructor
constructor(pixiApp, config, stateManager, eventBus) {
    this.stateManager = stateManager || null;  // ← これが null の場合
}
```

**問題:**
StateManager が渡されていない場合、レイヤー操作が全て失敗する

**修正方針:**
1. CoreEngine で StateManager を初期化
2. LayerSystem に StateManager を渡す

修正箇所: core-engine.js

```javascript
class CoreEngine {
    constructor(app) {
        // ... 既存コード
        
        // StateManager初期化
        this.stateManager = window.StateManager ? new window.StateManager() : null;
        
        // LayerSystem初期化時に渡す
        this.layerSystem = new window.TegakiLayerSystem(
            app,
            CONFIG,
            this.stateManager,  // ← 追加
            this.eventBus
        );
    }
}
```

================================================================================
5. 実装順序
================================================================================

[最優先: Phase 2-A]
1. index.html: goToNextCut → goToNextFrame に修正
2. index.html: goToPreviousCut → goToPreviousFrame に修正
   → 方向キーの安定動作を確保

[次優先: Phase 2-B]
3. layer-system.js: _setupLayerOperations() から重複処理削除
   → キーイベントの三重実行を防止

[診断: Phase 2-C]
4. ブラウザでConsole診断を実施
5. 問題パターンを特定
6. パターン別の修正を適用

[補足: Phase 2-D]
7. StateManager統合確認（必要に応じて）

================================================================================
6. 検証項目
================================================================================

[Phase 2-A完了後]
□ 方向キー← でCUTが右に移動（安定）
□ 方向キー→ でCUTが左に移動（安定）
□ 一つ飛ばしの現象が発生しない
□ Console にエラーが出ない

[Phase 2-B完了後]
□ Ctrl+Z でUndo（CUT移動しない）
□ Ctrl+Y でRedo（CUT移動しない）
□ 方向キー←→ が一度だけ実行される
□ 方向キー↑↓ でレイヤー階層移動（一度だけ）

[Phase 2-C完了後]
□ レイヤーパネルが画面右側に表示される
□ レイヤー追加ボタン（+）が表示される
□ 初期レイヤーが1つ表示される
□ キャンバスが中央に表示される
□ ペンで描画できる

================================================================================
7. Console検証コマンド（修正後）
================================================================================

```javascript
// === 修正確認スクリプト ===
console.group('✅ Phase 2 修正確認');

// 1. メソッド存在確認
console.log('1. goToPreviousFrame:', typeof window.animationSystem?.goToPreviousFrame);
console.log('   goToNextFrame:', typeof window.animationSystem?.goToNextFrame);
console.log('   goToPreviousCut:', typeof window.animationSystem?.goToPreviousCut);  // undefined であるべき
console.log('   goToNextCut:', typeof window.animationSystem?.goToNextCut);  // undefined であるべき

// 2. LayerManager確認
console.log('2. layerManager:', typeof window.drawingApp?.layerManager);
console.log('   stateManager:', window.drawingApp?.layerManager?.stateManager);

// 3. レイヤー確認
console.log('3. layers:', window.drawingApp?.layerManager?.getLayers());

// 4. DOM確認
console.log('4. layer-list:', document.getElementById('layer-list'));
console.log('   innerHTML length:', document.getElementById('layer-list')?.innerHTML.length);

console.groupEnd();
```

**期待される出力:**
```
✅ Phase 2 修正確認
  1. goToPreviousFrame: "function"
     goToNextFrame: "function"
     goToPreviousCut: "undefined"
     goToNextCut: "undefined"
  2. layerManager: "object"
     stateManager: StateManager {...}
  3. layers: [Container {...}]
  4. layer-list: <div id="layer-list">...</div>
     innerHTML length: > 0
```

================================================================================
8. リスク分析
================================================================================

[Phase 2-A: メソッド名修正]
リスク: 🟢 LOW
理由: 単純な名前変更のみ

[Phase 2-B: キーイベント重複削除]
リスク: 🟡 MEDIUM
理由: layer-system.js のキーハンドラを部分削除
対策: V キー関連の処理は必ず残す

[Phase 2-C: レイヤーパネル表示]
リスク: 🟡 MEDIUM
理由: 根本原因が不明確（診断が必要）
対策: Console診断で原因を特定してから修正

[Phase 2-D: StateManager統合]
リスク: 🟢 LOW
理由: 既存の設計に従った修正

================================================================================
9. 完了判定基準
================================================================================

[Phase 2完了の条件]
✓ 方向キー←→が安定してCUT移動（一つ飛ばしなし）
✓ Ctrl+Z/Y がUndo/Redoのみ（CUT移動しない）
✓ レイヤーパネルが表示される
✓ キャンバスが表示される
✓ 描画機能が動作する
✓ Console にエラーが出ない

================================================================================
10. 次のステップ
================================================================================

Phase 2完了後:
1. 新規レイヤー/CUT作成のアンドゥ動作を検証
2. CUTナビゲーション◀▶の動作確認
3. 全体的な安定性テスト

================================================================================
以上
================================================================================