 ✅ config.js (P/E+ドラッグ機能対応版) loaded
    🆕 tools: ペン/消しゴムのデフォルト設定追加
    🆕 sizeSlots: サイズスロット設定追加
    🆕 dragAdjustment: ドラッグ調整感度設定追加
    🆕 dragAdjustment.visual: 視覚フィードバック設定追加
 🧭 CoordinateSystem: システム統合改修版 初期化
 ✅ coordinate-system.js loaded (システム統合改修版)
 🔧 改修完了項目:
   🆕 applyLayerTransform(): 統一レイヤー変形API
   🆕 normalizeTransform(): 変形データ正規化
   🆕 combineTransforms(): 変形合成
   🆕 screenToWorld/worldToScreen(): キャッシュ対応座標変換
   🆕 localToWorld/worldToLocal(): レイヤー座標変換
   🆕 getLayerBounds(): 統一境界取得
   🆕 distance/angle/normalizeAngle(): 数学関数統合
   🆕 normalizeVector/dotProduct/crossProduct(): ベクトル計算
   🆕 diagnoseReferences(): システム統合診断
   🆕 runTransformTests(): 座標変換テスト
   🆕 runPerformanceTest(): パフォーマンス測定
   🔧 EventBus完全統合・キャッシュシステム
   🔧 LayerSystem/CameraSystem/AnimationSystem参照統合
   🔧 座標系混在問題・API断片化解消
   ✅ PixiJS v8.13 完全対応
   ✅ システム間連携強化
 ✅ data-models.js (Phase 2: meshVertices対応) loaded
 ✅ system/event-bus.js loaded
 ✅ batch-api.js (Phase 6: History統合版) loaded
 ✅ tool-size-manager.js v3.2 loaded (強制EventBus統合版)
 ✅ system/settings-manager.js loaded
    - 責務: 設定の永続化・デフォルト管理
    - SOLID原則準拠: 単一責任
    - EventBus統合: 設定変更の購読と通知
 ✅ camera-system.js (Phase 4.2: 拡縮上下修正版) loaded successfully
    - 🔥 Space+Shift+ドラッグ: 上=拡大、下=縮小に修正
    - 🔥 Space+Shift+↑: 拡大、Space+Shift+↓: 縮小に修正
 ✅ layer-transform.js loaded
 ✅ layer-system.js (GPT5案修正完全版) loaded
 ✅ drawing-clipboard.js Phase4改修版+確定イベント loaded
    - ✅ CTRL+V behavior: overwrite active layer
    - ✅ Commit events: paste:commit, operation:commit
    - ✅ Thumbnail auto-update on paste
 ✅ history.js (Phase 2: EventBus修正版) loaded
 ✅ animation-system.js (Phase 4.1: CUT自動採番対応版) loaded
 🔧 [BrushSettings] Starting registration...
 ✅ [BrushSettings] Created window.TegakiDrawing namespace
 ✅ [BrushSettings] Registered successfully:
    - window.TegakiDrawing.BrushSettings: true
    - window.BrushSettings: true
    - globalThis.BrushSettings: true
 ✅ brush-settings.js loaded completely
 ✅ drawing-engine.js v7.8 loaded (強制EventBus統合版)
 ✅ export-manager.js loaded
 ✅ png-exporter.js (単一フレーム専用・プレビュー対応) loaded
 ✅ apng-exporter.js (PixiJS v8.13完全対応版) loaded
 ✅ gif-exporter.js (PixiJS v8.13完全対応版) loaded
 ✅ ui/slider-utils.js loaded
    - 責務: スライダーUIの統一実装
    - DRY原則: settings-popup.js と ui-panels.js で共有
    - API: createSlider() / createSimpleSlider()
 ✅ drag-visual-feedback.js loaded (カーソル追従改善)
 ✅ keyboard-handler.js loaded (P/E+ドラッグ修正版)
 ✅ timeline-ui.js (Phase 5.2: キー処理一元化版) loaded
    - 🔥 setupKeyboardShortcuts()を削除（キー処理はUnifiedKeyHandlerに一元化）
    - 🔥 goToPreviousCutSafe()とgoToNextCutSafe()はpublicメソッドとして維持
    - 🔥 togglePlayStop()もpublicメソッドとして維持
 ✅ core-initializer.js (P/E+ドラッグ対応版) loaded
 ✅ core-runtime.js v2.1 loaded
   ✅ Phase 12: PixiJS EventSystem統合
core-runtime.js:783   ✅ FederatedPointerEvent対応
core-runtime.js:784   ✅ stage.eventMode設定
core-runtime.js:785   ✅ 🆕 v2.1: 設定関連API追加
core-runtime.js:786      - setPressureCorrection()
core-runtime.js:787      - setSmoothing()
core-runtime.js:788      - setPressureCurve()
core-runtime.js:789      - getSettings()
core-runtime.js:790      - updateSettings()
core-runtime.js:791      - resetSettings()
core-runtime.js:792      - getSettingsManager()
core-runtime.js:793   ✅ window.startTegakiApp() registered
core-runtime.js:794   ✅ APNGExporter登録対応
core-runtime.js:795   ✅ 既存機能完全維持
core-engine.js:850 ✅ core-engine.js (GPT5案修正完全版) loaded
coordinate-system.js:63 🔗 CoordinateSystem EventBus integration configured
coordinate-system.js:47 ✅ CoordinateSystem initialized with canvas: 344x135
coordinate-system.js:757 🔄 CoordinateSystem auto-initialized
index.html:78 🚀 Starting application with P/E+Drag feature...
index.html:84 📦 Checking dependencies...
index.html:85   PIXI: true
index.html:86   TegakiDrawing: true
index.html:87   BrushSettings: true
index.html:88   ToolSizeManager: true
index.html:89   KeyboardHandler: true
drawing-clipboard.js:19 DrawingClipboard: Initializing...
drawing-clipboard.js:26 ✅ DrawingClipboard initialized (Phase4改修版 + 確定イベント)
coordinate-system.js:75 🔗 CameraSystem reference set in CoordinateSystem
coordinate-system.js:70 🔗 LayerSystem reference set in CoordinateSystem
coordinate-system.js:80 🔗 AnimationSystem reference set in CoordinateSystem
core-runtime.js:51 === CoreRuntime Phase 12: PixiJS EventSystem統合版 初期化開始 ===
core-runtime.js:203 ✅ CUT作成: CUT1 (344x135)
core-runtime.js:231 🔄 CUT切替: CUT1
core-runtime.js:101 ✅ PixiJS EventSystem設定完了
core-runtime.js:68 ✅ CoreRuntime 初期化完了（Phase 12対応）
index.html:97 ✅ Application ready!
index.html:98 📝 Usage:
index.html:99   - Press P + drag: Adjust pen size/opacity
index.html:100   - Press E + drag: Adjust eraser size/opacity
index.html:101   - Drag Left/Right: Change size
index.html:102   - Drag Up/Down: Change opacity
core-runtime.js:689 ✅ ExportSystem initialized (PNG/APNG/GIF/WebP)
/**
 * P/E+ドラッグ機能デバッグコマンド集 (改善版)
 * 
 * ブラウザのコンソールに貼り付けて実行してください
 */

window.debugPenDrag = {
    /**
     * 全体状況をチェック
     */
    checkAll() {
        console.log('=== P/E+ドラッグ システム状態 ===\n');
        
        // EventBus
        console.log('1. EventBus:');
        console.log('  存在:', !!window.TegakiEventBus);
        console.log('  リスナー数:', window.TegakiEventBus?._events ? 
            Object.keys(window.TegakiEventBus._events).length : 0);
        
        // ToolSizeManager
        console.log('\n2. ToolSizeManager:');
        const tsm = window.toolSizeManager;
        if (tsm) {
            console.log('  存在: ✅');
            const info = tsm.getDebugInfo();
            console.log('  ペンサイズ:', info.penSize);
            console.log('  ペン不透明度:', info.penOpacity);
            console.log('  ドラッグ中:', !!info.dragState);
            console.log('  BrushSettings取得可:', info.brushSettings);
            if (info.brushSettingsDetails) {
                console.log('  現在のBrushSettings:', info.brushSettingsDetails);
            }
        } else {
            console.log('  存在: ❌');
        }
        
        // DrawingEngine
        console.log('\n3. DrawingEngine:');
        const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;
        if (de) {
            console.log('  存在: ✅');
            console.log('  settings:', !!de.settings);
            console.log('  currentTool:', de.currentTool);
            if (de.settings) {
                console.log('  settings.size:', de.settings.size);
                console.log('  settings.opacity:', de.settings.opacity);
            }
        } else {
            console.log('  存在: ❌');
        }
        
        // KeyboardHandler
        console.log('\n4. KeyboardHandler:');
        if (window.KeyboardHandler) {
            const state = window.KeyboardHandler.getDebugState?.();
            if (state) {
                console.log('  Pキー押下:', state.pKeyPressed);
                console.log('  Eキー押下:', state.eKeyPressed);
                console.log('  ドラッグ中:', state.isDragging);
                console.log('  アクティブツール:', state.activeTool);
            }
        }
        
        // DragVisualFeedback
        console.log('\n5. DragVisualFeedback:');
        const feedback = document.getElementById('drag-visual-feedback');
        console.log('  DOM要素:', !!feedback);
        console.log('  表示中:', feedback?.style.display !== 'none');
        
        console.log('\n=====================================');
    },
    
    /**
     * EventBusのリスナーを確認
     */
    checkEventListeners() {
        console.log('=== EventBus リスナー確認 ===\n');
        
        if (!window.TegakiEventBus?._events) {
            console.log('EventBus未初期化');
            return;
        }
        
        const events = window.TegakiEventBus._events;
        const targetEvents = [
            'tool:drag-size-start',
            'tool:drag-size-update',
            'tool:drag-size-end',
            'tool:size-opacity-changed',
            'brushSizeChanged',
            'brushOpacityChanged'
        ];
        
        targetEvents.forEach(evt => {
            const listeners = events[evt];
            console.log(`${evt}:`, listeners ? `${listeners.length}個` : '0個');
            if (listeners && listeners.length > 0) {
                console.log('  → リスナー登録済み ✅');
            }
        });
        
        console.log('\n=====================================');
    },
    
    /**
     * P/E+ドラッグのイベントフローをシミュレート
     */
    async simulateDrag(tool = 'pen', sizeChange = 10, opacityChange = 0.1) {
        console.log(`\n=== ${tool} ドラッグシミュレーション開始 ===`);
        
        if (!window.TegakiEventBus) {
            console.error('❌ EventBus が見つかりません');
            return;
        }
        
        const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;
        if (!de?.settings) {
            console.error('❌ DrawingEngine.settings が見つかりません');
            return;
        }
        
        const initialSize = de.settings.size;
        const initialOpacity = de.settings.opacity;
        
        console.log('初期値:', { size: initialSize, opacity: initialOpacity });
        
        // 1. ドラッグ開始
        console.log('\n1. tool:drag-size-start 発行...');
        window.TegakiEventBus.emit('tool:drag-size-start', {
            tool: tool,
            startSize: initialSize,
            startOpacity: initialOpacity
        });
        
        await this._wait(300);
        
        // 2. ドラッグ更新
        console.log('2. tool:drag-size-update 発行...');
        window.TegakiEventBus.emit('tool:drag-size-update', {
            tool: tool,
            deltaX: sizeChange / 0.1,  // 感度0.1で割る
            deltaY: -opacityChange / 0.002  // 感度0.002で割る
        });
        
        await this._wait(300);
        
        // 3. ドラッグ終了
        console.log('3. tool:drag-size-end 発行...');
        window.TegakiEventBus.emit('tool:drag-size-end');
        
        await this._wait(300);
        
        // 4. 結果確認
        const finalSize = de.settings.size;
        const finalOpacity = de.settings.opacity;
        
        console.log('\n結果:', { 
            size: finalSize, 
            opacity: finalOpacity 
        });
        
        const sizeChanged = Math.abs(finalSize - initialSize) > 0.1;
        const opacityChanged = Math.abs(finalOpacity - initialOpacity) > 0.01;
        
        console.log('\n変更検出:', {
            サイズ: sizeChanged ? '✅ 変更された' : '❌ 変更なし',
            不透明度: opacityChanged ? '✅ 変更された' : '❌ 変更なし'
        });
        
        if (sizeChanged && opacityChanged) {
            console.log('\n🎉 P/E+ドラッグ機能は正常に動作しています！');
        } else {
            console.log('\n⚠️ P/E+ドラッグ機能に問題がある可能性があります');
            console.log('   checkEventListeners() でリスナー登録を確認してください');
        }
        
        console.log('\n=====================================');
    },
    
    /**
     * 手動でサイズ変更をテスト
     */
    testDirectChange(size, opacity) {
        console.log(`\n=== 直接変更テスト (${size}px, ${opacity}) ===`);
        
        const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;
        if (!de?.settings) {
            console.error('❌ DrawingEngine.settings が見つかりません');
            return;
        }
        
        console.log('変更前:', {
            size: de.settings.size,
            opacity: de.settings.opacity
        });
        
        de.settings.setBrushSize(size);
        de.settings.setBrushOpacity(opacity);
        
        console.log('変更後:', {
            size: de.settings.size,
            opacity: de.settings.opacity
        });
        
        console.log('✅ 直接変更完了');
    },
    
    /**
     * 現在の設定を表示
     */
    showCurrent() {
        const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;
        if (!de) {
            console.error('❌ DrawingEngine が見つかりません');
            return;
        }
        
        console.log('=== 現在の設定 ===');
        console.log('ツール:', de.currentTool || 'unknown');
        if (de.settings) {
            console.log('サイズ:', de.settings.size);
            console.log('不透明度:', de.settings.opacity);
            console.log('色:', de.settings.color);
        }
    },
    
    /**
     * ツール切替テスト
     */
    switchTool(tool) {
        if (!['pen', 'eraser'].includes(tool)) {
            console.error('❌ ツールは "pen" または "eraser" を指定してください');
            return;
        }
        
        console.log(`\n=== ツール切替: ${tool} ===`);
        
        if (window.CoreRuntime?.api?.setTool) {
            window.CoreRuntime.api.setTool(tool);
            console.log('✅ CoreRuntime.api.setTool() で切替完了');
        } else {
            const de = window.coreEngine?.drawingEngine || window.drawingApp?.drawingEngine;
            if (de?.setTool) {
                de.setTool(tool);
                console.log('✅ DrawingEngine.setTool() で切替完了');
            } else {
                console.error('❌ ツール切替メソッドが見つかりません');
            }
        }
        
        this.showCurrent();
    },
    
    /**
     * 待機関数
     */
    _wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },
    
    /**
     * 自動診断実行
     */
    async runDiagnostics() {
        console.log('🔍 P/E+ドラッグ 自動診断開始\n');
        
        this.checkAll();
        console.log('\n');
        
        this.checkEventListeners();
        console.log('\n');
        
        await this.simulateDrag('pen', 5, 0.1);
        
        console.log('\n🔍 診断完了');
    }
};

// 使い方を表示
console.log(`
🔧 P/E+ドラッグ デバッグコマンド (改善版)

【推奨】まず自動診断を実行:
  debugPenDrag.runDiagnostics()

個別コマンド:
1. 全体状態確認
   debugPenDrag.checkAll()

2. EventBusリスナー確認
   debugPenDrag.checkEventListeners()

3. ドラッグシミュレーション
   debugPenDrag.simulateDrag('pen', 10, 0.1)
   debugPenDrag.simulateDrag('eraser', 15, 0.2)

4. 直接変更テスト
   debugPenDrag.testDirectChange(20, 0.9)

5. 現在の設定表示
   debugPenDrag.showCurrent()

6. ツール切替テスト
   debugPenDrag.switchTool('pen')
   debugPenDrag.switchTool('eraser')
`);
VM73:280 
🔧 P/E+ドラッグ デバッグコマンド (改善版)

【推奨】まず自動診断を実行:
  debugPenDrag.runDiagnostics()

個別コマンド:
1. 全体状態確認
   debugPenDrag.checkAll()

2. EventBusリスナー確認
   debugPenDrag.checkEventListeners()

3. ドラッグシミュレーション
   debugPenDrag.simulateDrag('pen', 10, 0.1)
   debugPenDrag.simulateDrag('eraser', 15, 0.2)

4. 直接変更テスト
   debugPenDrag.testDirectChange(20, 0.9)

5. 現在の設定表示
   debugPenDrag.showCurrent()

6. ツール切替テスト
   debugPenDrag.switchTool('pen')
   debugPenDrag.switchTool('eraser')

undefined
debugPenDrag.runDiagnostics()
 🔍 P/E+ドラッグ 自動診断開始

 === P/E+ドラッグ システム状態 ===

VM73:15 1. EventBus:
VM73:16   存在: true
VM73:17   リスナー数: 0
VM73:21 
2. ToolSizeManager:
VM73:24   存在: ✅
VM73:26   ペンサイズ: 20.425
VM73:27   ペン不透明度: 0.85
VM73:28   ドラッグ中: false
VM73:29   BrushSettings取得可: true
VM73:31   現在のBrushSettings: {size: 20.425, color: 0, opacity: 0.85, pressureCorrection: 1, smoothing: 0.5, …}
VM73:38 
3. DrawingEngine:
VM73:41   存在: ✅
VM73:42   settings: true
VM73:43   currentTool: pen
VM73:45   settings.size: 20.425
VM73:46   settings.opacity: 0.85
VM73:53 
4. KeyboardHandler:
VM73:57   Pキー押下: false
VM73:58   Eキー押下: false
VM73:59   ドラッグ中: false
VM73:60   アクティブツール: null
VM73:65 
5. DragVisualFeedback:
VM73:67   DOM要素: true
VM73:68   表示中: false
VM73:70 
=====================================
VM73:268 

VM73:77 === EventBus リスナー確認 ===

VM73:96 tool:drag-size-start: 0個
VM73:96 tool:drag-size-update: 0個
VM73:96 tool:drag-size-end: 0個
VM73:96 tool:size-opacity-changed: 0個
VM73:96 brushSizeChanged: 0個
VM73:96 brushOpacityChanged: 0個
VM73:102 
=====================================
VM73:271 

VM73:109 
=== pen ドラッグシミュレーション開始 ===
VM73:125 初期値: {size: 20.425, opacity: 0.85}
VM73:128 
1. tool:drag-size-start 発行...
Promise {<pending>}
VM73:138 2. tool:drag-size-update 発行...
VM73:148 3. tool:drag-size-end 発行...
VM73:157 
結果: {size: 25.425, opacity: 0.85}
VM73:165 
変更検出: {サイズ: '✅ 変更された', 不透明度: '❌ 変更なし'}
VM73:173 
⚠️ P/E+ドラッグ機能に問題がある可能性があります
VM73:174    checkEventListeners() でリスナー登録を確認してください
VM73:177 
=====================================
VM73:275 
🔍 診断完了
