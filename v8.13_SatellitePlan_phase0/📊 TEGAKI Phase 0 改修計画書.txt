# 📊 TEGAKI Phase 0 改修計画書
## Twin-Star System 座標系統一プロジェクト

---

### 🎯 Phase 0 目標
座標系の統一により、ペン描画のズレ解消と後続フェーズ改修の基盤整備を行う

---

## 📋 現状分析

### ✅ 良好な状態
- PixiJS v8.13 が正しく導入済み
- 適切な初期化パターン使用 (`await app.init()`)
- コアエンジンの統合アーキテクチャが構築済み
- 非破壊的なコピー&ペースト機能が実装済み

### ⚠️ 問題点
1. **座標変換の二重実装**
   ```javascript
   // 現在の問題例
   screenToCanvasForDrawing(screenX, screenY)  // ペン描画用
   screenToCanvas(screenX, screenY)           // レイヤー操作用
   ```

2. **座標空間の曖昧性**
   ```javascript
   // 現在: 座標空間が不明
   const point = container.toLocal(globalPoint);
   
   // 改修後: 明示的コメント必要
   // coord: screen -> layer
   const point = container.toLocal(globalPoint);
   ```

3. **直接的なtoLocal/toGlobal使用**
   - 18箇所で直接使用を確認
   - 統一的なAPI経由での変換が必要

---

## 🚀 Phase 0 実装手順

### Step 1: coordinate-system.js 作成
**実装内容**
```javascript
window.CoordinateSystem = {
  // 明示的な座標空間変換
  screenToWorld(app, x, y) { /* coord: screen -> world */ },
  worldToScreen(app, x, y) { /* coord: world -> screen */ },
  layerToWorld(layer, x, y) { /* coord: layer -> world */ },
  worldToLayer(layer, x, y) { /* coord: world -> layer */ },
  
  // 統一された描画用変換
  screenToCanvasForDrawing(cameraSystem, x, y) {
    // coord: screen -> canvas (drawing optimized)
    return cameraSystem.canvasContainer.toLocal({x, y});
  }
};
```

### Step 2: core-engine.js への段階的適用
**対象メソッド**
- `CameraSystem.screenToCanvasForDrawing()` → `CoordinateSystem.screenToCanvasForDrawing()`
- `CameraSystem.screenToCanvas()` → `CoordinateSystem.screenToWorld()`
- `LayerManager` 内の `toLocal/toGlobal` 呼び出し

**コメント追加パターン**
```javascript
// BEFORE
const canvasPoint = this.cameraSystem.screenToCanvas(screenX, screenY);

// AFTER
// coord: screen -> world
const canvasPoint = CoordinateSystem.screenToWorld(this.app, screenX, screenY);
```

### Step 3: index.html への読み込み追加
```html
<!-- coordinate-system.js を core-engine.js より前に読み込み -->
<script src="coordinate-system.js"></script>
<script src="config.js"></script>
<script src="ui-panels.js"></script>
<script src="core-engine.js"></script>
```

---

## 🔧 実装仕様詳細

### CoordinateSystem API 仕様

#### メソッド一覧
```javascript
// 基本変換
screenToWorld(app, x, y): {x, y}     // スクリーン → ワールド
worldToScreen(app, x, y): {x, y}     // ワールド → スクリーン
layerToWorld(layer, x, y): {x, y}    // レイヤー → ワールド  
worldToLayer(layer, x, y): {x, y}    // ワールド → レイヤー

// 描画最適化
screenToCanvasForDrawing(cameraSystem, x, y): {x, y}  // ペン描画用

// デバッグ支援
validateCoordSpace(point, expectedSpace): boolean     // 座標空間検証
tagCoordSpace(point, space): point                    // 座標空間タグ付け
```

#### 座標空間定義
```javascript
const COORD_SPACES = {
  SCREEN: 'screen',    // CSS pixels, canvas top-left origin
  WORLD: 'world',      // Canvas units, infinite canvas
  LAYER: 'layer',      // Layer pixels, layer top-left origin
  LOCAL: 'local'       // Object units, pivot point origin
};
```

### デバッグモード機能
```javascript
if (CONFIG.debug) {
  // 座標変換をコンソール出力
  console.log(`coord: ${sourceSpace} -> ${targetSpace}`, {from: sourcePoint, to: targetPoint});
  
  // 座標空間の検証
  CoordinateSystem.validateCoordSpace(point, COORD_SPACES.WORLD);
}
```

---

## 📊 期待される効果

### 🎯 直接的効果
- **ペン描画ズレ解消**: 座標変換の統一により描画位置が正確に
- **座標系バグ撲滅**: 明示的なコメントによりバグの早期発見
- **改修効率向上**: Claude/AIの理解度向上により改修作業が高速化

### 📈 測定可能な指標
- 座標変換関数の統一率: 100% (現在: 混在状態)
- 座標空間コメント率: 100% (現在: 0%)
- 描画精度: 1px以内 (現在: 数px のズレあり)

---

## ⚡ リスク管理

### 低リスク要因
- **既存機能への影響最小**: 段階的置換により影響範囲を限定
- **ロールバック容易**: coordinate-system.js削除で元に戻る
- **テスト簡単**: 描画動作の視覚的確認が容易

### 想定リスク & 対策
1. **座標変換精度の劣化**
   - 対策: 既存メソッドのラッパーとして実装し、同一結果を保証
   
2. **パフォーマンスの劣化**
   - 対策: インライン展開可能な軽量実装
   
3. **既存コードとの不整合**
   - 対策: 段階的置換により互換性を維持

---

## 📅 実装タイムライン

### Day 1: 基盤作成 (2-3時間)
- [ ] coordinate-system.js 作成
- [ ] index.html への読み込み追加
- [ ] 基本的な座標変換テスト

### Day 2: 段階的適用 (3-4時間)  
- [ ] CameraSystem の座標変換メソッド置換
- [ ] DrawingEngine の描画座標変換統一
- [ ] 動作確認とデバッグ

### Day 3: 完了確認 (1-2時間)
- [ ] 全座標変換にコメント追加済み確認
- [ ] ペン描画精度テスト
- [ ] Phase 1 準備完了確認

---

## 🎉 成功基準

### ✅ 必須条件
1. ペン描画のズレが解消されている
2. 全座標変換に明示的コメントが追加されている
3. 既存機能（レイヤー操作、カメラ操作）が正常動作する

### 🌟 理想条件
1. CoordinateSystem API が完全に機能している
2. デバッグモードで座標変換がトレースできる
3. 次フェーズ（Engine Star 作成）への準備が整っている

---

## 📝 次フェーズへの橋渡し

Phase 0 完了後、以下が可能になる：

1. **Phase 1**: coordinate-system.js を基盤として Engine Star 作成
2. **Claude改修効率**: 座標系の明示的コメントにより改修作業が高速化
3. **バグ撲滅**: 座標空間の混在による不具合が根本的に解消

この改修により、Twin-Star System への移行がスムーズに進行する基盤が整備される。