# Phase 1 問題確定診断書

## 診断結果ログ分析

### 🔴 ペンズレの原因：完全確定

```
Input (ブラウザスクリーン座標):     {x: 363.5, y: 316}
Output (screenToLayer):           {x: 135.5, y: 83.5}
Canvas相対座標:                     {x: 313.5, y: 318}
toLocal(canvas相対):               {x: 85.5, y: 85.5}

オフセット:
  offsetX: -178  (左にズレている)
  offsetY: -234.5 (上にズレている)
```

### 🔍 根本原因の特定

**Canvas.getBoundingClientRect():**
```
{left: 50, top: -2, right: 777, bottom: 630}
```

**worldContainer の位置:**
```
{x: 228, y: 232.5}
```

### 💥 問題の仕組み

```javascript
// 現在の screenToLayer() 実装
screenToLayer(screenX, screenY) {
    const globalPoint = { x: screenX, y: screenY };  // ← スクリーン座標のまま
    return this.canvasContainer.toLocal(globalPoint);  // ← 間違った基準点
}
```

**流れ**:
1. スクリーン座標 (363.5, 316) が入力される
2. そのまま canvasContainer.toLocal() に渡される
3. canvasContainer は worldContainer内にあり、worldContainer が (228, 232.5) にある
4. worldContainerの位置分がズレとして出現 ← **これが -178, -234.5 のオフセット**

**正しい流れ**:
```
screenX/Y (ブラウザスクリーン座標)
  ↓ [canvas.getBoundingClientRect() で相対化]
  ↓ relX = screenX - canvas.left (50)
  ↓ relY = screenY - canvas.top (-2)
  ↓ キャンバス相対座標
  ↓ [canvasContainer.toLocal()]
  ↓ キャンバスローカル座標 ✅
```

---

## ✅ 修正方法（確定）

### 修正対象: camera-system.js の screenToLayer()

```javascript
// ❌ 修正前（間違い）
screenToLayer(screenX, screenY) {
    const globalPoint = { x: screenX, y: screenY };
    return this.canvasContainer.toLocal(globalPoint);
}

// ✅ 修正後（正しい）
screenToLayer(screenX, screenY) {
    // canvas要素の位置を取得
    const canvas = this._getSafeCanvas();
    if (!canvas) {
        return { x: screenX, y: screenY };
    }
    
    // ブラウザスクリーン座標 → キャンバス相対座標
    const rect = canvas.getBoundingClientRect();
    const relativeX = screenX - rect.left;
    const relativeY = screenY - rect.top;
    
    // キャンバス相対座標 → キャンバスローカル座標
    return this.canvasContainer.toLocal({ x: relativeX, y: relativeY });
}
```

**検証**:
```
Input:  (363.5, 316)
Step1:  relativeX = 363.5 - 50 = 313.5
        relativeY = 316 - (-2) = 318
Step2:  canvasContainer.toLocal({313.5, 318}) ≈ キャンバスローカル座標 ✅
```

---

## 📊 3つの問題の現状

| # | 問題 | 原因 | 修正ファイル | 優先度 |
|---|------|------|------------|--------|
| 1 | ペンが右・上にズレ | screenToLayer()がcanvas相対化をしていない | camera-system.js | 🔴 高 |
| 2 | スライダーが動かない | SettingsManager vs BrushSettings の競合 | core-initializer.js | 🔴 高 |
| 3 | 色は変わるがサイズ・透明度は反映なし | 同上の副作用 | 同上 | 🔴 高 |

---

## 🔧 修正実装（コード）

### 修正1: camera-system.js

```javascript
screenToLayer(screenX, screenY) {
    // canvas要素の位置を基準に相対化
    const canvas = this._getSafeCanvas();
    if (!canvas) {
        // フォールバック
        return this.canvasContainer.toLocal({ x: screenX, y: screenY });
    }
    
    const rect = canvas.getBoundingClientRect();
    const relativeX = screenX - rect.left;
    const relativeY = screenY - rect.top;
    
    return this.canvasContainer.toLocal({ x: relativeX, y: relativeY });
}
```

### 修正2: core-initializer.js

**削除対象**:
```javascript
// core-initializer.js の initialize() メソッド内

// ❌ これをコメントアウト
// this.settingsManager = initializeSettingsManager(window.TegakiEventBus, CONFIG);

// または initializeSettingsManager() 関数全体を削除
```

**理由**: 
- `BrushSettings` が core-engine.js で既に初期化されている
- `SettingsManager` は古い設計で、BrushSettings と競合している
- BrushSettings に統一することで EventBus 経路が明確化される

---

## 🎯 修正後の動作フロー（確定版）

```javascript
// ペンスライダーを動かす
スライダー input イベント
  ↓
quick-access-popup.js: _onSizeChange()
  ↓
EventBus.emit('brush:size-changed', {size: 30})
  ↓
BrushSettings.subscribeToEvents() リスナー実行
  ↓
this.size = 30
  ↓
DrawingEngine.continueDrawing() で都度参照
  ↓
this.currentSettings = this.brushSettings.getCurrentSettings()
  ↓
size: 30 が描画に反映される ✅
```

---

## ✨ 期待される修正後の状態

1. **ペン位置**
   - ❌ 右にズレ → ✅ 正確な位置に描画

2. **スライダー動作**
   - ❌ 値が3で固定 → ✅ 1～50pxで自由に変更可能

3. **透明度スライダー**
   - ❌ 値が100%で固定 → ✅ 0～100%で自由に変更可能

4. **色パレット**
   - ✅ 既に動作中 → ✅ 継続動作

---

## 実装チェックリスト

- [ ] camera-system.js の screenToLayer() を修正
- [ ] core-initializer.js から SettingsManager 初期化をコメント/削除
- [ ] ペンズレが消えたか確認（クリック位置 = 描画位置）
- [ ] サイズスライダーが1～50pxで変更可能か確認
- [ ] 透明度スライダーが0～100%で変更可能か確認
- [ ] 色パレットが継続動作するか確認
- [ ] quick-access-popup.js の数値表示が更新されるか確認