お絵かきツール（アニメ版）技術解析報告書
📋 エグゼクティブサマリー
現在、静止画PNG投稿機能は正常動作していますが、APNGとGIFのアニメーション投稿で以下の問題が発生しています：

APNG: 投稿はできるがアニメーションしない（PNG/APNG MIMEタイプの混同）
GIF: 生成処理が完了しない（Web Worker読み込みの失敗）

根本原因はCSP（Content Security Policy）制約とライブラリ依存関係の問題です。

🔍 1. 問題点の詳細分析
1.1 APNG投稿の問題
現象

ファイルは添付できる
めぶきちゃんねるに投稿できる
しかしアニメーションしない（静止画として表示される）

根本原因の推定
問題A: MIMEタイプの不一致
javascript// 現在のコード (tegaki-loader_anime.js 247行目付近)
const mimeType = type === 'apng' ? 'image/apng' : 'image/gif';

APNGは技術的には「PNGの拡張」であり、正式なMIMEタイプは image/png
image/apng は非標準のMIMEタイプ
めぶきちゃんねるが image/apng を受け付けても、ブラウザが静止画PNGとして解釈している可能性

問題B: UPNGライブラリの圧縮設定
javascript// tegaki_anime.js 244行目
const apngData = UPNG.encode(frames, this.canvas.width, this.canvas.height, 0, delays);

第5引数 0 は 圧縮なし（無圧縮PNG） を意味
APNGとして認識されるには、適切なチャンクが必要
pakoによる圧縮が実際に動作しているか不明

1.2 GIF生成の問題
現象

「GIFを生成中...」で処理が停止
進捗表示が進まない

根本原因
問題C: Web Workerスクリプトの読み込み失敗
javascript// tegaki-loader_anime.js 51行目
gifWorker: 'https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.worker.js'
GIF.jsは内部で Web Worker を使用して重い処理を別スレッドで実行します。しかし：

CSPのworker-src制約: めぶきちゃんねるのCSPが外部Worker読み込みをブロック
動的Worker生成の不可: new Worker(url) が外部URLを拒否

エラーの流れ:
GIF.js初期化
  ↓
gif.worker.jsを外部CDNから読み込もうとする
  ↓
CSP違反でブロック（connect-src制約）
  ↓
Workerが起動せず、render()が永久に完了しない
  ↓
onProgressもon('finished')も呼ばれない

🛠️ 2. 解決策の提案
解決策A: APNG修正（優先度: 高）
方法1: MIMEタイプの修正
javascript// tegaki-loader_anime.js
const mimeType = type === 'apng' ? 'image/png' : 'image/gif';
//                                   ↑ image/apngから変更
メリット: 簡単、標準準拠
デメリット: これだけでは不十分な可能性
方法2: UPNG圧縮パラメータの修正
javascript// tegaki_anime.js
// 圧縮レベルを0（無圧縮）から変更
const apngData = UPNG.encode(frames, this.canvas.width, this.canvas.height, 256, delays);
//                                                                          ↑ カラー数を指定
または
javascript// pakoによる明示的圧縮を追加
const apngData = UPNG.encode(frames, this.canvas.width, this.canvas.height, 0, delays);
// この後、pakoで再圧縮する処理を追加
方法3: 検証スクリプトの追加
javascript// エクスポート後にAPNGの妥当性を確認
async exportAsApng() {
    // ... 現在の処理 ...
    const blob = new Blob([apngData], {type: 'image/png'});
    
    // デバッグ: APNGヘッダーの確認
    const buffer = await blob.arrayBuffer();
    const view = new Uint8Array(buffer);
    console.log('APNG Header:', Array.from(view.slice(0, 16)).map(b => b.toString(16)));
    
    return blob;
}

解決策B: GIF修正（優先度: 中〜高）
方法1: Workerスクリプトのインライン化（推奨）
CSP制約を回避する唯一の確実な方法:
javascript// gif.worker.jsの内容を文字列として埋め込み、Blob URLから起動
const workerCode = `
    // gif.worker.jsの完全なコードをここに貼り付け
    (function() {
        // ... Worker内部の処理 ...
    })();
`;

const blob = new Blob([workerCode], { type: 'application/javascript' });
const workerUrl = URL.createObjectURL(blob);

// GIF.jsに独自Workerを渡す
const gif = new GIF({
    workers: 2,
    quality: 10,
    workerScript: workerUrl  // ← Blob URLを使用
});
実装手順:

gif.worker.jsの内容をCDNから取得（ローカル環境で）
内容を文字列リテラルとしてtegaki-loader_anime.jsに埋め込む
実行時にBlob URLを生成してGIF.jsに渡す

メリット: CSP制約を完全に回避
デメリット: ファイルサイズが増加（約10-20KB）
方法2: GIF機能の削除（暫定対応）
javascript// GIF投稿ボタン自体を削除し、APNGのみに集中
// メリット: 実装が簡単
// デメリット: GIF投稿ができない

解決策C: ライブラリのバンドル化（根本対応）
概要
すべての外部依存（UPNG, pako, GIF.js）を一つのJSファイルに結合
実装方法:

webpackやRollupでバンドル
すべてのライブラリをwindowオブジェクトに公開
CSPを気にせず単一ファイルで動作

メリット:

外部接続が一切不要
CSP問題の完全解決
読み込み速度の向上

デメリット:

ビルドプロセスが必要
ファイルサイズが大きくなる（圧縮後でも100KB程度）
メンテナンスが複雑化


📊 3. 優先順位付き実装計画
Phase 1: 緊急対応（即日〜3日）
タスク対応内容難易度効果1-1APNG MIMEタイプをimage/pngに修正★☆☆中1-2APNGヘッダー検証スクリプト追加★★☆高（診断）1-3GIF機能を一時的に無効化★☆☆低
Phase 2: 本格対応（1週間〜2週間）
タスク対応内容難易度効果2-1gif.worker.jsをインライン化★★★高2-2UPNG圧縮パラメータ最適化★★☆中2-3エラーハンドリング強化★★☆中
Phase 3: 最適化（1ヶ月〜）
タスク対応内容難易度効果3-1すべてのライブラリをバンドル化★★★★最高3-2ファイルサイズ最適化★★★☆中3-3フレーム数・遅延の可変化★★☆中

🔬 4. 検証が必要な項目
4.1 めぶきちゃんねるのCSP詳細
確認方法:
javascript// ブラウザコンソールで実行
console.log(document.querySelector('meta[http-equiv="Content-Security-Policy"]')?.content);
// または
fetch(location.href).then(r => console.log(r.headers.get('content-security-policy')));
確認項目:

script-src: スクリプト読み込み元の制限
worker-src: Worker読み込み元の制限
connect-src: XHR/fetch接続先の制限

4.2 APNGの実際の動作
テストコード:
javascript// めぶきちゃんねるで実際に投稿したAPNGのURLを使用
const img = new Image();
img.src = 'https://mebuki.moe/uploads/xxx.png'; // 実際のURL
img.onload = () => {
    console.log('画像読み込み完了');
    console.log('naturalWidth:', img.naturalWidth);
    console.log('naturalHeight:', img.naturalHeight);
    
    // APNGかどうか判定（簡易版）
    const canvas = document.createElement('canvas');
    canvas.width = img.naturalWidth;
    canvas.height = img.naturalHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    
    setTimeout(() => {
        const data1 = ctx.getImageData(0, 0, 1, 1).data;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, 0, 0);
        const data2 = ctx.getImageData(0, 0, 1, 1).data;
        
        if (data1[0] !== data2[0]) {
            console.log('✅ APNGとして動作している');
        } else {
            console.log('❌ 静止画PNGとして扱われている');
        }
    }, 500);
};

💡 5. 推奨される最短解決ルート
今すぐできる対応

APNG MIMEタイプ修正 (5分)

image/apng → image/png に変更
即座にテスト可能


GIF機能の無効化 (10分)

GIF投稿ボタンを削除
エラーを回避



1週間以内の対応

gif.worker.jsのインライン化 (4-6時間)

CDNからgif.worker.jsをダウンロード
Blob URL化して埋め込み
GIF投稿を完全復活


検証とデバッグ (2-3時間)

実際にめぶきちゃんねるで投稿テスト
APNGアニメーション動作確認
GIF生成時間の計測




📝 6. コード修正の具体例
修正A: APNG MIMEタイプ
javascript// tegaki-loader_anime.js (247行目付近)
async injectToBoard(blob, type) {
    if (!this.targetInput) {
        throw new Error('入力要素が見つかりません');
    }
    
    // 💡 修正: APNGは標準のPNG MIMEタイプを使用
    const mimeType = (type === 'apng' || type === 'gif') 
        ? (type === 'gif' ? 'image/gif' : 'image/png')  // APNGは image/png
        : 'image/png';
    
    const filename = `tegaki_anime_${Date.now()}.${type === 'apng' ? 'png' : type}`;
    //                                                              ↑ 拡張子もpngに
    
    const file = new File([blob], filename, {
        type: mimeType,
        lastModified: Date.now()
    });
    
    // ... 以下同じ ...
}
修正B: Worker インライン化（テンプレート）
javascript// tegaki-loader_anime.js の先頭に追加
const GIF_WORKER_CODE = `
// gif.worker.js の内容をここに貼り付け
// 例: https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.worker.js の内容
`;

// ... 中略 ...

// exportAsGif メソッド内で使用
async exportAndAttach(type) {
    // ... 前半省略 ...
    
    if (type === 'gif') {
        // Workerコードから Blob URL を生成
        const workerBlob = new Blob([GIF_WORKER_CODE], { type: 'text/javascript' });
        const workerUrl = URL.createObjectURL(workerBlob);
        
        // GIF.jsにカスタムWorkerを指定
        if (window.GIF && window.GIF.prototype) {
            window.GIF.prototype.options = window.GIF.prototype.options || {};
            window.GIF.prototype.options.workerScript = workerUrl;
        }
        
        blob = await this.core.exportAsGif(progressCallback);
        
        // 使用後にBlob URLを解放
        URL.revokeObjectURL(workerUrl);
    }
    
    // ... 後半省略 ...
}

⚠️ 7. リスクと制約事項
技術的リスク

ブラウザ互換性: 古いブラウザではAPNG未対応
ファイルサイズ: アニメーションはPNGより大きくなる（5〜10倍）
めぶきちゃんねるの仕様変更: 投稿ルールが変わる可能性

実装上の制約

CSPは変更不可: めぶきちゃんねる側の設定は変えられない
外部CDN依存の排除が必須: すべてをインライン化またはバンドル化
Workerの制約: インラインWorkerのデバッグが困難


✅ 8. 次のアクション

即座に実施:

 APNG MIMEタイプを image/png に修正
 修正版をGitHub Pagesにデプロイ
 めぶきちゃんねるで投稿テスト


検証:

 投稿したAPNGがアニメーションするか確認
 ブラウザの開発者ツールでネットワークエラーを確認
 CSPの詳細をコンソールで取得


本格対応:

 gif.worker.js をCDNからダウンロード
 Blob URL化してコードに統合
 GIF投稿機能を再テスト



