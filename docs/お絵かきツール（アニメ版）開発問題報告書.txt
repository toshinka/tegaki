# お絵かきツール（アニメ版）開発問題報告書
# Date: 2025-10-11

## 1. プロジェクト概要

| 項目 | 内容 |
| :--- | :--- |
| **目標** | ブラウザ上で動作するアニメーション対応お絵かきツール（APNG出力対応）をめぶきちゃんねるで展開する。 |
| **環境** | HTML直開き / JavaScript (ES2023) / PixiJS v8+ / Windowグローバル公開（必須） |
| **実行場所** | めぶきちゃんねるのレス投稿フォーム（Content Security Policy: CSPが厳格） |
| **構成** | tegaki-loader_anime.js (ローダー) + tegaki_anime.js (コア) の2ファイル分割 |

## 2. BASIC版とANIME版の根本的な違い（問題発生の原因）

| 比較項目 | BASIC版 (成功) | ANIME版 (失敗) | 根本的な問題点 |
| :--- | :--- | :--- | :--- |
| **依存関係** | 外部依存なし (PixiJSは統合ビルド前提) | 外部依存あり: **UPNG.js, pako.js, GIF.js/Worker** | 高度な機能（アニメーション・圧縮）のための**外部ライブラリ**が必要。 |
| **ライブラリ読み込み** | tegaki_basic.js のみロード (自前ホスト) | 複数のライブラリをCDNからロードしようとした | **CDNからのロードがCSPでブロックされる。** |
| **Worker使用** | なし | GIF.jsが**Web Worker**を使用 | Workerスクリプトの外部ロードがCSPで最も厳しくブロックされる。 |

## 3. 問題点と現状の解決策（フェーズ別）

### 3-1. 【問題点：CSP違反】外部CDNからのスクリプト読み込みがブロックされる

* **詳細:** めぶきちゃんねるのCSP (`connect-src`) が、CDNドメイン（`jsdelivr.net`, `cloudflare.com`など）からのスクリプト（JSファイル）の動的読み込みを禁止している。
* **現状:** BASIC版では発生しなかった、最も基本的なエラー。
* **解決済みのアプローチ:** GIF機能を削除し、APNGに必要な**UPNG.js**と**pako.js**のコードを**`tegaki-loader_anime.js`に直接貼り付ける（コードの静的埋め込み）**ことで、外部接続を回避。

### 3-2. 【問題点：ライブラリ連携】APNG圧縮機能（deflate）が動作しない

* **詳細:** APNGエクスポート時に、`UPNG.min.js`が圧縮ライブラリ（`pako`）の関数である**`TypeError: Cannot read properties of undefined (reading 'deflate')`**を呼び出そうとして失敗する。
* **原因（推定）:** `tegaki-loader_anime.js`内で実行した`window.Zlib = window.pako;`というグローバル変数へのエイリアス設定が、何らかの理由で**UPNG.js**が期待する形式で機能を提供できていない（pakoのグローバル公開失敗、またはUPNGの依存構造ミス）。
* **対応策（進行中）:** `tegaki-loader_anime.js`内の`pako`の紐付け部分に厳密なチェック（`typeof window.pako.deflate === 'function'`）を追加し、エラーの原因（`pako`のロード失敗か、紐付けミスか）を切り分ける。

### 3-3. 【問題点：投稿】BlobからFileへの変換とフォームへの添付

* **詳細:** Canvasから生成したBlob形式の画像データを、めぶきちゃんねるのファイルアップロードフォーム（`<input type="file">`）にプログラム的にセットする必要がある。
* **現状:** `new File()`と`DataTransfer`オブジェクトを使用してBlobをFileオブジェクトに変換し、`input.files`に割り当てるロジックは実装済みで、技術的には成功している可能性が高い。
* **残存する懸念:** 添付後のフォームの`change`イベント発火や、フォームの非同期処理（投稿ボタンの有効化、プレビュー表示）が、ブックマークレットからの操作で完全に完了するかどうかは、実環境での確認が必要。

### 3-4. 【問題点：将来的な拡張】ファイル分割の維持とモジュール依存性

* **目標:** コーディングルールである**DRY/SOLID原則**に基づき、`tegaki-loader`と`tegaki_anime`の2ファイル構成を維持したい。
* **現状の妥協点:** 外部ライブラリ（UPNG/pako）は、CSP回避のため**`tegaki-loader_anime.js`にのみ埋め込む**形を採用。コアロジック(`tegaki_anime.js`)は独立を維持。
* **結論:** CSPが許容しないため、CDNへの依存は不可能。コアロジックの分割を維持し、外部依存のみローダーに一括埋め込む現在の方式が、**制約下での最適解**である。