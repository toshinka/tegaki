# Tegaki 描画システム フロー・シンボル辞典 & 診断レポート

---

## 🔴 **エラー原因判定**

| エラー | 原因 | 致命度 |
|--------|------|--------|
| `this.settings.getStrokeOptions is not a function` | `BrushSettings` にメソッドが存在しない | **CRITICAL** |
| QuickAccessPopup が表示されない | ポップアップロジックの不一致 | **HIGH** |
| 座標系の混在 | canvas/layer/world座標の管理が曖昧 | **HIGH** |

---

## 📊 **API不一致の詳細分析**

### ❌ **問題1: BrushSettings.getStrokeOptions() 存在しない**

**現在の drawing-engine.js (行203)**
```javascript
const strokeOptions = this.settings.getStrokeOptions();  // ❌ 実装なし
```

**BrushSettings 実装**
```javascript
class BrushSettings {
  getSize()          // ✅ 実装済み
  getColor()         // ✅ 実装済み
  getAlpha()         // ✅ 実装済み
  getOpacity()       // ✅ 実装済み
  getCurrentSettings()  // ✅ 実装済み（推奨メソッド）
  
  // ❌ getStrokeOptions() なし！
}
```

**旧版との比較**

| メソッド | 旧版(etc9) | 新版(v8.13) | 用途 |
|---------|----------|----------|------|
| `getStrokeOptions()` | ✅ 存在 | ❌ なし | ストロークオプション一括取得 |
| `getCurrentSettings()` | なし | ✅ 推奨 | 設定一括取得 |
| `getSize()` | あり | ✅ あり | 個別取得 |

**修正案**
```javascript
// 新版の推奨API（Phase 1設計）
const currentSettings = this.settings.getCurrentSettings();
// → {size, color, alpha, opacity, minPhysicalWidth}
```

---

## 📐 **座標系フロー図**

```
┌─────────────────────────────────────────────────────────────┐
│                     座標系の流れ                             │
└─────────────────────────────────────────────────────────────┘

PointerEvent.clientX/Y
        ↓ (スクリーン座標)
        │
┌───────┴──────────────────────────────────────────────┐
│  drawing-engine.js → startDrawing(screenX, screenY)  │
│  ※ ScreenToCanvas変換が必要な場所                    │
└───────┬──────────────────────────────────────────────┘
        ↓
  cameraSystem.screenToCanvas(screenX, screenY)
        ↓ (キャンバス座標 = レイヤーローカル)
        │
┌───────┴──────────────────────────────────────────────┐
│  currentPath = recorder.startNewPath({x, y, pressure}) │
│  ※ ここから先は全てキャンバス座標           │
└───────┬──────────────────────────────────────────────┘
        ↓
  this.currentPath.graphics (PIXI.Graphics)
        ↓ (ピクセル座標)
        │
┌───────┴──────────────────────────────────────────────┐
│  layerManager.addPathToActiveLayer(path)              │
│  → layerSystem に統合                  │
└───────────────────────────────────────────────────────┘
```

**⚠️ 現在の問題: drawing-engine.js で多重座標変換の兆候**

---

## 📋 **ツール・シンボル辞典（API対応表）**

### **1. DrawingEngine クラス**

| 項目 | 旧版(etc9) | 新版(v8.13) | 問題 |
|------|----------|----------|------|
| 初期化 | `constructor(cameraSystem, layerManager, eventBus, config)` | `constructor(app, layerSystem, cameraSystem, historyManager)` | ⚠️ シグネチャ変更 |
| ツール初期化 | ◇ 直接記述 | ◇ `toolManager`使用（Phase 1) | ✅ 改善 |
| 描画開始 | `startDrawing(x, y, pressure)` | `startDrawing(x, y, pressure)` | ✅ 互換 |
| ブラシ設定 | 直接参照 | `this.settings`（BrushSettings) | ✅ 改善 |
| StrokeOptions | `getStrokeOptions()` | ❌ **メソッドなし** | **🔴 CRITICAL** |
| EventBus購読 | 部分的 | `subscribeToSettings()` | ✅ 拡張 |

---

### **2. BrushSettings クラス**

| メソッド | 用途 | 戻り値 | 備考 |
|---------|------|-------|------|
| `getSize()` | ブラシサイズ取得 | `number` | ✅ |
| `setSize(size)` | ブラシサイズ設定 | `void` | ✅ |
| `getColor()` | 色取得(16進数) | `0xRRGGBB` | ✅ |
| `setColor(color)` | 色設定 | `void` | ✅ |
| `getAlpha()` | 透明度(0.0-1.0) | `number` | ✅ |
| `setAlpha(alpha)` | 透明度設定 | `void` | ✅ |
| `getOpacity()` | 透明度(0-100%) | `number` | ✅ |
| `setOpacity(opacity)` | 透明度設定(%) | `void` | ✅ |
| `getCurrentSettings()` | **全設定一括取得** | `{size, color, alpha, ...}` | ✅ **推奨** |
| `getStrokeOptions()` | ❌ **存在しない** | — | **🔴 CRITICAL** |

---

### **3. ToolManager クラス**

| メソッド | 用途 | 依存 | 備考 |
|---------|------|------|------|
| `registerTool(name, ToolClass)` | ツール登録 | — | ✅ |
| `switchTool(name, deps)` | ツール切り替え | ToolBase | ✅ EventBus発行 |
| `getCurrentTool()` | アクティブツール取得 | — | ✅ |
| `getCurrentToolName()` | ツール名取得 | — | ✅ |
| `getRegisteredToolNames()` | 登録済みツール一覧 | — | ✅ |
| `clearInstances()` | インスタンスクリア | — | ✅ |

**イベント発行:**
- `'tool:changed'` → `{from, to, tool}`

---

### **4. StrokeRecorder クラス**

| メソッド | 用途 | 座標系 | 備考 |
|---------|------|--------|------|
| `startStroke(x, y, pressure)` | 記録開始 | レイヤーローカル | ✅ |
| `addPoint(x, y, pressure)` | ポイント追加 | レイヤーローカル | ✅ |
| `endStroke()` | 記録終了 | — | ✅ `{points, isSingleDot}` |
| `getCurrentPoints()` | 現在のポイント取得 | — | ✅ プレビュー用 |
| `getTotalDistance()` | 総距離計算 | — | ✅ |
| `getPointCount()` | ポイント数取得 | — | ✅ |

**座標系注意:** screentolayer変換は `cameraSystem` で行う必要がある

---

### **5. StrokeRenderer クラス**

| メソッド | 用途 | 戻り値 | 備考 |
|---------|------|-------|------|
| `setTool(tool)` | ツール設定 | `void` | ✅ 'pen'/'eraser' |
| `renderPreview(points, settings)` | プレビュー描画 | `PIXI.Graphics` | ✅ 筆圧対応 |
| `renderFinalStroke(strokeData, settings)` | 最終描画 | `PIXI.Graphics` | ✅ |
| `renderDot(point, settings)` | 単独点描画 | `PIXI.Graphics` | ✅ 円形 |
| `calculateWidth(pressure, size)` | 幅計算 | `number` | ✅ 筆圧反映 |
| `updateResolution()` | 解像度更新 | `void` | ✅ DPI対応 |

**設定インターフェース:**
```javascript
const settings = {
  color: 0xRRGGBB,     // 色
  size: number,        // ブラシサイズ
  alpha: 0.0-1.0       // 透明度
};
```

---

### **6. StrokeDataManager クラス**

| メソッド | 用途 | EventBus | 備考 |
|---------|------|----------|------|
| `addStroke(strokeData)` | ストローク追加 | `'stroke:added'` | ✅ ID自動生成 |
| `removeStroke(id)` | ストローク削除 | `'stroke:removed'` | ✅ |
| `updateStroke(id, data)` | ストローク更新 | `'stroke:updated'` | ✅ |
| `getStroke(id)` | ストローク取得 | — | ✅ |
| `getAllStrokes()` | 全ストローク取得 | — | ✅ 配列 |
| `findStrokesInBounds(bounds)` | 境界検索 | — | ✅ Phase 6でQuadTree化 |
| `findStrokesInRadius(center, r)` | 円形検索 | — | ✅ 消しゴムで使用 |
| `batchRemove(ids)` | バッチ削除 | ◇ 複数イベント | ⚠️ 最適化待ち |
| `batchAdd(data[])` | バッチ追加 | ◇ 複数イベント | ⚠️ 最適化待ち |

---

## 🔌 **EventBus イベントフロー**

```
┌─────────────────────────────────────────────────────────────┐
│                    Event発行元と購読者                       │
└─────────────────────────────────────────────────────────────┘

【ツール関連】
ToolManager
  └→ 'tool:changed' {from, to, tool}
        ├→ 🎨 drawing-engine (購読？ ⚠️ 確認必要)
        ├→ 🖱️ keyboard-handler
        └→ 🖼️ UI層

【ストローク関連】
StrokeDataManager
  ├→ 'stroke:added' {id, strokeData}
  ├→ 'stroke:removed' {id}
  └→ 'stroke:updated' {id, strokeData}
        ├→ 📦 drawing-engine (requestRender() 呼び出し ✅)
        ├→ 💾 history
        └→ 🎨 layer-system

【設定関連】
UI層 (設定ポップアップなど)
  ├→ 'settings:pressure-correction' {value}
  ├→ 'settings:simplify-tolerance' {value}
  ├→ 'settings:smoothing-mode' {mode}
  └→ ... (その他設定)
        ├→ 🖌️ BrushSettings
        ├→ 📝 StrokeRecorder
        ├→ 🔄 StrokeTransformer
        └→ 💪 PressureHandler

【ツール切り替え】
keyboard-handler ('E' キー etc)
  └→ 'tool:switch' {tool}
        └→ 🖱️ core-runtime.js → toolManager.switchTool()
```

---

## 🎯 **現在の実装状態の問題点**

### **テーブル: API統合度チェック**

| 対象 | API定義 | 実装 | 一致度 | 問題 |
|------|--------|------|--------|------|
| **BrushSettings** | getCurrentSettings() | ✅ | ✅ | getStrokeOptions()ギャップ |
| **DrawingEngine** | startDrawing() | ✅ | ⚠️ | 呼び出しメソッド不一致 |
| **ToolManager** | switchTool() | ✅ | ✅ | — |
| **StrokeRecorder** | addPoint() | ✅ | ✅ | 座標系要確認 |
| **StrokeRenderer** | renderPreview() | ✅ | ✅ | — |
| **StrokeDataManager** | addStroke() | ✅ | ✅ | — |
| **EventBus購読** | subscribeToSettings | ✅ | ⚠️ | 部分的 |
| **PopupManager** | show(name) | ✅ | ❌ | 動的ポップアップ実装中 |

---

## 🛠️ **修正対応表**

### **修正1: BrushSettings API 統一**

**現在のコード (line 203 drawing-engine.js)**
```javascript
const strokeOptions = this.settings.getStrokeOptions();  // ❌ 
```

**修正案A: getCurrentSettings()を使用 (推奨)**
```javascript
const currentSettings = this.settings.getCurrentSettings();
const strokeOptions = {
  size: currentSettings.size,
  color: currentSettings.color,
  alpha: currentSettings.alpha
};
```

**修正案B: getStrokeOptions()メソッドを追加**
```javascript
// BrushSettings に追加
getStrokeOptions() {
  return {
    size: this.size,
    color: this.color,
    alpha: this.alpha,
    minPhysicalWidth: this.minPhysicalWidth
  };
}
```

**推奨: 修正案A** (既存API活用、DRY原則)

---

### **修正2: PopupManager の動的ポップアップ対応**

**現在の症状**
```
popup-manager.js:192 👁️ Popup "quickAccess" shown    ← イベント出力
popup-manager.js:212 🙈 Popup "quickAccess" hidden   ← すぐ非表示
```

**原因推測:**
- `show(name)` 後に `hide(name)` が自動呼び出されている
- または DOM挿入が行われていない

**確認項目:**
1. `popup-manager.js` の `show()` 実装を確認
2. `quick-access-popup.js` の DOM構造確認
3. `core-runtime.js` でのポップアップ生成・表示順序確認

---

## 📦 **ファイル依存関係（現状）**

```
drawing-engine.js
├─ app ✅
├─ layerSystem (layerManager) ✅
├─ cameraSystem ✅
├─ historyManager ✅
├─ BrushSettings ✅
│  └─ config.js
│  └─ eventBus
├─ StrokeRecorder ❌ (初期化なし？)
├─ StrokeRenderer ❌ (初期化なし？)
├─ PressureHandler ❌ (初期化なし？)
├─ StrokeTransformer ❌ (初期化なし？)
├─ ToolManager ✅ (新規: Phase 1)
├─ StrokeDataManager ✅ (新規: Phase 1)
└─ EventBus ✅

popup-manager.js
├─ DOM操作
├─ dynamicPopups ❌ (実装状態不明)
└─ show/hide ロジック
```

---

## ✅ **推奨される修正順序**

### **Priority 1 (即修正)**

1. **drawing-engine.js line 203**
   - `getStrokeOptions()` → `getCurrentSettings()` に置き換え
   - 影響度: CRITICAL (エラー止め)

2. **StrokeRecorder 初期化確認**
   - `screenToLayer()` vs `screenToCanvas()` 座標系統一
   - 影響度: HIGH (座標系崩壊防止)

### **Priority 2 (次フェーズ)**

3. **PopupManager デバッグ**
   - 動的ポップアップの show/hide タイミング確認
   - DOM挿入確認
   - 影響度: MEDIUM (UI動作)

4. **EventBus 購読完全性**
   - `'tool:changed'` イベント購読の確認
   - drawing-engine 側の購読実装確認
   - 影響度: HIGH (ツール切り替え動作)

### **Priority 3 (統合テスト)**

5. **座標系統一テスト**
   - screenToCanvas vs screenToLayer の明確化
   - 全ファイルで同じ定義を使用
   - 影響度: HIGH (根本問題)

6. **API命名規則統一**
   - getStrokeOptions() の統一実装
   - 参照表を作成（可視化）
   - 影響度: MEDIUM (保守性向上)

---

## 📄 **参考: 命名規則チェックリスト**

- ✅ `get*()` メソッド: getter（副作用なし）
- ✅ `set*()` メソッド: setter（単一責務）
- ✅ EventBus イベント名: `'domain:action'` 形式
- ✅ ストロークID: `'stroke_123'` 形式
- ✅ ツール名: `'pen'` / `'eraser'`（小文字）
- ❌ `get*Options()` vs `getCurrentSettings()` 混在（要統一）

---

## 🎓 **結論**

| 問題 | 根本原因 | 対策 | 優先度 |
|------|---------|------|--------|
| ペン描画エラー | BrushSettings API不一致 | `getCurrentSettings()` 使用 | **P1** |
| ポップアップ非表示 | popup-manager実装問題 | デバッグ・DOM確認 | **P2** |
| 座標系混在 | 複数座標系定義の使い分け曖昧 | screenToLayer統一 | **P1** |
| API断片化 | メソッド命名不一致 | シンボル辞典作成・統一 | **P3** |