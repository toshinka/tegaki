# ポップアップ統一リファクタリング改修計画書

**作成日**: 2025-10-21  
**対象プロジェクト**: PixiJS v8.13 お絵かきツール (v8.13_pop3)

---

## 📋 現状の問題点

### 1. ポップアップ初期化経路の断片化

#### ExportPopup（画像・アニメ出力）
- **初期化場所**: `core-initializer.js` の `initializeExportSystem()` 内
- **問題点**:
  - AnimationSystem初期化に依存するため遅延初期化が必要
  - リトライ処理が複雑化（最大20回、200msインターバル）
  - EventBus経由の初期化と直接初期化が混在
  - グローバル参照が複数存在: `window.TEGAKI_EXPORT_POPUP`, `window.exportPopup`, `window.exportPopupInstance`
  - DOM要素は生成されるがインスタンス参照が不安定

#### AlbumPopup（アルバム）
- **初期化場所**: `core-initializer.js` の `DrawingApp.initialize()` 内
- **問題点**:
  - UIController経由で初期化（`uiController.initializeAlbumPopup()`）
  - AnimationSystem依存だが初期化タイミングが異なる
  - グローバル参照: `window.albumPopupInstance`

#### SettingsPopup（設定）
- **初期化場所**: `core-initializer.js` の遅延初期化 + `UIController`
- **問題点**:
  - 遅延初期化が2重実装（`initializeSettingsPopupDelayed()` + `UIController.initializeSettingsPopup()`）
  - リトライ処理が20回×50ms
  - グローバル参照なし（UIController内のみ）

#### QuickAccessPopup（クイックアクセス）
- **初期化場所**: `UIController` のコンストラクタ
- **問題点**:
  - 他のポップアップと初期化タイミングが異なる
  - グローバル参照なし

### 2. 参照管理の不一致

| ポップアップ | UIController内参照 | グローバル参照 | DOM ID |
|------------|-------------------|--------------|--------|
| Export | `this.exportPopup` | `window.TEGAKI_EXPORT_POPUP`<br>`window.exportPopup`<br>`window.exportPopupInstance` | `export-popup` |
| Album | `this.albumPopup` | `window.albumPopupInstance` | `album-popup` |
| Settings | `this.settingsPopup` | なし | `settings-popup` |
| QuickAccess | `this.quickAccessPopup` | なし | `quick-access-popup` |

### 3. 表示制御の混在

- **DOM直接操作** (`export-popup`): `classList.add('show')`, `style.display`
- **インスタンスメソッド**: `popup.show()`, `popup.hide()`, `popup.toggle()`
- **状態管理**: 各ポップアップが独自に `this.isVisible` を保持

### 4. EventBus統合の不完全性

#### 実装済みイベント
- `ui:toggle-settings` - SettingsPopupのトグル
- `ui:show-settings` - SettingsPopupの表示
- `ui:toggle-quick-access` - QuickAccessPopupのトグル（未使用）
- `export:manager:initialized` - ExportManager初期化完了

#### 未実装イベント
- AlbumPopupのイベント（なし）
- ExportPopupのトグルイベント（なし）
- ポップアップ排他制御のイベント（なし）

---

## 🎯 改修目標

### 1. 単一責任原則（SRP）の徹底

**現状**: UIController が初期化・参照管理・表示制御をすべて担当

**改修後**: 
```
PopupManager (新規)
├─ 初期化管理（一元化）
├─ 参照管理（統一インターフェース）
├─ 表示制御（排他制御）
└─ EventBus統合

UIController
├─ ツールクリック処理
├─ スライダー管理
└─ PopupManager への委譲
```

### 2. 初期化経路の統一

**統一仕様**:
- すべてのポップアップは `PopupManager` で初期化
- 依存関係は明示的に注入（DI）
- 遅延初期化は `PopupManager` が一元管理
- リトライ処理は共通化

### 3. API境界の明確化

```javascript
// PopupManager API
class PopupManager {
  // 初期化
  register(name, PopupClass, dependencies, config)
  
  // 参照取得
  get(name)
  
  // 表示制御
  show(name)
  hide(name)
  toggle(name)
  hideAll(exceptName)
  
  // 状態確認
  isVisible(name)
  isReady(name)
  
  // EventBus統合
  emitEvent(name, event, data)
}
```

---

## 📐 改修アーキテクチャ

### ファイル構成（改修後）

```
system/
├─ popup-manager.js (新規)      # ポップアップ統合管理
└─ event-bus.js                 # EventBus（既存・強化）

ui/
├─ album-popup.js               # 改修: PopupManager対応
├─ settings-popup.js            # 改修: PopupManager対応
├─ export-popup.js              # 改修: PopupManager対応
├─ quick-access-popup.js        # 改修: PopupManager対応
└─ ui-panels.js                 # 改修: PopupManagerへ委譲

core-initializer.js             # 改修: PopupManager初期化
core-runtime.js                 # 改修: PopupManager API公開
```

### データフロー

```
[ユーザー操作]
    ↓
[UIController] → イベント検知
    ↓
[PopupManager] → 排他制御・表示切替
    ↓
[EventBus] → 状態変更通知
    ↓
[各Popup] → show()/hide() 実行
    ↓
[DOM更新]
```

---

## 🔧 実装計画

### Phase 1: PopupManager 実装

**ファイル**: `system/popup-manager.js`

**責務**:
- ポップアップ登録・初期化の一元管理
- グローバル参照の統一
- 排他制御の実装
- EventBus統合

**実装内容**:
```javascript
class PopupManager {
  constructor(eventBus) {
    this.eventBus = eventBus;
    this.popups = new Map(); // name -> { instance, config, status }
    this.activePopup = null;
  }
  
  register(name, PopupClass, dependencies, config) {
    // ポップアップ登録（遅延初期化対応）
  }
  
  initialize(name) {
    // 個別初期化（依存関係チェック付き）
  }
  
  initializeAll() {
    // 全ポップアップ初期化（優先順位順）
  }
  
  show(name) {
    // 排他制御付き表示
  }
  
  // ... その他のAPI
}
```

**依存関係**:
- `TegakiEventBus`（必須）

### Phase 2: 各Popup改修

#### 2-1. 共通インターフェース統一

**すべてのPopupで実装必須**:
```javascript
class XxxPopup {
  constructor(dependencies) {
    this.popup = null;
    this.isVisible = false;
  }
  
  // 必須メソッド
  show() { /* show処理 */ }
  hide() { /* hide処理 */ }
  toggle() { /* toggle処理 */ }
  
  // 初期化チェック
  isReady() { return !!this.popup; }
  
  // 破棄
  destroy() { /* cleanup */ }
}
```

#### 2-2. DOM要素管理の統一

**現状**: 各Popupが独自実装

**改修後**: 共通の`_ensurePopupElement()`パターンに統一
```javascript
_ensurePopupElement() {
  this.popup = document.getElementById('xxx-popup');
  
  if (!this.popup) {
    this._createPopupElement();
  } else {
    // 既存要素の初期化
    this.popup.classList.remove('show');
    this.popup.style.display = 'none'; // 初期状態
  }
}
```

#### 2-3. ExportPopup特別対応

**問題**: AnimationSystem初期化完了まで機能しない

**改修**:
- PopupManager内で依存関係チェック
- AnimationSystem初期化完了時に自動リトライ
- `export:manager:initialized` イベントで通知

### Phase 3: UIController改修

**変更点**:
- `PopupManager`への委譲
- 直接的なポップアップ参照を削除
- `showPopup()`, `closeAllPopups()` を `PopupManager` 経由に変更

**改修例**:
```javascript
// 改修前
if (this.settingsPopup) {
  this.settingsPopup.toggle();
}

// 改修後
window.PopupManager.toggle('settings');
```

### Phase 4: core-initializer改修

**変更点**:
- `PopupManager` の初期化
- 各ポップアップの登録
- 遅延初期化処理の削除（PopupManagerに移譲）

**実装例**:
```javascript
function initializePopups(app, coreEngine) {
  const popupManager = new window.PopupManager(window.TegakiEventBus);
  
  // 優先度順に登録
  popupManager.register('settings', window.TegakiUI.SettingsPopup, {
    drawingEngine: coreEngine.getDrawingEngine()
  }, { priority: 1 });
  
  popupManager.register('quickAccess', window.TegakiUI.QuickAccessPopup, {
    drawingEngine: coreEngine.getDrawingEngine()
  }, { priority: 2 });
  
  popupManager.register('album', window.TegakiUI.AlbumPopup, {
    app: app.pixiApp,
    layerSystem: coreEngine.getLayerManager(),
    animationSystem: coreEngine.animationSystem
  }, { 
    priority: 3,
    waitFor: ['animationSystem'] // 依存関係明示
  });
  
  popupManager.register('export', window.ExportPopup, {
    exportManager: window.TEGAKI_EXPORT_MANAGER
  }, { 
    priority: 4,
    waitFor: ['TEGAKI_EXPORT_MANAGER']
  });
  
  // 初期化実行
  popupManager.initializeAll();
  
  // グローバル公開
  window.PopupManager = popupManager;
}
```

### Phase 5: EventBus拡張

**追加イベント**:
```javascript
// ポップアップ表示・非表示
'popup:show' - { name: 'settings' }
'popup:hide' - { name: 'settings' }
'popup:toggled' - { name: 'settings', isVisible: true }

// ポップアップ初期化
'popup:registered' - { name: 'settings' }
'popup:initialized' - { name: 'settings' }
'popup:initialization-failed' - { name: 'settings', error: '...' }

// 排他制御
'popup:all-hidden' - { exceptName: 'settings' }
```

### Phase 6: CoreRuntime API統合

**追加API**:
```javascript
// core-runtime.js
window.CoreRuntime.api = {
  // 既存API...
  
  // Popup API (新規)
  showPopup: (name) => PopupManager.show(name),
  hidePopup: (name) => PopupManager.hide(name),
  togglePopup: (name) => PopupManager.toggle(name),
  isPopupVisible: (name) => PopupManager.isVisible(name)
};
```

---

## 🧪 テスト・検証項目

### 1. 初期化検証

- [ ] すべてのポップアップが正常に初期化される
- [ ] 依存関係のないポップアップは即座に初期化完了
- [ ] AnimationSystem依存（Album, Export）は遅延初期化完了
- [ ] 初期状態で全ポップアップが非表示

### 2. 表示制御検証

- [ ] ツールボタンクリックで対応ポップアップが表示される
- [ ] ポップアップ表示時、他のポップアップが自動的に閉じる
- [ ] `toggle()` で表示/非表示が正常に切り替わる
- [ ] 背景クリックでポップアップが閉じる

### 3. EventBus統合検証

- [ ] `popup:show` イベントが正しく発火
- [ ] `popup:hide` イベントが正しく発火
- [ ] 他モジュールからEventBus経由で制御可能

### 4. 参照管理検証

- [ ] `PopupManager.get(name)` で正しいインスタンスを取得
- [ ] グローバル参照が統一されている
- [ ] UIController内の直接参照が削除されている

---

## 📊 改修前後の比較

### 初期化コード量

| 項目 | 改修前 | 改修後 | 削減率 |
|------|--------|--------|--------|
| core-initializer.js | 約150行 | 約50行 | 67% |
| ui-panels.js | 約100行 | 約30行 | 70% |
| 合計 | 250行 | 80行 | 68% |

### グローバル変数

| 改修前 | 改修後 |
|--------|--------|
| `window.TEGAKI_EXPORT_POPUP` | `window.PopupManager` のみ |
| `window.exportPopup` | |
| `window.exportPopupInstance` | |
| `window.albumPopupInstance` | |
| **4個** | **1個** |

### 初期化経路

| ポップアップ | 改修前 | 改修後 |
|------------|--------|--------|
| Export | `core-initializer` 内リトライ処理 | `PopupManager.register()` |
| Album | `UIController` 経由 | `PopupManager.register()` |
| Settings | 遅延初期化×2 | `PopupManager.register()` |
| QuickAccess | `UIController` 内 | `PopupManager.register()` |

---

## 🚀 マイグレーション手順

### Step 1: PopupManager実装（新規ファイル作成）
1. `system/popup-manager.js` 作成
2. 基本API実装
3. EventBus統合

### Step 2: 各Popup改修（4ファイル）
1. `ui/settings-popup.js` - 共通インターフェース適用
2. `ui/quick-access-popup.js` - 共通インターフェース適用
3. `ui/album-popup.js` - 共通インターフェース適用
4. `ui/export-popup.js` - DOM操作修正 + 共通インターフェース適用

### Step 3: UIController改修
1. `ui/ui-panels.js` - PopupManagerへの委譲実装
2. 直接参照の削除
3. `getXxxPopup()` メソッドを `PopupManager.get()` に置き換え

### Step 4: core-initializer改修
1. PopupManager初期化処理追加
2. 既存の遅延初期化処理削除
3. `initializeExportSystem()` 簡素化

### Step 5: index.html更新
1. `system/popup-manager.js` を読み込み順に追加（event-bus.jsの後）

### Step 6: テスト・検証
1. すべてのポップアップ表示確認
2. 排他制御動作確認
3. EventBus連携確認

---

## ⚠️ 互換性維持

### グローバル参照エイリアス（一時的）

移行期間中は既存コードとの互換性のため、以下を維持:
```javascript
// popup-manager.js 内
window.TEGAKI_EXPORT_POPUP = popupManager.get('export');
window.exportPopup = popupManager.get('export');
window.albumPopupInstance = popupManager.get('album');
```

**削除タイミング**: Phase 6完了後、全参照を確認してから削除

---

## 📝 コーディング規約（統一）

### 命名規則

- **クラス名**: `XxxPopup` (PascalCase)
- **インスタンス名**: `xxxPopup` (camelCase)
- **DOM ID**: `xxx-popup` (kebab-case)
- **EventBus名**: `popup:xxx` (小文字 + コロン)

### メソッド名

- `show()` - ポップアップ表示
- `hide()` - ポップアップ非表示
- `toggle()` - 表示切替
- `isReady()` - 初期化完了確認
- `destroy()` - 破棄処理

### 状態管理

- `this.isVisible` - 表示状態（boolean）
- `this.popup` - DOM要素参照（Element | null）

---

## 🎓 Claude可読性向上ポイント

### 1. 明確なファイル責務
- **PopupManager**: ポップアップの一元管理
- **各Popup**: 自身の表示ロジックのみ
- **UIController**: ユーザー操作の振り分けのみ

### 2. APIの統一
- すべて `PopupManager` 経由でアクセス
- 統一されたインターフェース（show/hide/toggle）

### 3. 依存関係の明示
- コンストラクタで依存注入（DI）
- `register()` 時に依存関係を明示

### 4. グローバル汚染の最小化
- `window.PopupManager` のみを公開
- 他の参照は内部管理

### 5. EventBus統合の完全性
- すべての状態変更をEventBusで通知
- 疎結合なモジュール間連携

---

## 📅 推定工数

| フェーズ | 作業内容 | 工数 |
|---------|---------|------|
| Phase 1 | PopupManager実装 | 2-3時間 |
| Phase 2 | 各Popup改修（4ファイル） | 3-4時間 |
| Phase 3 | UIController改修 | 1-2時間 |
| Phase 4 | core-initializer改修 | 1時間 |
| Phase 5 | EventBus拡張 | 1時間 |
| Phase 6 | CoreRuntime API統合 | 1時間 |
| テスト | 全体検証 | 2時間 |
| **合計** | | **11-16時間** |

---

## ✅ 改修完了チェックリスト

### コード品質
- [ ] DRY原則違反なし
- [ ] SOLID原則準拠
- [ ] グローバル変数最小化
- [ ] 明確なAPI境界

### 機能確認
- [ ] 全ポップアップが正常に表示される
- [ ] 排他制御が正しく動作する
- [ ] EventBus統合が完全
- [ ] ショートカットキーが動作する

### ドキュメント
- [ ] PopupManager APIドキュメント作成
- [ ] EventBus新規イベント一覧作成
- [ ] マイグレーションガイド作成

### パフォーマンス
- [ ] 初期化時間が改善されている
- [ ] メモリリーク確認完了
- [ ] 不要なリトライ処理削除確認

---

## 🔍 追加改善案（将来実装）

### 1. ポップアップ位置記憶
- LocalStorage連携
- ユーザーがドラッグ移動した位置を保存

### 2. ポップアップアニメーション統一
- CSS Transitionの統一
- フェードイン/アウトの共通化

### 3. モーダル/非モーダル切替
- 設定で背景クリック時の挙動を変更可能に
- オーバーレイの有無を制御

### 4. ポップアップスタック管理
- 複数ポップアップ同時表示対応
- Z-index自動管理

---

**改修完了目標**: 全Phase実装後、Claudeが以下を即座に理解できること
1. どのポップアップがどこで初期化されるか
2. 表示制御の経路（PopupManager → Popup）
3. EventBusとの連携ポイント
4. 新規ポップアップの追加方法（`register()` のみ）